//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// dmem_master_HADDR              O    32 reg
// dmem_master_HBURST             O     3 const
// dmem_master_HMASTLOCK          O     1 const
// dmem_master_HPROT              O     4 const
// dmem_master_HSIZE              O     3 reg
// dmem_master_HTRANS             O     2 reg
// dmem_master_HWDATA             O    32 reg
// dmem_master_HWRITE             O     1 reg
// RDY_hart_reset_server_request_put  O     1 reg
// hart_reset_server_response_get  O     1 reg
// RDY_hart_reset_server_response_get  O     1 reg
// RDY_set_watch_tohost           O     1 reg
// mv_tohost_value                O    32 reg
// RDY_mv_tohost_value            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dmem_master_HRDATA             I    32 reg
// dmem_master_HREADY             I     1
// dmem_master_HRESP              I     1
// m_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// hart_reset_server_request_put  I     1 reg
// set_verbosity_verbosity        I     2 reg
// set_watch_tohost_watch_tohost  I     1
// set_watch_tohost_tohost_addr   I    32 reg
// EN_hart_reset_server_request_put  I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_hart_reset_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     dmem_master_HADDR,

	     dmem_master_HBURST,

	     dmem_master_HMASTLOCK,

	     dmem_master_HPROT,

	     dmem_master_HSIZE,

	     dmem_master_HTRANS,

	     dmem_master_HWDATA,

	     dmem_master_HWRITE,

	     dmem_master_HRDATA,

	     dmem_master_HREADY,

	     dmem_master_HRESP,

	     m_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     hart_reset_server_request_put,
	     EN_hart_reset_server_request_put,
	     RDY_hart_reset_server_request_put,

	     EN_hart_reset_server_response_get,
	     hart_reset_server_response_get,
	     RDY_hart_reset_server_response_get,

	     set_verbosity_verbosity,
	     EN_set_verbosity,

	     set_watch_tohost_watch_tohost,
	     set_watch_tohost_tohost_addr,
	     EN_set_watch_tohost,
	     RDY_set_watch_tohost,

	     mv_tohost_value,
	     RDY_mv_tohost_value);
  input  CLK;
  input  RST_N;

  // value method dmem_master_haddr
  output [31 : 0] dmem_master_HADDR;

  // value method dmem_master_hburst
  output [2 : 0] dmem_master_HBURST;

  // value method dmem_master_hmastlock
  output dmem_master_HMASTLOCK;

  // value method dmem_master_hprot
  output [3 : 0] dmem_master_HPROT;

  // value method dmem_master_hsize
  output [2 : 0] dmem_master_HSIZE;

  // value method dmem_master_htrans
  output [1 : 0] dmem_master_HTRANS;

  // value method dmem_master_hwdata
  output [31 : 0] dmem_master_HWDATA;

  // value method dmem_master_hwrite
  output dmem_master_HWRITE;

  // action method dmem_master_hrdata
  input  [31 : 0] dmem_master_HRDATA;

  // action method dmem_master_hready
  input  dmem_master_HREADY;

  // action method dmem_master_hresp
  input  dmem_master_HRESP;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method hart_reset_server_request_put
  input  hart_reset_server_request_put;
  input  EN_hart_reset_server_request_put;
  output RDY_hart_reset_server_request_put;

  // actionvalue method hart_reset_server_response_get
  input  EN_hart_reset_server_response_get;
  output hart_reset_server_response_get;
  output RDY_hart_reset_server_response_get;

  // action method set_verbosity
  input  [1 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [31 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [31 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [31 : 0] dmem_master_HADDR, dmem_master_HWDATA, mv_tohost_value;
  wire [3 : 0] dmem_master_HPROT;
  wire [2 : 0] dmem_master_HBURST, dmem_master_HSIZE;
  wire [1 : 0] dmem_master_HTRANS;
  wire RDY_hart_reset_server_request_put,
       RDY_hart_reset_server_response_get,
       RDY_mv_tohost_value,
       RDY_set_watch_tohost,
       dmem_master_HMASTLOCK,
       dmem_master_HWRITE,
       hart_reset_server_response_get;

  // inlined wires
  wire imem_c_w_addr$whas;

  // register cfg_verbosity
  reg [1 : 0] cfg_verbosity;
  wire [1 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_c_rg_cache_b16
  reg [15 : 0] imem_c_rg_cache_b16;
  wire [15 : 0] imem_c_rg_cache_b16$D_IN;
  wire imem_c_rg_cache_b16$EN;

  // register imem_c_rg_exc
  reg [4 : 0] imem_c_rg_exc;
  wire [4 : 0] imem_c_rg_exc$D_IN;
  wire imem_c_rg_exc$EN;

  // register imem_c_rg_instr
  reg [32 : 0] imem_c_rg_instr;
  reg [32 : 0] imem_c_rg_instr$D_IN;
  wire imem_c_rg_instr$EN;

  // register imem_c_rg_pc
  reg [31 : 0] imem_c_rg_pc;
  wire [31 : 0] imem_c_rg_pc$D_IN;
  wire imem_c_rg_pc$EN;

  // register imem_c_rg_state
  reg [2 : 0] imem_c_rg_state;
  reg [2 : 0] imem_c_rg_state$D_IN;
  wire imem_c_rg_state$EN;

  // register rg_alu_outputs
  reg [111 : 0] rg_alu_outputs;
  wire [111 : 0] rg_alu_outputs$D_IN;
  wire rg_alu_outputs$EN;

  // register rg_csr_permitted
  reg rg_csr_permitted;
  wire rg_csr_permitted$D_IN, rg_csr_permitted$EN;

  // register rg_exec1_inputs
  reg [157 : 0] rg_exec1_inputs;
  wire [157 : 0] rg_exec1_inputs$D_IN;
  wire rg_exec1_inputs$EN;

  // register rg_pc
  reg [31 : 0] rg_pc;
  reg [31 : 0] rg_pc$D_IN;
  wire rg_pc$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_trap_info
  reg [67 : 0] rg_trap_info;
  reg [67 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // ports of submodule addr_map
  wire [31 : 0] addr_map$m_is_dtcm_addr_addr,
		addr_map$m_is_itcm_addr_addr,
		addr_map$m_pc_reset_value;

  // ports of submodule csr_regfile
  wire [64 : 0] csr_regfile$mav_csr_write;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_ret_actions,
		csr_regfile$csr_trap_actions,
		csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$mav_csr_write_word;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$read_csr_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted,
       csr_regfile$access_permitted_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule gpr_regfile
  reg [31 : 0] gpr_regfile$write_rd_rd_val;
  wire [31 : 0] gpr_regfile$read_rs1, gpr_regfile$read_rs2;
  wire [4 : 0] gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule mbox
  wire [31 : 0] mbox$req_v1, mbox$req_v2, mbox$word;
  wire [2 : 0] mbox$req_f3;
  wire mbox$EN_req,
       mbox$EN_req_reset,
       mbox$EN_rsp_reset,
       mbox$req_is_OP_not_OP_32,
       mbox$valid;

  // ports of submodule near_mem
  wire [36 : 0] near_mem$imem_instr;
  wire [31 : 0] near_mem$dmem_master_HADDR,
		near_mem$dmem_master_HRDATA,
		near_mem$dmem_master_HWDATA,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word32_get,
		near_mem$imem_req_addr,
		near_mem$mv_tohost_value,
		near_mem$set_watch_tohost_tohost_addr;
  wire [4 : 0] near_mem$dmem_exc_get;
  wire [3 : 0] near_mem$dmem_master_HPROT;
  wire [2 : 0] near_mem$dmem_master_HBURST,
	       near_mem$dmem_master_HSIZE,
	       near_mem$dmem_req_f3;
  wire [1 : 0] near_mem$dmem_master_HTRANS;
  wire near_mem$EN_dmem_exc_get,
       near_mem$EN_dmem_req,
       near_mem$EN_dmem_word32_get,
       near_mem$EN_imem_instr,
       near_mem$EN_imem_req,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_set_watch_tohost,
       near_mem$RDY_dmem_exc_get,
       near_mem$RDY_dmem_req,
       near_mem$RDY_dmem_word32_get,
       near_mem$RDY_imem_instr,
       near_mem$RDY_imem_req,
       near_mem$RDY_mv_tohost_value,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$RDY_set_watch_tohost,
       near_mem$dmem_master_HMASTLOCK,
       near_mem$dmem_master_HREADY,
       near_mem$dmem_master_HRESP,
       near_mem$dmem_master_HWRITE,
       near_mem$dmem_req_op,
       near_mem$set_watch_tohost_watch_tohost;

  // ports of submodule sbox
  wire [31 : 0] sbox$req_v1, sbox$req_v2, sbox$word;
  wire sbox$EN_req,
       sbox$EN_server_reset_request_put,
       sbox$EN_server_reset_response_get,
       sbox$RDY_server_reset_request_put,
       sbox$RDY_server_reset_response_get,
       sbox$req_right,
       sbox$valid;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_c_rl_I16_ODD_RSP,
       CAN_FIRE_RL_imem_c_rl_I32_ODD_RSP,
       CAN_FIRE_RL_imem_c_rl_NEW_RSP,
       CAN_FIRE_RL_imem_c_rl_new_req,
       CAN_FIRE_RL_rl_CSRR_S_or_C_completion,
       CAN_FIRE_RL_rl_CSRR_W_completion,
       CAN_FIRE_RL_rl_LD_completion,
       CAN_FIRE_RL_rl_M_completion,
       CAN_FIRE_RL_rl_SH_completion,
       CAN_FIRE_RL_rl_ST_completion,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_exec1,
       CAN_FIRE_RL_rl_exec2,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_Debug_Mode,
       CAN_FIRE_RL_rl_reset_from_RUNNING,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_restart_external_interrupt,
       CAN_FIRE_RL_rl_restart_trap,
       CAN_FIRE_RL_rl_run,
       CAN_FIRE_RL_rl_take_external_interrupt,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_7,
       CAN_FIRE_dmem_master_hrdata,
       CAN_FIRE_dmem_master_hready,
       CAN_FIRE_dmem_master_hresp,
       CAN_FIRE_hart_reset_server_request_put,
       CAN_FIRE_hart_reset_server_response_get,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP,
       WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP,
       WILL_FIRE_RL_imem_c_rl_NEW_RSP,
       WILL_FIRE_RL_imem_c_rl_new_req,
       WILL_FIRE_RL_rl_CSRR_S_or_C_completion,
       WILL_FIRE_RL_rl_CSRR_W_completion,
       WILL_FIRE_RL_rl_LD_completion,
       WILL_FIRE_RL_rl_M_completion,
       WILL_FIRE_RL_rl_SH_completion,
       WILL_FIRE_RL_rl_ST_completion,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_exec1,
       WILL_FIRE_RL_rl_exec2,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_Debug_Mode,
       WILL_FIRE_RL_rl_reset_from_RUNNING,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_restart_external_interrupt,
       WILL_FIRE_RL_rl_restart_trap,
       WILL_FIRE_RL_rl_run,
       WILL_FIRE_RL_rl_take_external_interrupt,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_7,
       WILL_FIRE_dmem_master_hrdata,
       WILL_FIRE_dmem_master_hready,
       WILL_FIRE_dmem_master_hresp,
       WILL_FIRE_hart_reset_server_request_put,
       WILL_FIRE_hart_reset_server_response_get,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_imem_c_w_addr$wset_1__VAL_3;
  reg [4 : 0] MUX_rg_state$write_1__VAL_1;
  wire [67 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [32 : 0] MUX_imem_c_rg_instr$write_1__VAL_2,
		MUX_imem_c_rg_instr$write_1__VAL_3,
		MUX_imem_c_rg_instr$write_1__VAL_4;
  wire [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2,
		MUX_near_mem$imem_req_1__VAL_1,
		MUX_near_mem$imem_req_1__VAL_2;
  wire [4 : 0] MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_4,
	       MUX_rg_state$write_1__VAL_5;
  wire [2 : 0] MUX_imem_c_rg_state$write_1__VAL_2,
	       MUX_imem_c_rg_state$write_1__VAL_4;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_gpr_regfile$write_rd_1__SEL_4,
       MUX_imem_c_w_addr$wset_1__SEL_1,
       MUX_imem_c_w_addr$wset_1__SEL_2,
       MUX_imem_c_w_addr$wset_1__SEL_3,
       MUX_imem_c_w_addr$wset_1__SEL_4,
       MUX_imem_c_w_addr$wset_1__SEL_6,
       MUX_near_mem$imem_req_1__SEL_1,
       MUX_rg_pc$write_1__SEL_1,
       MUX_rg_pc$write_1__SEL_2,
       MUX_rg_pc$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_info$write_1__SEL_2,
       MUX_rg_trap_info$write_1__SEL_3,
       MUX_rg_trap_info$write_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3782;
  reg [31 : 0] v__h116899;
  reg [31 : 0] v__h116988;
  reg [31 : 0] v__h143062;
  reg [31 : 0] v__h143850;
  reg [31 : 0] v__h145103;
  reg [31 : 0] v__h144348;
  reg [31 : 0] v__h144870;
  reg [31 : 0] v__h147200;
  reg [31 : 0] v__h148276;
  reg [31 : 0] v__h148764;
  reg [31 : 0] v__h149249;
  reg [31 : 0] v__h149946;
  reg [31 : 0] v__h150692;
  reg [31 : 0] v__h150993;
  reg [31 : 0] v__h151169;
  reg [31 : 0] v__h151361;
  reg [31 : 0] v__h151483;
  reg [31 : 0] v__h151962;
  reg [31 : 0] v__h152177;
  reg [31 : 0] v__h152314;
  reg [31 : 0] v__h3617;
  reg [31 : 0] v__h3611;
  reg [31 : 0] v__h3776;
  reg [31 : 0] v__h116893;
  reg [31 : 0] v__h116982;
  reg [31 : 0] v__h143056;
  reg [31 : 0] v__h143844;
  reg [31 : 0] v__h144342;
  reg [31 : 0] v__h144864;
  reg [31 : 0] v__h145097;
  reg [31 : 0] v__h147194;
  reg [31 : 0] v__h148270;
  reg [31 : 0] v__h148758;
  reg [31 : 0] v__h149243;
  reg [31 : 0] v__h149940;
  reg [31 : 0] v__h150686;
  reg [31 : 0] v__h150987;
  reg [31 : 0] v__h151163;
  reg [31 : 0] v__h151355;
  reg [31 : 0] v__h151477;
  reg [31 : 0] v__h151956;
  reg [31 : 0] v__h152171;
  reg [31 : 0] v__h152308;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] addr__h2338, x__h144839;
  reg CASE_rg_alu_outputs_BITS_111_TO_108_1_NOT_rg_a_ETC__q4;
  wire [127 : 0] csr_regfile_read_csr_mcycle__11_MINUS_rg_start_ETC___d1828;
  wire [103 : 0] IF_rg_exec1_inputs_94_BIT_108_95_OR_rg_exec1_i_ETC___d1397;
  wire [63 : 0] _theResult____h151047,
		cpi__h151049,
		cpifrac__h151050,
		delta_CPI_cycles__h151045,
		delta_CPI_instrs___1__h151091,
		delta_CPI_instrs__h151046,
		x__h151048;
  wire [31 : 0] IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639,
		IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_pc_2_ETC___d1218,
		SEXT_rg_exec1_inputs_94_BITS_157_TO_146_057___d1058,
		_theResult____h4297,
		_theResult___snd__h119992,
		_theResult___snd_fst__h2426,
		_theResult___snd_fst__h2432,
		a__h100852,
		a__h104257,
		a__h107640,
		a__h11617,
		a__h119977,
		a__h123406,
		a__h126658,
		a__h129901,
		a__h133166,
		a__h136407,
		a__h139656,
		a__h15053,
		a__h18487,
		a__h21984,
		a__h25556,
		a__h29150,
		a__h32505,
		a__h35893,
		a__h39449,
		a__h43016,
		a__h46383,
		a__h49788,
		a__h56537,
		a__h59920,
		a__h63420,
		a__h6377,
		a__h66852,
		a__h70261,
		a__h73702,
		a__h77165,
		a__h80581,
		a__h83950,
		a__h87308,
		a__h90716,
		a__h94091,
		a__h97477,
		addr__h117611,
		addr__h117727,
		addr_of_b32___1__h2468,
		addr_of_b32__h2339,
		alu_outputs___1_addr__h118049,
		alu_outputs___1_addr__h118069,
		alu_outputs___1_val2__h117389,
		b__h100853,
		b__h104258,
		b__h107641,
		b__h11618,
		b__h119978,
		b__h123407,
		b__h126659,
		b__h129902,
		b__h133167,
		b__h136408,
		b__h139657,
		b__h15054,
		b__h18488,
		b__h21985,
		b__h25557,
		b__h29151,
		b__h32506,
		b__h35894,
		b__h39450,
		b__h43017,
		b__h46384,
		b__h49789,
		b__h53159,
		b__h56538,
		b__h59921,
		b__h63421,
		b__h6378,
		b__h66853,
		b__h70262,
		b__h73703,
		b__h77166,
		b__h80582,
		b__h83951,
		b__h87309,
		b__h90717,
		b__h94092,
		b__h97478,
		branch_target__h118017,
		imem_c_rg_instr_BITS_31_TO_0__q1,
		instr__h4479,
		next_pc___1__h119292,
		next_pc__h118027,
		next_pc__h119289,
		next_pc__h150034,
		rd_val__h118089,
		rd_val__h118099,
		rd_val__h118108,
		val2__h117379,
		value__h150812,
		x1_avValue_new_csr_value__h150294,
		x1_avValue_snd_addr__h118300,
		x1_avValue_snd_addr__h118342,
		x1_avValue_snd_addr__h118349,
		x1_avValue_snd_addr__h118356,
		x1_avValue_snd_val1__h118308,
		x1_avValue_snd_val1__h118315,
		x1_avValue_snd_val1__h118322,
		x1_avValue_snd_val1__h118329,
		x1_avValue_snd_val1__h118343,
		x1_avValue_snd_val1__h118357,
		x1_avValue_snd_val2__h118337,
		x1_avValue_snd_val2__h118344,
		x__h104246,
		x__h119191,
		x__h119944,
		x__h119955,
		x__h119966,
		x__h126647,
		x__h133144,
		x__h133155,
		x__h15042,
		x__h21962,
		x__h21973,
		x__h29139,
		x__h35860,
		x__h35871,
		x__h35882,
		x__h43005,
		x__h49766,
		x__h49777,
		x__h56526,
		x__h6322,
		x__h6333,
		x__h63376,
		x__h63387,
		x__h63398,
		x__h63409,
		x__h6344,
		x__h6355,
		x__h6366,
		x__h70250,
		x__h77143,
		x__h77154,
		x__h83939,
		x__h90683,
		x__h90694,
		x__h90705,
		x__h97466,
		y__h104247,
		y__h119945,
		y__h119956,
		y__h119967,
		y__h126648,
		y__h133145,
		y__h133156,
		y__h150277,
		y__h15043,
		y__h21963,
		y__h21974,
		y__h29140,
		y__h35861,
		y__h35872,
		y__h35883,
		y__h43006,
		y__h49767,
		y__h49778,
		y__h56527,
		y__h6323,
		y__h6334,
		y__h63377,
		y__h63388,
		y__h63399,
		y__h63410,
		y__h6345,
		y__h6356,
		y__h6367,
		y__h70251,
		y__h77144,
		y__h77155,
		y__h83940,
		y__h90684,
		y__h90695,
		y__h90706,
		y__h97467;
  wire [20 : 0] SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276,
		rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2;
  wire [19 : 0] imm20__h46400;
  wire [12 : 0] SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383,
		imm13_SB__h118015;
  wire [11 : 0] imm12__h117734,
		imm12__h15072,
		imm12__h43033,
		imm12__h59938,
		imm12__h63436,
		imm12__h6397,
		imm12__h66871,
		imm12__h73723,
		offset__h21997,
		rg_exec1_inputs_BITS_157_TO_146__q3;
  wire [9 : 0] nzimm10__h59936, nzimm10__h63434;
  wire [8 : 0] offset__h35909;
  wire [7 : 0] offset__h6393;
  wire [6 : 0] offset__h15069;
  wire [5 : 0] imm6__h43031;
  wire [4 : 0] IF_rg_alu_outputs_522_BITS_111_TO_108_523_EQ_3_ETC___d1613,
	       offset_BITS_4_TO_0___h11763,
	       offset_BITS_4_TO_0___h18683,
	       rd__h15074,
	       rs1__h15073,
	       shamt__h117374,
	       x1_avValue_snd_rd__h118362;
  wire [3 : 0] alu_outputs___1_exc_code__h118287,
	       exc__h147781,
	       x1_avValue_snd_exc_code__h118339,
	       x1_avValue_snd_exc_code__h118353,
	       x1_avValue_snd_exc_code__h118360;
  wire IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51,
       IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54,
       IF_rg_exec1_inputs_94_BIT_91_084_THEN_NOT_rg_e_ETC___d1103,
       IF_rg_exec1_inputs_94_BIT_93_080_THEN_NOT_rg_e_ETC___d1105,
       IF_rg_exec1_inputs_94_BIT_94_078_THEN_rg_exec1_ETC___d1106,
       NOT_cfg_verbosity_read__1_ULE_1_29___d130,
       csr_regfile_RDY_server_reset_request_put__0_AN_ETC___d86,
       csr_regfile_RDY_server_reset_response_get__7_A_ETC___d103,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d163,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d310,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d333,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d356,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d437,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d459,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d489,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d508,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d530,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d557,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d592,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d616,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d646,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d671,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d696,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d765,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d789,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d810,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d832,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d855,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d877,
       csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d898,
       imem_c_rg_state_EQ_0_7_OR_IF_imem_c_w_addr_wha_ETC___d69,
       rg_exec1_inputs_94_BITS_63_TO_32_036_EQ_rg_exe_ETC___d1095,
       rg_exec1_inputs_94_BITS_63_TO_32_036_SLT_rg_ex_ETC___d1097,
       rg_exec1_inputs_94_BITS_63_TO_32_036_ULT_rg_ex_ETC___d1099,
       rg_trap_info_818_BITS_67_TO_36_819_EQ_csr_regf_ETC___d1823;

  // value method dmem_master_haddr
  assign dmem_master_HADDR = near_mem$dmem_master_HADDR ;

  // value method dmem_master_hburst
  assign dmem_master_HBURST = near_mem$dmem_master_HBURST ;

  // value method dmem_master_hmastlock
  assign dmem_master_HMASTLOCK = near_mem$dmem_master_HMASTLOCK ;

  // value method dmem_master_hprot
  assign dmem_master_HPROT = near_mem$dmem_master_HPROT ;

  // value method dmem_master_hsize
  assign dmem_master_HSIZE = near_mem$dmem_master_HSIZE ;

  // value method dmem_master_htrans
  assign dmem_master_HTRANS = near_mem$dmem_master_HTRANS ;

  // value method dmem_master_hwdata
  assign dmem_master_HWDATA = near_mem$dmem_master_HWDATA ;

  // value method dmem_master_hwrite
  assign dmem_master_HWRITE = near_mem$dmem_master_HWRITE ;

  // action method dmem_master_hrdata
  assign CAN_FIRE_dmem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_dmem_master_hrdata = 1'd1 ;

  // action method dmem_master_hready
  assign CAN_FIRE_dmem_master_hready = 1'd1 ;
  assign WILL_FIRE_dmem_master_hready = 1'd1 ;

  // action method dmem_master_hresp
  assign CAN_FIRE_dmem_master_hresp = 1'd1 ;
  assign WILL_FIRE_dmem_master_hresp = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method hart_reset_server_request_put
  assign RDY_hart_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart_reset_server_request_put =
	     EN_hart_reset_server_request_put ;

  // actionvalue method hart_reset_server_response_get
  assign hart_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart_reset_server_response_get =
	     EN_hart_reset_server_response_get ;

  // action method set_verbosity
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = near_mem$RDY_set_watch_tohost ;
  assign CAN_FIRE_set_watch_tohost = near_mem$RDY_set_watch_tohost ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = near_mem$mv_tohost_value ;
  assign RDY_mv_tohost_value = near_mem$RDY_mv_tohost_value ;

  // submodule addr_map
  mkCore_Map addr_map(.CLK(CLK),
		      .RST_N(RST_N),
		      .m_is_dtcm_addr_addr(addr_map$m_is_dtcm_addr_addr),
		      .m_is_itcm_addr_addr(addr_map$m_is_itcm_addr_addr),
		      .m_itcm_addr_base(),
		      .m_itcm_addr_size(),
		      .m_itcm_addr_lim(),
		      .m_is_itcm_addr(),
		      .m_dtcm_addr_base(),
		      .m_dtcm_addr_size(),
		      .m_dtcm_addr_lim(),
		      .m_is_dtcm_addr(),
		      .m_pc_reset_value(addr_map$m_pc_reset_value),
		      .m_mtvec_reset_value());

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_csr_addr(csr_regfile$access_permitted_csr_addr),
			    .access_permitted_read_not_write(csr_regfile$access_permitted_read_not_write),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_mstatus(),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_misa(csr_regfile$read_misa),
			    .read_csr_mtime(),
			    .access_permitted(csr_regfile$access_permitted),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO1 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO1 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule mbox
  mkRISCV_MBox mbox(.CLK(CLK),
		    .RST_N(RST_N),
		    .req_f3(mbox$req_f3),
		    .req_is_OP_not_OP_32(mbox$req_is_OP_not_OP_32),
		    .req_v1(mbox$req_v1),
		    .req_v2(mbox$req_v2),
		    .EN_req_reset(mbox$EN_req_reset),
		    .EN_rsp_reset(mbox$EN_rsp_reset),
		    .EN_req(mbox$EN_req),
		    .RDY_req_reset(),
		    .RDY_rsp_reset(),
		    .valid(mbox$valid),
		    .word(mbox$word));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_HRDATA(near_mem$dmem_master_HRDATA),
		      .dmem_master_HREADY(near_mem$dmem_master_HREADY),
		      .dmem_master_HRESP(near_mem$dmem_master_HRESP),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .set_watch_tohost_tohost_addr(near_mem$set_watch_tohost_tohost_addr),
		      .set_watch_tohost_watch_tohost(near_mem$set_watch_tohost_watch_tohost),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_imem_instr(near_mem$EN_imem_instr),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_dmem_word32_get(near_mem$EN_dmem_word32_get),
		      .EN_dmem_exc_get(near_mem$EN_dmem_exc_get),
		      .EN_set_watch_tohost(near_mem$EN_set_watch_tohost),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .RDY_imem_req(near_mem$RDY_imem_req),
		      .imem_instr(near_mem$imem_instr),
		      .RDY_imem_instr(near_mem$RDY_imem_instr),
		      .RDY_dmem_req(near_mem$RDY_dmem_req),
		      .dmem_word32_get(near_mem$dmem_word32_get),
		      .RDY_dmem_word32_get(near_mem$RDY_dmem_word32_get),
		      .dmem_exc_get(near_mem$dmem_exc_get),
		      .RDY_dmem_exc_get(near_mem$RDY_dmem_exc_get),
		      .dmem_master_HADDR(near_mem$dmem_master_HADDR),
		      .dmem_master_HBURST(near_mem$dmem_master_HBURST),
		      .dmem_master_HMASTLOCK(near_mem$dmem_master_HMASTLOCK),
		      .dmem_master_HPROT(near_mem$dmem_master_HPROT),
		      .dmem_master_HSIZE(near_mem$dmem_master_HSIZE),
		      .dmem_master_HTRANS(near_mem$dmem_master_HTRANS),
		      .dmem_master_HWDATA(near_mem$dmem_master_HWDATA),
		      .dmem_master_HWRITE(near_mem$dmem_master_HWRITE),
		      .RDY_set_watch_tohost(near_mem$RDY_set_watch_tohost),
		      .mv_tohost_value(near_mem$mv_tohost_value),
		      .RDY_mv_tohost_value(near_mem$RDY_mv_tohost_value));

  // submodule sbox
  mkLog_Shifter_Box sbox(.CLK(CLK),
			 .RST_N(RST_N),
			 .req_right(sbox$req_right),
			 .req_v1(sbox$req_v1),
			 .req_v2(sbox$req_v2),
			 .EN_server_reset_request_put(sbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(sbox$EN_server_reset_response_get),
			 .EN_req(sbox$EN_req),
			 .RDY_server_reset_request_put(sbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(sbox$RDY_server_reset_response_get),
			 .valid(sbox$valid),
			 .word(sbox$word));

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     gpr_regfile$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__7_A_ETC___d103 &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_run
  assign CAN_FIRE_RL_rl_run = MUX_rg_state$write_1__SEL_4 ;
  assign WILL_FIRE_RL_rl_run = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_exec1
  assign CAN_FIRE_RL_rl_exec1 =
	     (rg_exec1_inputs[108] || rg_exec1_inputs[107] ||
	      rg_exec1_inputs[106] ||
	      rg_exec1_inputs[104] ||
	      rg_exec1_inputs[105] ||
	      rg_exec1_inputs[103] ||
	      rg_exec1_inputs[102] ||
	      (rg_exec1_inputs[101] ?
		 near_mem$RDY_dmem_req :
		 !rg_exec1_inputs[100] || near_mem$RDY_dmem_req)) &&
	     rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_exec1 = CAN_FIRE_RL_rl_exec1 ;

  // rule RL_rl_exec2
  assign CAN_FIRE_RL_rl_exec2 =
	     CASE_rg_alu_outputs_BITS_111_TO_108_1_NOT_rg_a_ETC__q4 &&
	     rg_state == 5'd5 ;
  assign WILL_FIRE_RL_rl_exec2 = CAN_FIRE_RL_rl_exec2 ;

  // rule RL_rl_LD_completion
  assign CAN_FIRE_RL_rl_LD_completion =
	     near_mem$RDY_dmem_exc_get && near_mem$RDY_dmem_word32_get &&
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_LD_completion = CAN_FIRE_RL_rl_LD_completion ;

  // rule RL_rl_ST_completion
  assign CAN_FIRE_RL_rl_ST_completion =
	     near_mem$RDY_dmem_exc_get && near_mem$RDY_dmem_word32_get &&
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_ST_completion = CAN_FIRE_RL_rl_ST_completion ;

  // rule RL_rl_M_completion
  assign CAN_FIRE_RL_rl_M_completion =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd10 &&
	     mbox$valid ;
  assign WILL_FIRE_RL_rl_M_completion = CAN_FIRE_RL_rl_M_completion ;

  // rule RL_rl_SH_completion
  assign CAN_FIRE_RL_rl_SH_completion =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd11 &&
	     sbox$valid ;
  assign WILL_FIRE_RL_rl_SH_completion = CAN_FIRE_RL_rl_SH_completion ;

  // rule RL_rl_CSRR_W_completion
  assign CAN_FIRE_RL_rl_CSRR_W_completion =
	     (!rg_csr_permitted || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_CSRR_W_completion =
	     CAN_FIRE_RL_rl_CSRR_W_completion ;

  // rule RL_rl_CSRR_S_or_C_completion
  assign CAN_FIRE_RL_rl_CSRR_S_or_C_completion =
	     (!rg_csr_permitted || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd9 ;
  assign WILL_FIRE_RL_rl_CSRR_S_or_C_completion =
	     CAN_FIRE_RL_rl_CSRR_S_or_C_completion ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_restart_trap
  assign CAN_FIRE_RL_rl_restart_trap =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd13 ;
  assign WILL_FIRE_RL_rl_restart_trap = CAN_FIRE_RL_rl_restart_trap ;

  // rule RL_rl_reset_from_Debug_Mode
  assign CAN_FIRE_RL_rl_reset_from_Debug_Mode =
	     rg_state == 5'd2 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_Debug_Mode =
	     CAN_FIRE_RL_rl_reset_from_Debug_Mode ;

  // rule RL_rl_reset_from_RUNNING
  assign CAN_FIRE_RL_rl_reset_from_RUNNING =
	     rg_state == 5'd3 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_RUNNING =
	     CAN_FIRE_RL_rl_reset_from_RUNNING ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd17 &&
	     !f_reset_reqs$EMPTY_N &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 5'd17 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = CAN_FIRE_RL_rl_reset_from_WFI ;

  // rule RL_rl_take_external_interrupt
  assign CAN_FIRE_RL_rl_take_external_interrupt =
	     csr_regfile$interrupt_pending[4] && rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_take_external_interrupt =
	     CAN_FIRE_RL_rl_take_external_interrupt ;

  // rule RL_rl_restart_external_interrupt
  assign CAN_FIRE_RL_rl_restart_external_interrupt =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_restart_external_interrupt =
	     CAN_FIRE_RL_rl_restart_external_interrupt ;

  // rule RL_imem_c_rl_I32_ODD_RSP
  assign CAN_FIRE_RL_imem_c_rl_I32_ODD_RSP =
	     near_mem$RDY_imem_instr && imem_c_rg_state == 3'd3 ;
  assign WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP =
	     CAN_FIRE_RL_imem_c_rl_I32_ODD_RSP ;

  // rule RL_imem_c_rl_NEW_RSP
  assign CAN_FIRE_RL_imem_c_rl_NEW_RSP =
	     near_mem$RDY_imem_instr && near_mem$RDY_imem_req &&
	     imem_c_rg_state == 3'd2 ;
  assign WILL_FIRE_RL_imem_c_rl_NEW_RSP = CAN_FIRE_RL_imem_c_rl_NEW_RSP ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule RL_imem_c_rl_I16_ODD_RSP
  assign CAN_FIRE_RL_imem_c_rl_I16_ODD_RSP = imem_c_rg_state == 3'd4 ;
  assign WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP =
	     CAN_FIRE_RL_imem_c_rl_I16_ODD_RSP ;

  // rule RL_imem_c_rl_new_req
  assign CAN_FIRE_RL_imem_c_rl_new_req =
	     imem_c_w_addr$whas &&
	     (imem_c_rg_state != 3'd0 &&
	      !IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51 &&
	      IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 &&
	      imem_c_rg_cache_b16[1:0] != 2'b11 ||
	      near_mem$RDY_imem_req) &&
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) ;
  assign WILL_FIRE_RL_imem_c_rl_new_req = CAN_FIRE_RL_imem_c_rl_new_req ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__0_AN_ETC___d86 &&
	     rg_state == 5'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_4 =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0) ;
  assign MUX_imem_c_w_addr$wset_1__SEL_1 =
	     MUX_rg_state$write_1__SEL_3 && rg_csr_permitted ;
  assign MUX_imem_c_w_addr$wset_1__SEL_2 =
	     MUX_rg_state$write_1__SEL_2 && !near_mem$dmem_exc_get[4] ;
  assign MUX_imem_c_w_addr$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ;
  assign MUX_imem_c_w_addr$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_restart_external_interrupt ||
	     WILL_FIRE_RL_rl_restart_trap ;
  assign MUX_imem_c_w_addr$wset_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume || WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;
  assign MUX_near_mem$imem_req_1__SEL_1 =
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP && imem_c_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[22:21] == 2'b11 ;
  assign MUX_rg_pc$write_1__SEL_1 =
	     MUX_rg_state$write_1__SEL_3 && rg_csr_permitted ;
  assign MUX_rg_pc$write_1__SEL_2 =
	     MUX_rg_state$write_1__SEL_2 && !near_mem$dmem_exc_get[4] ;
  assign MUX_rg_pc$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_take_external_interrupt || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      (rg_alu_outputs[103:101] == 3'd0 ||
	       rg_alu_outputs[103:101] == 3'd4) ||
	      rg_alu_outputs[111:108] == 4'd3 ||
	      rg_alu_outputs[111:108] == 4'd4 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6 ||
	      rg_alu_outputs[111:108] == 4'd9 ||
	      rg_alu_outputs[111:108] == 4'd10) ;
  assign MUX_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ST_completion || WILL_FIRE_RL_rl_LD_completion ;
  assign MUX_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	     WILL_FIRE_RL_rl_CSRR_W_completion ;
  assign MUX_rg_state$write_1__SEL_4 =
	     imem_c_rg_instr[32] && rg_state == 5'd3 &&
	     !f_reset_reqs$EMPTY_N ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_from_RUNNING ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Mode ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_restart_external_interrupt ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] ;
  assign MUX_rg_trap_info$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 ;
  assign MUX_rg_trap_info$write_1__SEL_3 =
	     MUX_rg_state$write_1__SEL_2 && near_mem$dmem_exc_get[4] ;
  assign MUX_rg_trap_info$write_1__SEL_4 =
	     MUX_rg_state$write_1__SEL_3 && !rg_csr_permitted ;
  assign MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	     (rg_exec1_inputs[75] || rg_exec1_inputs[72]) ?
	       csr_regfile$read_csr[31:0] | rg_alu_outputs[63:32] :
	       csr_regfile$read_csr[31:0] & y__h150277 ;
  assign MUX_imem_c_rg_instr$write_1__VAL_2 =
	     { 17'd65536, imem_c_rg_cache_b16 } ;
  assign MUX_imem_c_rg_instr$write_1__VAL_3 =
	     (imem_c_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[6:5] == 2'b11) ?
	       { 1'd1, near_mem$imem_instr[36:5] } :
	       ((imem_c_rg_pc[1:0] == 2'b0 &&
		 near_mem$imem_instr[6:5] != 2'b11) ?
		  { 17'd65536, near_mem$imem_instr[20:5] } :
		  ((imem_c_rg_pc[1:0] != 2'b0 &&
		    near_mem$imem_instr[22:21] != 2'b11) ?
		     { 17'd65536, near_mem$imem_instr[36:21] } :
		     33'h0AAAAAAAA)) ;
  assign MUX_imem_c_rg_instr$write_1__VAL_4 =
	     { 1'd1, near_mem$imem_instr[20:5], imem_c_rg_cache_b16 } ;
  assign MUX_imem_c_rg_state$write_1__VAL_2 =
	     (imem_c_rg_state == 3'd0 ||
	      IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51) ?
	       3'd2 :
	       (IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 ?
		  ((imem_c_rg_cache_b16[1:0] == 2'b11) ? 3'd3 : 3'd4) :
		  3'd2) ;
  assign MUX_imem_c_rg_state$write_1__VAL_4 =
	     (imem_c_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[22:21] == 2'b11) ?
	       3'd3 :
	       ((imem_c_rg_pc[1:0] == 2'b0 &&
		 near_mem$imem_instr[6:5] == 2'b11 ||
		 imem_c_rg_pc[1:0] != 2'b0 &&
		 near_mem$imem_instr[22:21] != 2'b11) ?
		  3'd0 :
		  3'd1) ;
  always@(rg_alu_outputs or next_pc__h150034 or csr_regfile$csr_ret_actions)
  begin
    case (rg_alu_outputs[111:108])
      4'd1: MUX_imem_c_w_addr$wset_1__VAL_3 = next_pc__h150034;
      4'd2: MUX_imem_c_w_addr$wset_1__VAL_3 = rg_alu_outputs[95:64];
      4'd8: MUX_imem_c_w_addr$wset_1__VAL_3 = csr_regfile$csr_ret_actions;
      default: MUX_imem_c_w_addr$wset_1__VAL_3 = next_pc__h150034;
    endcase
  end
  assign MUX_near_mem$imem_req_1__VAL_1 =
	     { imem_c_rg_pc[31:2], 2'd0 } + 32'd4 ;
  assign MUX_near_mem$imem_req_1__VAL_2 =
	     (imem_c_rg_state == 3'd0 ||
	      IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51) ?
	       addr_of_b32__h2339 :
	       _theResult___snd_fst__h2426 ;
  always@(rg_alu_outputs or
	  IF_rg_alu_outputs_522_BITS_111_TO_108_523_EQ_3_ETC___d1613)
  begin
    case (rg_alu_outputs[111:108])
      4'd1:
	  MUX_rg_state$write_1__VAL_1 =
	      (rg_alu_outputs[103:101] == 3'd0) ? 5'd3 : 5'd10;
      4'd2, 4'd5, 4'd6, 4'd8: MUX_rg_state$write_1__VAL_1 = 5'd3;
      4'd3, 4'd4:
	  MUX_rg_state$write_1__VAL_1 =
	      IF_rg_alu_outputs_522_BITS_111_TO_108_523_EQ_3_ETC___d1613;
      4'd9: MUX_rg_state$write_1__VAL_1 = 5'd17;
      default: MUX_rg_state$write_1__VAL_1 = 5'd12;
    endcase
  end
  assign MUX_rg_state$write_1__VAL_2 =
	     near_mem$dmem_exc_get[4] ? 5'd12 : 5'd3 ;
  assign MUX_rg_state$write_1__VAL_3 = rg_csr_permitted ? 5'd3 : 5'd12 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     imem_c_rg_exc[4] ?
	       5'd12 :
	       (csr_regfile$interrupt_pending[4] ? 5'd15 : 5'd4) ;
  assign MUX_rg_state$write_1__VAL_5 =
	     (rg_exec1_inputs[108] || rg_exec1_inputs[107] ||
	      rg_exec1_inputs[106] ||
	      rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
	       5'd5 :
	       (((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
		 (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
		  (rg_exec1_inputs[151] ? 5'd5 : 5'd11) :
		  ((rg_exec1_inputs[104] || rg_exec1_inputs[105] ||
		    rg_exec1_inputs[103] ||
		    rg_exec1_inputs[102]) ?
		     5'd5 :
		     (rg_exec1_inputs[101] ?
			5'd6 :
			(rg_exec1_inputs[100] ? 5'd7 : 5'd5)))) ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { rg_pc, imem_c_rg_exc[3:0], rg_pc } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { rg_pc, rg_alu_outputs[107:104], x__h144839 } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { rg_pc, near_mem$dmem_exc_get[3:0], rg_alu_outputs[95:64] } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { rg_pc, 4'd2, rg_exec1_inputs[157:126] } ;

  // inlined wires
  assign imem_c_w_addr$whas =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ||
	     WILL_FIRE_RL_rl_restart_external_interrupt ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_c_rg_cache_b16
  assign imem_c_rg_cache_b16$D_IN = near_mem$imem_instr[36:21] ;
  assign imem_c_rg_cache_b16$EN =
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ;

  // register imem_c_rg_exc
  assign imem_c_rg_exc$D_IN =
	     (WILL_FIRE_RL_rl_reset_start ||
	      WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP) ?
	       5'd10 :
	       near_mem$imem_instr[4:0] ;
  assign imem_c_rg_exc$EN =
	     WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ;

  // register imem_c_rg_instr
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP or
	  MUX_imem_c_rg_instr$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_c_rl_NEW_RSP or
	  MUX_imem_c_rg_instr$write_1__VAL_3 or
	  WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP or
	  MUX_imem_c_rg_instr$write_1__VAL_4 or WILL_FIRE_RL_rl_run)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: imem_c_rg_instr$D_IN = 33'h0AAAAAAAA;
    WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP:
	imem_c_rg_instr$D_IN = MUX_imem_c_rg_instr$write_1__VAL_2;
    WILL_FIRE_RL_imem_c_rl_NEW_RSP:
	imem_c_rg_instr$D_IN = MUX_imem_c_rg_instr$write_1__VAL_3;
    WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP:
	imem_c_rg_instr$D_IN = MUX_imem_c_rg_instr$write_1__VAL_4;
    WILL_FIRE_RL_rl_run: imem_c_rg_instr$D_IN = 33'h0AAAAAAAA;
    default: imem_c_rg_instr$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
  endcase
  assign imem_c_rg_instr$EN =
	     WILL_FIRE_RL_rl_run || WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ||
	     WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP ;

  // register imem_c_rg_pc
  assign imem_c_rg_pc$D_IN = addr__h2338 ;
  assign imem_c_rg_pc$EN = CAN_FIRE_RL_imem_c_rl_new_req ;

  // register imem_c_rg_state
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_imem_c_rl_new_req or
	  MUX_imem_c_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP or
	  WILL_FIRE_RL_imem_c_rl_NEW_RSP or
	  MUX_imem_c_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: imem_c_rg_state$D_IN = 3'd0;
    WILL_FIRE_RL_imem_c_rl_new_req:
	imem_c_rg_state$D_IN = MUX_imem_c_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP: imem_c_rg_state$D_IN = 3'd0;
    WILL_FIRE_RL_imem_c_rl_NEW_RSP:
	imem_c_rg_state$D_IN = MUX_imem_c_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP: imem_c_rg_state$D_IN = 3'd1;
    default: imem_c_rg_state$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign imem_c_rg_state$EN =
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ||
	     WILL_FIRE_RL_imem_c_rl_new_req ||
	     WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ;

  // register rg_alu_outputs
  assign rg_alu_outputs$D_IN =
	     { rg_exec1_inputs[108] ?
		 ((!rg_exec1_inputs[94] && !rg_exec1_inputs[93] &&
		   !rg_exec1_inputs[92] &&
		   !rg_exec1_inputs[91] &&
		   !rg_exec1_inputs[90] &&
		   !rg_exec1_inputs[89]) ?
		    4'd10 :
		    (IF_rg_exec1_inputs_94_BIT_94_078_THEN_rg_exec1_ETC___d1106 ?
		       4'd2 :
		       4'd1)) :
		 ((rg_exec1_inputs[107] || rg_exec1_inputs[106]) ?
		    4'd2 :
		    ((rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
		       4'd1 :
		       (((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
			 (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
			  (rg_exec1_inputs[151] ? 4'd10 : 4'd1) :
			  ((rg_exec1_inputs[104] || rg_exec1_inputs[105]) ?
			     (((!rg_exec1_inputs[86] ||
				rg_exec1_inputs[105] &&
				rg_exec1_inputs[156]) &&
			       (!rg_exec1_inputs[86] ||
				!rg_exec1_inputs[105] ||
				!rg_exec1_inputs[156]) &&
			       !rg_exec1_inputs[85] &&
			       !rg_exec1_inputs[84] &&
			       !rg_exec1_inputs[83] &&
			       !rg_exec1_inputs[82] &&
			       !rg_exec1_inputs[81]) ?
				4'd10 :
				4'd1) :
			     ((rg_exec1_inputs[103] || rg_exec1_inputs[102]) ?
				4'd1 :
				((rg_exec1_inputs[101] ||
				  rg_exec1_inputs[100]) ?
				   (rg_exec1_inputs[80] ? 4'd1 : 4'd10) :
				   (rg_exec1_inputs[99] ?
				      (rg_exec1_inputs[78] ?
					 4'd6 :
					 (rg_exec1_inputs[79] ?
					    4'd5 :
					    4'd10)) :
				      (rg_exec1_inputs[98] ?
					 (rg_exec1_inputs[77] ?
					    ((rg_exec1_inputs[137:133] ==
					      5'd0 &&
					      rg_exec1_inputs[145:141] ==
					      5'd0) ?
					       ((rg_exec1_inputs[70] ||
						 rg_exec1_inputs[69]) ?
						  4'd10 :
						  (rg_exec1_inputs[65] ?
						     4'd8 :
						     (rg_exec1_inputs[64] ?
							4'd9 :
							4'd10))) :
					       4'd10) :
					    ((rg_exec1_inputs[76] ||
					      rg_exec1_inputs[73]) ?
					       4'd3 :
					       ((rg_exec1_inputs[75] ||
						 rg_exec1_inputs[72] ||
						 rg_exec1_inputs[74] ||
						 rg_exec1_inputs[71]) ?
						  4'd4 :
						  4'd10))) :
					 4'd10)))))))),
	       x1_avValue_snd_exc_code__h118360,
	       IF_rg_exec1_inputs_94_BIT_108_95_OR_rg_exec1_i_ETC___d1397 } ;
  assign rg_alu_outputs$EN = CAN_FIRE_RL_rl_exec1 ;

  // register rg_csr_permitted
  assign rg_csr_permitted$D_IN = csr_regfile$access_permitted ;
  assign rg_csr_permitted$EN =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd3 ||
	      rg_alu_outputs[111:108] == 4'd4) ;

  // register rg_exec1_inputs
  assign rg_exec1_inputs$D_IN =
	     { _theResult____h4297,
	       imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b11,
	       imem_c_rg_instr_BITS_31_TO_0__q1[15:0],
	       _theResult____h4297[6:0] == 7'b1100011,
	       _theResult____h4297[6:0] == 7'b1101111,
	       _theResult____h4297[6:0] == 7'b1100111,
	       _theResult____h4297[6:0] == 7'b0110011,
	       _theResult____h4297[6:0] == 7'b0010011,
	       _theResult____h4297[6:0] == 7'b0110111,
	       _theResult____h4297[6:0] == 7'b0010111,
	       _theResult____h4297[6:0] == 7'b0000011,
	       _theResult____h4297[6:0] == 7'b0100011,
	       _theResult____h4297[6:0] == 7'b0001111,
	       _theResult____h4297[6:0] == 7'b1110011,
	       _theResult____h4297[31:25] == 7'b0000001,
	       _theResult____h4297[31:25] == 7'b0,
	       _theResult____h4297[31:25] == 7'b0100000,
	       _theResult____h4297[14:12] == 3'b0,
	       _theResult____h4297[14:12] == 3'b001,
	       _theResult____h4297[14:12] == 3'b100,
	       _theResult____h4297[14:12] == 3'b101,
	       _theResult____h4297[14:12] == 3'b110,
	       _theResult____h4297[14:12] == 3'b111,
	       _theResult____h4297[14:12] == 3'b001,
	       _theResult____h4297[14:12] == 3'b101,
	       _theResult____h4297[14:12] == 3'b0,
	       _theResult____h4297[14:12] == 3'b010,
	       _theResult____h4297[14:12] == 3'b011,
	       _theResult____h4297[14:12] == 3'b100,
	       _theResult____h4297[14:12] == 3'b110,
	       _theResult____h4297[14:12] == 3'b111,
	       _theResult____h4297[14:12] == 3'b0 ||
	       _theResult____h4297[14:12] == 3'b100 ||
	       _theResult____h4297[14:12] == 3'b001 ||
	       _theResult____h4297[14:12] == 3'b101 ||
	       _theResult____h4297[14:12] == 3'b010,
	       _theResult____h4297[14:12] == 3'b0,
	       _theResult____h4297[14:12] == 3'b001,
	       _theResult____h4297[14:12] == 3'b0,
	       _theResult____h4297[14:12] == 3'b001,
	       _theResult____h4297[14:12] == 3'b010,
	       _theResult____h4297[14:12] == 3'b011,
	       _theResult____h4297[14:12] == 3'b101,
	       _theResult____h4297[14:12] == 3'b110,
	       _theResult____h4297[14:12] == 3'b111,
	       _theResult____h4297[31:20] == 12'b0,
	       _theResult____h4297[31:20] == 12'b000000000001,
	       _theResult____h4297[31:20] == 12'b000000000010,
	       _theResult____h4297[31:20] == 12'b000100000010,
	       _theResult____h4297[31:20] == 12'b001000000010,
	       _theResult____h4297[31:20] == 12'b001100000010,
	       _theResult____h4297[31:20] == 12'b000100000101,
	       gpr_regfile$read_rs1,
	       gpr_regfile$read_rs2 } ;
  assign rg_exec1_inputs$EN =
	     WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	     !csr_regfile$interrupt_pending[4] ;

  // register rg_pc
  always@(MUX_rg_pc$write_1__SEL_1 or
	  next_pc__h150034 or
	  MUX_rg_pc$write_1__SEL_2 or
	  MUX_imem_c_w_addr$wset_1__SEL_3 or
	  MUX_imem_c_w_addr$wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_restart_trap or
	  rg_pc or
	  MUX_rg_pc$write_1__SEL_5 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_reset_complete or
	  addr_map$m_pc_reset_value or MUX_imem_c_w_addr$wset_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_pc$write_1__SEL_1: rg_pc$D_IN = next_pc__h150034;
      MUX_rg_pc$write_1__SEL_2: rg_pc$D_IN = next_pc__h150034;
      MUX_imem_c_w_addr$wset_1__SEL_3:
	  rg_pc$D_IN = MUX_imem_c_w_addr$wset_1__VAL_3;
      WILL_FIRE_RL_rl_restart_trap: rg_pc$D_IN = rg_pc;
      MUX_rg_pc$write_1__SEL_5: rg_pc$D_IN = csr_regfile$csr_trap_actions;
      WILL_FIRE_RL_rl_reset_complete: rg_pc$D_IN = addr_map$m_pc_reset_value;
      MUX_imem_c_w_addr$wset_1__SEL_6: rg_pc$D_IN = next_pc__h150034;
      default: rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pc$EN =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_take_external_interrupt ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__VAL_1 or
	  MUX_rg_state$write_1__SEL_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  MUX_rg_state$write_1__SEL_3 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_run or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_exec1 or
	  MUX_rg_state$write_1__VAL_5 or
	  MUX_rg_state$write_1__SEL_6 or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_8 or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_take_external_interrupt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state$write_1__SEL_1:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      MUX_rg_state$write_1__SEL_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      MUX_rg_state$write_1__SEL_3:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_run: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
      WILL_FIRE_RL_rl_exec1: rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
      MUX_rg_state$write_1__SEL_6: rg_state$D_IN = 5'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 5'd1;
      MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 5'd3;
      WILL_FIRE_RL_rl_trap: rg_state$D_IN = 5'd13;
      WILL_FIRE_RL_rl_take_external_interrupt: rg_state$D_IN = 5'd16;
      default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      (rg_alu_outputs[103:101] == 3'd0 ||
	       rg_alu_outputs[103:101] == 3'd4) ||
	      rg_alu_outputs[111:108] == 4'd3 ||
	      rg_alu_outputs[111:108] == 4'd4 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6 ||
	      rg_alu_outputs[111:108] == 4'd9 ||
	      rg_alu_outputs[111:108] == 4'd10) ||
	     WILL_FIRE_RL_rl_ST_completion ||
	     WILL_FIRE_RL_rl_LD_completion ||
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	     WILL_FIRE_RL_rl_CSRR_W_completion ||
	     WILL_FIRE_RL_rl_run ||
	     WILL_FIRE_RL_rl_exec1 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_from_RUNNING ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Mode ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_restart_external_interrupt ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_take_external_interrupt ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  MUX_rg_trap_info$write_1__SEL_2 or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  MUX_rg_trap_info$write_1__SEL_3 or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  MUX_rg_trap_info$write_1__SEL_4 or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      MUX_rg_trap_info$write_1__SEL_2:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      MUX_rg_trap_info$write_1__SEL_3:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      MUX_rg_trap_info$write_1__SEL_4:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] ||
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     near_mem$dmem_exc_get[4] ||
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     !rg_csr_permitted ;

  // submodule addr_map
  assign addr_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign addr_map$m_is_itcm_addr_addr = 32'h0 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_csr_addr = rg_exec1_inputs[157:146] ;
  assign csr_regfile$access_permitted_read_not_write =
	     rg_alu_outputs[111:108] == 4'd4 &&
	     rg_alu_outputs[63:32] == 32'd0 ;
  assign csr_regfile$csr_trap_actions_exc_code =
	     WILL_FIRE_RL_rl_take_external_interrupt ?
	       csr_regfile$interrupt_pending[3:0] :
	       rg_trap_info[35:32] ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     WILL_FIRE_RL_rl_take_external_interrupt ;
  assign csr_regfile$csr_trap_actions_pc =
	     WILL_FIRE_RL_rl_take_external_interrupt ?
	       rg_pc :
	       rg_trap_info[67:36] ;
  assign csr_regfile$csr_trap_actions_xtval =
	     WILL_FIRE_RL_rl_take_external_interrupt ?
	       32'd0 :
	       rg_trap_info[31:0] ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr = rg_exec1_inputs[157:146] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rg_alu_outputs[63:32] :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$read_csr_csr_addr = rg_exec1_inputs[157:146] ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted ||
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	     rg_exec1_inputs[145:141] != 5'd0 ;
  assign csr_regfile$EN_csr_trap_actions = MUX_rg_pc$write_1__SEL_5 ;
  assign csr_regfile$EN_csr_ret_actions =
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 ;
  assign csr_regfile$EN_csr_minstret_incr =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_hart_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__0_AN_ETC___d86 &&
	     rg_state == 5'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = 1'd1 ;
  assign f_reset_rsps$ENQ =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     gpr_regfile$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__7_A_ETC___d103 &&
	     rg_state == 5'd1 ;
  assign f_reset_rsps$DEQ = EN_hart_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_rs1 = _theResult____h4297[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h4297[24:20] ;
  assign gpr_regfile$write_rd_rd = rg_alu_outputs[100:96] ;
  always@(MUX_gpr_regfile$write_rd_1__SEL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  csr_regfile$read_csr or
	  MUX_gpr_regfile$write_rd_1__SEL_4 or
	  rg_alu_outputs or
	  WILL_FIRE_RL_rl_M_completion or
	  mbox$word or
	  WILL_FIRE_RL_rl_SH_completion or
	  sbox$word or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or near_mem$dmem_word32_get)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_gpr_regfile$write_rd_1__SEL_1 ||
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  gpr_regfile$write_rd_rd_val = csr_regfile$read_csr[31:0];
      MUX_gpr_regfile$write_rd_1__SEL_4:
	  gpr_regfile$write_rd_rd_val = rg_alu_outputs[63:32];
      WILL_FIRE_RL_rl_M_completion: gpr_regfile$write_rd_rd_val = mbox$word;
      WILL_FIRE_RL_rl_SH_completion: gpr_regfile$write_rd_rd_val = sbox$word;
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd_val = near_mem$dmem_word32_get;
      default: gpr_regfile$write_rd_rd_val =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted ||
	     WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted ||
	     WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0) ||
	     WILL_FIRE_RL_rl_M_completion ||
	     WILL_FIRE_RL_rl_SH_completion ;

  // submodule mbox
  assign mbox$req_f3 = rg_exec1_inputs[140:138] ;
  assign mbox$req_is_OP_not_OP_32 = !rg_exec1_inputs[129] ;
  assign mbox$req_v1 = rg_alu_outputs[63:32] ;
  assign mbox$req_v2 = rg_alu_outputs[31:0] ;
  assign mbox$EN_req_reset = 1'b0 ;
  assign mbox$EN_rsp_reset = 1'b0 ;
  assign mbox$EN_req =
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	     rg_alu_outputs[103:101] == 3'd4 ;

  // submodule near_mem
  assign near_mem$dmem_master_HRDATA = dmem_master_HRDATA ;
  assign near_mem$dmem_master_HREADY = dmem_master_HREADY ;
  assign near_mem$dmem_master_HRESP = dmem_master_HRESP ;
  assign near_mem$dmem_req_addr =
	     rg_exec1_inputs[101] ? addr__h117611 : addr__h117727 ;
  assign near_mem$dmem_req_f3 = rg_exec1_inputs[140:138] ;
  assign near_mem$dmem_req_op = !rg_exec1_inputs[101] ;
  assign near_mem$dmem_req_store_value = rg_exec1_inputs[31:0] ;
  assign near_mem$imem_req_addr =
	     MUX_near_mem$imem_req_1__SEL_1 ?
	       MUX_near_mem$imem_req_1__VAL_1 :
	       MUX_near_mem$imem_req_1__VAL_2 ;
  assign near_mem$set_watch_tohost_tohost_addr =
	     set_watch_tohost_tohost_addr ;
  assign near_mem$set_watch_tohost_watch_tohost =
	     set_watch_tohost_watch_tohost ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP && imem_c_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[22:21] == 2'b11 ||
	     WILL_FIRE_RL_imem_c_rl_new_req &&
	     imem_c_rg_state_EQ_0_7_OR_IF_imem_c_w_addr_wha_ETC___d69 ;
  assign near_mem$EN_imem_instr =
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_exec1 && !rg_exec1_inputs[108] &&
	     !rg_exec1_inputs[107] &&
	     !rg_exec1_inputs[106] &&
	     !rg_exec1_inputs[104] &&
	     !rg_exec1_inputs[105] &&
	     !rg_exec1_inputs[103] &&
	     !rg_exec1_inputs[102] &&
	     (rg_exec1_inputs[101] || rg_exec1_inputs[100]) ;
  assign near_mem$EN_dmem_word32_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_dmem_exc_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_set_watch_tohost = EN_set_watch_tohost ;

  // submodule sbox
  assign sbox$req_right = !rg_exec1_inputs[88] ;
  assign sbox$req_v1 = rg_exec1_inputs[63:32] ;
  assign sbox$req_v2 = alu_outputs___1_val2__h117389 ;
  assign sbox$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign sbox$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_complete ;
  assign sbox$EN_req =
	     WILL_FIRE_RL_rl_exec1 && !rg_exec1_inputs[108] &&
	     !rg_exec1_inputs[107] &&
	     !rg_exec1_inputs[106] &&
	     (!rg_exec1_inputs[105] || !rg_exec1_inputs[97]) &&
	     (rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
	     (rg_exec1_inputs[88] || rg_exec1_inputs[87]) &&
	     !rg_exec1_inputs[151] ;

  // remaining internal signals
  assign IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51 =
	     addr__h2338 == imem_c_rg_pc ;
  assign IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 =
	     addr__h2338[31:2] == imem_c_rg_pc[31:2] ;
  assign IF_rg_alu_outputs_522_BITS_111_TO_108_523_EQ_3_ETC___d1613 =
	     (rg_alu_outputs[111:108] == 4'd3) ? 5'd8 : 5'd9 ;
  assign IF_rg_exec1_inputs_94_BIT_108_95_OR_rg_exec1_i_ETC___d1397 =
	     { (rg_exec1_inputs[108] || rg_exec1_inputs[107] ||
		rg_exec1_inputs[106]) ?
		 3'd0 :
		 ((rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
		    3'd4 :
		    (((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
		      (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
		       3'd3 :
		       ((rg_exec1_inputs[104] || rg_exec1_inputs[105] ||
			 rg_exec1_inputs[103] ||
			 rg_exec1_inputs[102]) ?
			  3'd0 :
			  (rg_exec1_inputs[101] ?
			     3'd1 :
			     (rg_exec1_inputs[100] ? 3'd2 : 3'd0))))),
	       x1_avValue_snd_rd__h118362,
	       x__h119191,
	       x1_avValue_snd_val1__h118357,
	       x1_avValue_snd_val2__h118344 } ;
  assign IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639 =
	     rg_exec1_inputs[125] ?
	       rg_exec1_inputs[157:126] :
	       { 16'd0, rg_exec1_inputs[124:109] } ;
  assign IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_pc_2_ETC___d1218 =
	     rg_exec1_inputs[125] ? next_pc__h119289 : next_pc___1__h119292 ;
  assign IF_rg_exec1_inputs_94_BIT_91_084_THEN_NOT_rg_e_ETC___d1103 =
	     rg_exec1_inputs[91] ?
	       !rg_exec1_inputs_94_BITS_63_TO_32_036_SLT_rg_ex_ETC___d1097 :
	       (rg_exec1_inputs[90] ?
		  rg_exec1_inputs_94_BITS_63_TO_32_036_ULT_rg_ex_ETC___d1099 :
		  rg_exec1_inputs[89] &&
		  !rg_exec1_inputs_94_BITS_63_TO_32_036_ULT_rg_ex_ETC___d1099) ;
  assign IF_rg_exec1_inputs_94_BIT_93_080_THEN_NOT_rg_e_ETC___d1105 =
	     rg_exec1_inputs[93] ?
	       !rg_exec1_inputs_94_BITS_63_TO_32_036_EQ_rg_exe_ETC___d1095 :
	       (rg_exec1_inputs[92] ?
		  rg_exec1_inputs_94_BITS_63_TO_32_036_SLT_rg_ex_ETC___d1097 :
		  IF_rg_exec1_inputs_94_BIT_91_084_THEN_NOT_rg_e_ETC___d1103) ;
  assign IF_rg_exec1_inputs_94_BIT_94_078_THEN_rg_exec1_ETC___d1106 =
	     rg_exec1_inputs[94] ?
	       rg_exec1_inputs_94_BITS_63_TO_32_036_EQ_rg_exe_ETC___d1095 :
	       IF_rg_exec1_inputs_94_BIT_93_080_THEN_NOT_rg_e_ETC___d1105 ;
  assign NOT_cfg_verbosity_read__1_ULE_1_29___d130 = cfg_verbosity > 2'd1 ;
  assign SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276 =
	     { {9{offset__h21997[11]}}, offset__h21997 } ;
  assign SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383 =
	     { {4{offset__h35909[8]}}, offset__h35909 } ;
  assign SEXT_rg_exec1_inputs_94_BITS_157_TO_146_057___d1058 =
	     { {20{rg_exec1_inputs_BITS_157_TO_146__q3[11]}},
	       rg_exec1_inputs_BITS_157_TO_146__q3 } ;
  assign _theResult____h151047 =
	     (delta_CPI_instrs__h151046 == 64'd0) ?
	       delta_CPI_instrs___1__h151091 :
	       delta_CPI_instrs__h151046 ;
  assign _theResult____h4297 =
	     (imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b11) ?
	       imem_c_rg_instr[31:0] :
	       instr__h4479 ;
  assign _theResult___snd__h119992 =
	     rg_exec1_inputs[104] ?
	       SEXT_rg_exec1_inputs_94_BITS_157_TO_146_057___d1058 :
	       rg_exec1_inputs[31:0] ;
  assign _theResult___snd_fst__h2426 =
	     IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 ?
	       _theResult___snd_fst__h2432 :
	       addr_of_b32__h2339 ;
  assign _theResult___snd_fst__h2432 =
	     (imem_c_rg_cache_b16[1:0] == 2'b11) ?
	       addr_of_b32___1__h2468 :
	       addr_of_b32__h2339 ;
  assign a__h100852 =
	     { 7'b0,
	       rd__h15074,
	       rs1__h15073,
	       3'b0,
	       rs1__h15073,
	       7'b0111011 } ;
  assign a__h104257 =
	     { 7'b0100000,
	       rd__h15074,
	       rs1__h15073,
	       3'b0,
	       rs1__h15073,
	       7'b0111011 } ;
  assign a__h107640 =
	     { 12'b000000000001,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b1110011 } ;
  assign a__h11617 =
	     { 4'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[8:7],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h11763,
	       7'b0100011 } ;
  assign a__h119977 = rg_exec1_inputs[63:32] + _theResult___snd__h119992 ;
  assign a__h123406 = rg_exec1_inputs[63:32] - _theResult___snd__h119992 ;
  assign a__h126658 =
	     ((rg_exec1_inputs[63:32] ^ 32'h80000000) <
	      (_theResult___snd__h119992 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign a__h129901 =
	     (rg_exec1_inputs[63:32] < _theResult___snd__h119992) ?
	       32'd1 :
	       32'd0 ;
  assign a__h133166 = rg_exec1_inputs[63:32] ^ _theResult___snd__h119992 ;
  assign a__h136407 = rg_exec1_inputs[63:32] | _theResult___snd__h119992 ;
  assign a__h139656 = rg_exec1_inputs[63:32] & _theResult___snd__h119992 ;
  assign a__h15053 =
	     { imm12__h15072, rs1__h15073, 3'b010, rd__h15074, 7'b0000011 } ;
  assign a__h18487 =
	     { 5'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       rd__h15074,
	       rs1__h15073,
	       3'b010,
	       offset_BITS_4_TO_0___h18683,
	       7'b0100011 } ;
  assign a__h21984 =
	     { SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[20],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[10:1],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[11],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[19:12],
	       12'd111 } ;
  assign a__h25556 =
	     { SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[20],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[10:1],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[11],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d276[19:12],
	       12'd239 } ;
  assign a__h29150 =
	     { 12'd0, imem_c_rg_instr_BITS_31_TO_0__q1[11:7], 15'd103 } ;
  assign a__h32505 =
	     { 12'd0, imem_c_rg_instr_BITS_31_TO_0__q1[11:7], 15'd231 } ;
  assign a__h35893 =
	     { SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[12],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[10:5],
	       5'd0,
	       rs1__h15073,
	       3'b0,
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[4:1],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[11],
	       7'b1100011 } ;
  assign a__h39449 =
	     { SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[12],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[10:5],
	       5'd0,
	       rs1__h15073,
	       3'b001,
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[4:1],
	       SEXT_IF_imem_c_rg_instr_13_BIT_32_14_THEN_imem_ETC___d383[11],
	       7'b1100011 } ;
  assign a__h43016 =
	     { imm12__h43033,
	       8'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h46383 =
	     { imm20__h46400,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0110111 } ;
  assign a__h49788 =
	     { imm12__h43033,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h56537 =
	     { imm12__h43033,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0011011 } ;
  assign a__h59920 =
	     { imm12__h59938,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h63420 = { imm12__h63436, 8'd16, rd__h15074, 7'b0010011 } ;
  assign a__h6377 =
	     { imm12__h6397,
	       8'd18,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0000011 } ;
  assign a__h66852 =
	     { imm12__h66871,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b001,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h70261 =
	     { imm12__h66871, rs1__h15073, 3'b101, rs1__h15073, 7'b0010011 } ;
  assign a__h73702 =
	     { imm12__h73723, rs1__h15073, 3'b101, rs1__h15073, 7'b0010011 } ;
  assign a__h77165 =
	     { imm12__h43033, rs1__h15073, 3'b111, rs1__h15073, 7'b0010011 } ;
  assign a__h80581 =
	     { 7'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2],
	       8'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0110011 } ;
  assign a__h83950 =
	     { 7'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0110011 } ;
  assign a__h87308 =
	     { 7'b0,
	       rd__h15074,
	       rs1__h15073,
	       3'b111,
	       rs1__h15073,
	       7'b0110011 } ;
  assign a__h90716 =
	     { 7'b0,
	       rd__h15074,
	       rs1__h15073,
	       3'b110,
	       rs1__h15073,
	       7'b0110011 } ;
  assign a__h94091 =
	     { 7'b0,
	       rd__h15074,
	       rs1__h15073,
	       3'b100,
	       rs1__h15073,
	       7'b0110011 } ;
  assign a__h97477 =
	     { 7'b0100000,
	       rd__h15074,
	       rs1__h15073,
	       3'b0,
	       rs1__h15073,
	       7'b0110011 } ;
  assign addr__h117611 =
	     rg_exec1_inputs[63:32] +
	     SEXT_rg_exec1_inputs_94_BITS_157_TO_146_057___d1058 ;
  assign addr__h117727 = x1_avValue_snd_addr__h118300 ;
  assign addr_of_b32___1__h2468 = addr_of_b32__h2339 + 32'd4 ;
  assign addr_of_b32__h2339 = { addr__h2338[31:2], 2'd0 } ;
  assign alu_outputs___1_addr__h118049 =
	     rg_pc +
	     { {11{rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2[20]}},
	       rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2 } ;
  assign alu_outputs___1_addr__h118069 = { addr__h117611[31:1], 1'd0 } ;
  assign alu_outputs___1_exc_code__h118287 =
	     rg_exec1_inputs[77] ?
	       ((rg_exec1_inputs[137:133] == 5'd0 &&
		 rg_exec1_inputs[145:141] == 5'd0) ?
		  (rg_exec1_inputs[70] ?
		     4'd11 :
		     (rg_exec1_inputs[69] ? 4'd3 : 4'd2)) :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val2__h117389 =
	     val2__h117379 | { 24'd0, rg_exec1_inputs[156], 7'b0 } ;
  assign b__h100853 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d855 &&
		 (csr_regfile$read_misa[27:26] == 2'd2 ||
		  csr_regfile$read_misa[27:26] == 2'd3)}} ;
  assign b__h104258 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d877 &&
		 (csr_regfile$read_misa[27:26] == 2'd2 ||
		  csr_regfile$read_misa[27:26] == 2'd3)}} ;
  assign b__h107641 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d898 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] == 5'd0}} ;
  assign b__h11618 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b110}} ;
  assign b__h119978 =
	     {32{rg_exec1_inputs[86] &&
		 (!rg_exec1_inputs[105] || !rg_exec1_inputs[156])}} ;
  assign b__h123407 =
	     {32{rg_exec1_inputs[86] && rg_exec1_inputs[105] &&
		 rg_exec1_inputs[156]}} ;
  assign b__h126659 = {32{rg_exec1_inputs[85]}} ;
  assign b__h129902 = {32{rg_exec1_inputs[84]}} ;
  assign b__h133167 = {32{rg_exec1_inputs[83]}} ;
  assign b__h136408 = {32{rg_exec1_inputs[82]}} ;
  assign b__h139657 = {32{rg_exec1_inputs[81]}} ;
  assign b__h15054 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b0 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b010}} ;
  assign b__h18488 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b0 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b110}} ;
  assign b__h21985 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b101}} ;
  assign b__h25557 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d310}} ;
  assign b__h29151 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d333 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] == 5'd0}} ;
  assign b__h32506 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d356 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] == 5'd0}} ;
  assign b__h35894 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b110}} ;
  assign b__h39450 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b111}} ;
  assign b__h43017 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d437}} ;
  assign b__h46384 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d459 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd2 &&
		 imm6__h43031 != 6'd0}} ;
  assign b__h49789 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d489 &&
		 imm6__h43031 != 6'd0}} ;
  assign b__h53159 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d508 &&
		 imm6__h43031 == 6'd0}} ;
  assign b__h56538 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d530 &&
		 (csr_regfile$read_misa[27:26] == 2'd2 ||
		  csr_regfile$read_misa[27:26] == 2'd3)}} ;
  assign b__h59921 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d557 &&
		 nzimm10__h59936 != 10'd0}} ;
  assign b__h63421 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d592}} ;
  assign b__h6378 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d163}} ;
  assign b__h66853 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d616 &&
		 imm6__h43031 != 6'd0 &&
		 (csr_regfile$read_misa[27:26] != 2'd1 ||
		  !imem_c_rg_instr_BITS_31_TO_0__q1[12])}} ;
  assign b__h70262 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d646 &&
		 imm6__h43031 != 6'd0 &&
		 (csr_regfile$read_misa[27:26] != 2'd1 ||
		  !imem_c_rg_instr_BITS_31_TO_0__q1[12])}} ;
  assign b__h73703 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d671 &&
		 imm6__h43031 != 6'd0 &&
		 (csr_regfile$read_misa[27:26] != 2'd1 ||
		  !imem_c_rg_instr_BITS_31_TO_0__q1[12])}} ;
  assign b__h77166 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d696}} ;
  assign b__h80582 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d333 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] != 5'd0}} ;
  assign b__h83951 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d356 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] != 5'd0}} ;
  assign b__h87309 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d765}} ;
  assign b__h90717 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d789}} ;
  assign b__h94092 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d810}} ;
  assign b__h97478 =
	     {32{csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d832}} ;
  assign branch_target__h118017 =
	     rg_pc + { {19{imm13_SB__h118015[12]}}, imm13_SB__h118015 } ;
  assign cpi__h151049 = x__h151048 / 64'd10 ;
  assign cpifrac__h151050 = x__h151048 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_request_put__0_AN_ETC___d86 =
	     csr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     sbox$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N ;
  assign csr_regfile_RDY_server_reset_response_get__7_A_ETC___d103 =
	     csr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     sbox$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N ;
  assign csr_regfile_read_csr_mcycle__11_MINUS_rg_start_ETC___d1828 =
	     delta_CPI_cycles__h151045 * 64'd10 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d163 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b010 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d310 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b001 &&
	     csr_regfile$read_misa[27:26] == 2'd1 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d333 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:12] == 4'b1000 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d356 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:12] == 4'b1001 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d437 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b010 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d459 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d489 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d508 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] == 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d530 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b001 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d557 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] == 5'd2 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d592 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     nzimm10__h63434 != 10'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d616 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d646 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b100 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:10] == 2'b0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d671 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b100 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:10] == 2'b01 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d696 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b100 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:10] == 2'b10 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d765 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b11 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d789 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b10 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d810 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b01 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d832 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d855 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100111 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b01 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d877 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100111 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b0 ;
  assign csr_regfile_read_misa__54_BIT_2_55_AND_IF_imem_ETC___d898 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:12] == 4'b1001 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] == 5'd0 ;
  assign delta_CPI_cycles__h151045 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h151091 = delta_CPI_instrs__h151046 + 64'd1 ;
  assign delta_CPI_instrs__h151046 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign exc__h147781 =
	     near_mem$dmem_exc_get[4] ? near_mem$dmem_exc_get[3:0] : 4'hA ;
  assign imem_c_rg_instr_BITS_31_TO_0__q1 = imem_c_rg_instr[31:0] ;
  assign imem_c_rg_state_EQ_0_7_OR_IF_imem_c_w_addr_wha_ETC___d69 =
	     imem_c_rg_state == 3'd0 ||
	     IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51 ||
	     !IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 ||
	     imem_c_rg_cache_b16[1:0] == 2'b11 ;
  assign imm12__h117734 =
	     { rg_exec1_inputs[157:151], rg_exec1_inputs[137:133] } ;
  assign imm12__h15072 = { 5'd0, offset__h15069 } ;
  assign imm12__h43033 = { {6{imm6__h43031[5]}}, imm6__h43031 } ;
  assign imm12__h59938 = { {2{nzimm10__h59936[9]}}, nzimm10__h59936 } ;
  assign imm12__h63436 = { 2'd0, nzimm10__h63434 } ;
  assign imm12__h6397 = { 4'd0, offset__h6393 } ;
  assign imm12__h66871 =
	     (csr_regfile$read_misa[27:26] == 2'd1) ?
	       { 7'b0, imem_c_rg_instr_BITS_31_TO_0__q1[6:2] } :
	       { 6'b0, imm6__h43031 } ;
  assign imm12__h73723 =
	     (csr_regfile$read_misa[27:26] == 2'd1) ?
	       { 7'b0100000, imem_c_rg_instr_BITS_31_TO_0__q1[6:2] } :
	       { 6'b010000, imm6__h43031 } ;
  assign imm13_SB__h118015 =
	     { rg_exec1_inputs[157],
	       rg_exec1_inputs[133],
	       rg_exec1_inputs[156:151],
	       rg_exec1_inputs[137:134],
	       1'b0 } ;
  assign imm20__h46400 = { {14{imm6__h43031[5]}}, imm6__h43031 } ;
  assign imm6__h43031 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2] } ;
  assign instr__h4479 = x__h6322 | y__h6323 ;
  assign next_pc___1__h119292 = rg_pc + 32'd2 ;
  assign next_pc__h118027 =
	     IF_rg_exec1_inputs_94_BIT_94_078_THEN_rg_exec1_ETC___d1106 ?
	       branch_target__h118017 :
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_pc_2_ETC___d1218 ;
  assign next_pc__h119289 = rg_pc + 32'd4 ;
  assign next_pc__h150034 = rg_pc + (rg_exec1_inputs[125] ? 32'd4 : 32'd2) ;
  assign nzimm10__h59936 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[4:3],
	       imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       4'b0 } ;
  assign nzimm10__h63434 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[10:7],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12:11],
	       imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h11763 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h18683 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[11:10],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       2'b0 } ;
  assign offset__h15069 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12:10],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       2'b0 } ;
  assign offset__h21997 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[8],
	       imem_c_rg_instr_BITS_31_TO_0__q1[10:9],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       imem_c_rg_instr_BITS_31_TO_0__q1[7],
	       imem_c_rg_instr_BITS_31_TO_0__q1[2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[11],
	       imem_c_rg_instr_BITS_31_TO_0__q1[5:3],
	       1'b0 } ;
  assign offset__h35909 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:10],
	       imem_c_rg_instr_BITS_31_TO_0__q1[4:3],
	       1'b0 } ;
  assign offset__h6393 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[3:2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:4],
	       2'b0 } ;
  assign rd__h15074 = { 2'b01, imem_c_rg_instr_BITS_31_TO_0__q1[4:2] } ;
  assign rd_val__h118089 = x__h119944 | y__h119945 ;
  assign rd_val__h118099 = { rg_exec1_inputs[157:138], 12'h0 } ;
  assign rd_val__h118108 = rg_pc + rd_val__h118099 ;
  assign rg_exec1_inputs_94_BITS_63_TO_32_036_EQ_rg_exe_ETC___d1095 =
	     rg_exec1_inputs[63:32] == rg_exec1_inputs[31:0] ;
  assign rg_exec1_inputs_94_BITS_63_TO_32_036_SLT_rg_ex_ETC___d1097 =
	     (rg_exec1_inputs[63:32] ^ 32'h80000000) <
	     (rg_exec1_inputs[31:0] ^ 32'h80000000) ;
  assign rg_exec1_inputs_94_BITS_63_TO_32_036_ULT_rg_ex_ETC___d1099 =
	     rg_exec1_inputs[63:32] < rg_exec1_inputs[31:0] ;
  assign rg_exec1_inputs_BITS_157_TO_146__q3 = rg_exec1_inputs[157:146] ;
  assign rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2 =
	     { rg_exec1_inputs[157],
	       rg_exec1_inputs[145:138],
	       rg_exec1_inputs[146],
	       rg_exec1_inputs[156:147],
	       1'b0 } ;
  assign rg_trap_info_818_BITS_67_TO_36_819_EQ_csr_regf_ETC___d1823 =
	     rg_trap_info[67:36] == csr_regfile$csr_trap_actions ;
  assign rs1__h15073 = { 2'b01, imem_c_rg_instr_BITS_31_TO_0__q1[9:7] } ;
  assign shamt__h117374 =
	     rg_exec1_inputs[104] ?
	       rg_exec1_inputs[150:146] :
	       rg_exec1_inputs[4:0] ;
  assign val2__h117379 = { 27'd0, shamt__h117374 } ;
  assign value__h150812 =
	     (rg_exec1_inputs[145:141] == 5'd0) ?
	       32'hAAAAAAAA :
	       (csr_regfile$mav_csr_write[32] ?
		  csr_regfile$mav_csr_write[31:0] :
		  32'hAAAAAAAA) ;
  assign x1_avValue_new_csr_value__h150294 =
	     (rg_exec1_inputs[145:141] == 5'd0) ?
	       32'd0 :
	       csr_regfile$mav_csr_write[64:33] ;
  assign x1_avValue_snd_addr__h118300 =
	     rg_exec1_inputs[63:32] +
	     { {20{imm12__h117734[11]}}, imm12__h117734 } ;
  assign x1_avValue_snd_addr__h118342 =
	     rg_exec1_inputs[101] ?
	       addr__h117611 :
	       x1_avValue_snd_addr__h118300 ;
  assign x1_avValue_snd_addr__h118349 =
	     rg_exec1_inputs[106] ?
	       alu_outputs___1_addr__h118069 :
	       x1_avValue_snd_addr__h118342 ;
  assign x1_avValue_snd_addr__h118356 =
	     rg_exec1_inputs[107] ?
	       alu_outputs___1_addr__h118049 :
	       x1_avValue_snd_addr__h118349 ;
  assign x1_avValue_snd_exc_code__h118339 =
	     (rg_exec1_inputs[104] || rg_exec1_inputs[105] ||
	      rg_exec1_inputs[103] ||
	      rg_exec1_inputs[102] ||
	      rg_exec1_inputs[101] ||
	      rg_exec1_inputs[100] ||
	      rg_exec1_inputs[99]) ?
	       4'd2 :
	       (rg_exec1_inputs[98] ?
		  alu_outputs___1_exc_code__h118287 :
		  4'd2) ;
  assign x1_avValue_snd_exc_code__h118353 =
	     (rg_exec1_inputs[107] || rg_exec1_inputs[106]) ?
	       4'd0 :
	       x1_avValue_snd_exc_code__h118339 ;
  assign x1_avValue_snd_exc_code__h118360 =
	     rg_exec1_inputs[108] ? 4'd2 : x1_avValue_snd_exc_code__h118353 ;
  assign x1_avValue_snd_rd__h118362 =
	     rg_exec1_inputs[108] ? 5'd0 : rg_exec1_inputs[137:133] ;
  assign x1_avValue_snd_val1__h118308 =
	     rg_exec1_inputs[140] ?
	       { 27'd0, rg_exec1_inputs[145:141] } :
	       rg_exec1_inputs[63:32] ;
  assign x1_avValue_snd_val1__h118315 =
	     rg_exec1_inputs[102] ?
	       rd_val__h118108 :
	       x1_avValue_snd_val1__h118308 ;
  assign x1_avValue_snd_val1__h118322 =
	     rg_exec1_inputs[103] ?
	       rd_val__h118099 :
	       x1_avValue_snd_val1__h118315 ;
  assign x1_avValue_snd_val1__h118329 =
	     (rg_exec1_inputs[104] || rg_exec1_inputs[105]) ?
	       rd_val__h118089 :
	       x1_avValue_snd_val1__h118322 ;
  assign x1_avValue_snd_val1__h118343 =
	     (rg_exec1_inputs[105] && rg_exec1_inputs[97] ||
	      (rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
	      (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
	       rg_exec1_inputs[63:32] :
	       x1_avValue_snd_val1__h118329 ;
  assign x1_avValue_snd_val1__h118357 =
	     (rg_exec1_inputs[107] || rg_exec1_inputs[106]) ?
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_pc_2_ETC___d1218 :
	       x1_avValue_snd_val1__h118343 ;
  assign x1_avValue_snd_val2__h118337 =
	     ((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
	      (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
	       alu_outputs___1_val2__h117389 :
	       rg_exec1_inputs[31:0] ;
  assign x1_avValue_snd_val2__h118344 =
	     (rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
	       rg_exec1_inputs[31:0] :
	       x1_avValue_snd_val2__h118337 ;
  assign x__h104246 = a__h104257 & b__h104258 ;
  assign x__h119191 =
	     rg_exec1_inputs[108] ?
	       next_pc__h118027 :
	       x1_avValue_snd_addr__h118356 ;
  assign x__h119944 = x__h119955 | y__h119956 ;
  assign x__h119955 = x__h119966 | y__h119967 ;
  assign x__h119966 = a__h119977 & b__h119978 ;
  assign x__h126647 = a__h126658 & b__h126659 ;
  assign x__h133144 = x__h133155 | y__h133156 ;
  assign x__h133155 = a__h133166 & b__h133167 ;
  assign x__h15042 = a__h15053 & b__h15054 ;
  assign x__h151048 =
	     csr_regfile_read_csr_mcycle__11_MINUS_rg_start_ETC___d1828[63:0] /
	     _theResult____h151047 ;
  assign x__h21962 = x__h21973 | y__h21974 ;
  assign x__h21973 = a__h21984 & b__h21985 ;
  assign x__h29139 = a__h29150 & b__h29151 ;
  assign x__h35860 = x__h35871 | y__h35872 ;
  assign x__h35871 = x__h35882 | y__h35883 ;
  assign x__h35882 = a__h35893 & b__h35894 ;
  assign x__h43005 = a__h43016 & b__h43017 ;
  assign x__h49766 = x__h49777 | y__h49778 ;
  assign x__h49777 = a__h49788 & b__h49789 ;
  assign x__h56526 = a__h56537 & b__h56538 ;
  assign x__h6322 = x__h6333 | y__h6334 ;
  assign x__h6333 = x__h6344 | y__h6345 ;
  assign x__h63376 = x__h63387 | y__h63388 ;
  assign x__h63387 = x__h63398 | y__h63399 ;
  assign x__h63398 = x__h63409 | y__h63410 ;
  assign x__h63409 = a__h63420 & b__h63421 ;
  assign x__h6344 = x__h6355 | y__h6356 ;
  assign x__h6355 = x__h6366 | y__h6367 ;
  assign x__h6366 = a__h6377 & b__h6378 ;
  assign x__h70250 = a__h70261 & b__h70262 ;
  assign x__h77143 = x__h77154 | y__h77155 ;
  assign x__h77154 = a__h77165 & b__h77166 ;
  assign x__h83939 = a__h83950 & b__h83951 ;
  assign x__h90683 = x__h90694 | y__h90695 ;
  assign x__h90694 = x__h90705 | y__h90706 ;
  assign x__h90705 = a__h90716 & b__h90717 ;
  assign x__h97466 = a__h97477 & b__h97478 ;
  assign y__h104247 = a__h107640 & b__h107641 ;
  assign y__h119945 = x__h133144 | y__h133145 ;
  assign y__h119956 = x__h126647 | y__h126648 ;
  assign y__h119967 = a__h123406 & b__h123407 ;
  assign y__h126648 = a__h129901 & b__h129902 ;
  assign y__h133145 = a__h139656 & b__h139657 ;
  assign y__h133156 = a__h136407 & b__h136408 ;
  assign y__h150277 = ~rg_alu_outputs[63:32] ;
  assign y__h15043 = a__h18487 & b__h18488 ;
  assign y__h21963 = x__h29139 | y__h29140 ;
  assign y__h21974 = a__h25556 & b__h25557 ;
  assign y__h29140 = a__h32505 & b__h32506 ;
  assign y__h35861 = x__h49766 | y__h49767 ;
  assign y__h35872 = x__h43005 | y__h43006 ;
  assign y__h35883 = a__h39449 & b__h39450 ;
  assign y__h43006 = a__h46383 & b__h46384 ;
  assign y__h49767 = x__h56526 | y__h56527 ;
  assign y__h49778 = a__h49788 & b__h53159 ;
  assign y__h56527 = a__h59920 & b__h59921 ;
  assign y__h6323 = x__h63376 | y__h63377 ;
  assign y__h6334 = x__h35860 | y__h35861 ;
  assign y__h63377 = x__h90683 | y__h90684 ;
  assign y__h63388 = x__h77143 | y__h77144 ;
  assign y__h63399 = x__h70250 | y__h70251 ;
  assign y__h63410 = a__h66852 & b__h66853 ;
  assign y__h6345 = x__h21962 | y__h21963 ;
  assign y__h6356 = x__h15042 | y__h15043 ;
  assign y__h6367 = a__h11617 & b__h11618 ;
  assign y__h70251 = a__h73702 & b__h73703 ;
  assign y__h77144 = x__h83939 | y__h83940 ;
  assign y__h77155 = a__h80581 & b__h80582 ;
  assign y__h83940 = a__h87308 & b__h87309 ;
  assign y__h90684 = x__h104246 | y__h104247 ;
  assign y__h90695 = x__h97466 | y__h97467 ;
  assign y__h90706 = a__h94091 & b__h94092 ;
  assign y__h97467 = a__h100852 & b__h100853 ;
  always@(rg_alu_outputs or rg_exec1_inputs or rg_pc)
  begin
    case (rg_alu_outputs[107:104])
      4'd0: x__h144839 = rg_alu_outputs[95:64];
      4'd2: x__h144839 = rg_exec1_inputs[157:126];
      4'd3: x__h144839 = rg_pc;
      default: x__h144839 = 32'd0;
    endcase
  end
  always@(rg_alu_outputs or imem_c_rg_state)
  begin
    case (rg_alu_outputs[111:108])
      4'd1:
	  CASE_rg_alu_outputs_BITS_111_TO_108_1_NOT_rg_a_ETC__q4 =
	      rg_alu_outputs[103:101] != 3'd0 || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1;
      4'd2:
	  CASE_rg_alu_outputs_BITS_111_TO_108_1_NOT_rg_a_ETC__q4 =
	      imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1;
      default: CASE_rg_alu_outputs_BITS_111_TO_108_1_NOT_rg_a_ETC__q4 =
		   (rg_alu_outputs[111:108] == 4'd8) ?
		     imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1 :
		     rg_alu_outputs[111:108] != 4'd5 &&
		     rg_alu_outputs[111:108] != 4'd6 ||
		     imem_c_rg_state == 3'd0 ||
		     imem_c_rg_state == 3'd1;
    endcase
  end
  always@(MUX_imem_c_w_addr$wset_1__SEL_1 or
	  next_pc__h150034 or
	  MUX_imem_c_w_addr$wset_1__SEL_2 or
	  MUX_imem_c_w_addr$wset_1__SEL_3 or
	  MUX_imem_c_w_addr$wset_1__VAL_3 or
	  MUX_imem_c_w_addr$wset_1__SEL_4 or
	  rg_pc or
	  WILL_FIRE_RL_rl_reset_complete or
	  addr_map$m_pc_reset_value or MUX_imem_c_w_addr$wset_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_w_addr$wset_1__SEL_1: addr__h2338 = next_pc__h150034;
      MUX_imem_c_w_addr$wset_1__SEL_2: addr__h2338 = next_pc__h150034;
      MUX_imem_c_w_addr$wset_1__SEL_3:
	  addr__h2338 = MUX_imem_c_w_addr$wset_1__VAL_3;
      MUX_imem_c_w_addr$wset_1__SEL_4: addr__h2338 = rg_pc;
      WILL_FIRE_RL_rl_reset_complete: addr__h2338 = addr_map$m_pc_reset_value;
      MUX_imem_c_w_addr$wset_1__SEL_6: addr__h2338 = next_pc__h150034;
      default: addr__h2338 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 2'd0;
	imem_c_rg_exc <= `BSV_ASSIGNMENT_DELAY 5'd10;
	imem_c_rg_instr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	imem_c_rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_csr_permitted <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_c_rg_exc$EN)
	  imem_c_rg_exc <= `BSV_ASSIGNMENT_DELAY imem_c_rg_exc$D_IN;
	if (imem_c_rg_instr$EN)
	  imem_c_rg_instr <= `BSV_ASSIGNMENT_DELAY imem_c_rg_instr$D_IN;
	if (imem_c_rg_state$EN)
	  imem_c_rg_state <= `BSV_ASSIGNMENT_DELAY imem_c_rg_state$D_IN;
	if (rg_csr_permitted$EN)
	  rg_csr_permitted <= `BSV_ASSIGNMENT_DELAY rg_csr_permitted$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (imem_c_rg_cache_b16$EN)
      imem_c_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_c_rg_cache_b16$D_IN;
    if (imem_c_rg_pc$EN)
      imem_c_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_c_rg_pc$D_IN;
    if (rg_alu_outputs$EN)
      rg_alu_outputs <= `BSV_ASSIGNMENT_DELAY rg_alu_outputs$D_IN;
    if (rg_exec1_inputs$EN)
      rg_exec1_inputs <= `BSV_ASSIGNMENT_DELAY rg_exec1_inputs$D_IN;
    if (rg_pc$EN) rg_pc <= `BSV_ASSIGNMENT_DELAY rg_pc$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 2'h2;
    imem_c_rg_cache_b16 = 16'hAAAA;
    imem_c_rg_exc = 5'h0A;
    imem_c_rg_instr = 33'h0AAAAAAAA;
    imem_c_rg_pc = 32'hAAAAAAAA;
    imem_c_rg_state = 3'h2;
    rg_alu_outputs = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_csr_permitted = 1'h0;
    rg_exec1_inputs = 158'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_pc = 32'hAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_trap_info = 68'hAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cfg_verbosity != 2'd0)
	begin
	  v__h3782 = $stime;
	  #0;
	end
    v__h3776 = v__h3782 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cfg_verbosity != 2'd0)
	$display("%06d:[D]:%m.rl_reset_complete", v__h3776);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cfg_verbosity != 2'd0)
	$display("    fa_restart: RUNNING with PC = 0x%0h",
		 addr_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    %s: ", "   IMem: Trap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Pipe_Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", imem_c_rg_exc[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	begin
	  v__h116899 = $stime;
	  #0;
	end
    v__h116893 = v__h116899 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	$display("%06d:[D]:%m.rl_run: Interrupt pending", v__h116893);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  !csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	begin
	  v__h116988 = $stime;
	  #0;
	end
    v__h116982 = v__h116988 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  !csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	$write("%06d:[D]:%m.rl_run: ", v__h116982);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  !csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  !csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	$write(" (pc: 0x%08x) (instr: 0x%08x) (rs1: %0d, 0x%08x) (rs2: %0d, 0x%08x) (rd: %0d)",
	       rg_pc,
	       _theResult____h4297,
	       _theResult____h4297[19:15],
	       gpr_regfile$read_rs1,
	       _theResult____h4297[24:20],
	       gpr_regfile$read_rs2,
	       _theResult____h4297[11:7],
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	  !csr_regfile$interrupt_pending[4] &&
	  cfg_verbosity == 2'd3)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h143062 = $stime;
	  #0;
	end
    v__h143056 = v__h143062 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("%06d:[D]:%m.rl_exec1: ", v__h143056);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("CPU_EXEC1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("ALU_Inputs { ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "instr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_exec1_inputs[157:126]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_i32_not_i16: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[125])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[125])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "ucontrol: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Decoded_uControl { ", "opcode: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Decoded_Opcode { ", "is_op_BRANCH: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[108])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[108])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_JAL: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[107])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[107])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_JALR: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[106])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[106])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_OP: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[105])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[105])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_OP_IMM: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[104])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[104])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_LUI: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[103])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[103])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_AUIPC: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[102])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[102])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_LOAD: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[101])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[101])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_STORE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[100])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[100])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_MISC_MEM: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[99])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[99])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_op_SYSTEM: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[98])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[98])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "f7: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Decoded_Funct7 { ", "is_f7_MUL_DIV_REM: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[97])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[97])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f7_ADD: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[96])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[96])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f7_SUB: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[95])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[95])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "f3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Decoded_Funct3 { ", "is_f3_BEQ: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[94])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[94])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_BNE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[93])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[93])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_BLT: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[92])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[92])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_BGE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[91])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[91])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_BLTU: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[90])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[90])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_BGEU: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[89])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[89])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_SLL: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[88])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[88])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_SRx: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[87])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[87])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_ADD: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[86])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[86])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_SLT: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[85])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[85])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_SLTU: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[84])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[84])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_XOR: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[83])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[83])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_OR: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[82])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[82])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_AND: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[81])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[81])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_LDST_legal: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[80])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[80])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_FENCE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[79])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[79])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_FENCE_I: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[78])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[78])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_PRIV: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[77])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[77])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_CSRRW: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[76])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[76])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_CSRRS: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[75])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[75])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_CSRRC: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[74])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[74])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_CSRRWI: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[73])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[73])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_CSRRSI: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[72])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[72])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f3_CSRRCI: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[71])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[71])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "f12: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Decoded_Funct12 { ", "is_f12_ECALL: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[70])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[70])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f12_EBREAK: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[69])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[69])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f12_URET: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[68])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[68])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f12_SRET: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[67])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[67])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f12_HRET: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[66])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[66])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f12_MRET: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[65])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[65])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "is_f12_WFI: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  !rg_exec1_inputs[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "rs1_val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_exec1_inputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "rs2_val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_exec1_inputs[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	begin
	  v__h143850 = $stime;
	  #0;
	end
    v__h143844 = v__h143850 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("%06d:[D]:%m.rl_exec2: ", v__h143844);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3) $write("CPU_EXEC2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3) $write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("ALU_Outputs { ", "control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] == 4'd9)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[111:108] != 4'd0 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd7 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd9)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("'h%h", rg_alu_outputs[107:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write(", ", "op_stage2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[103:101] == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[103:101] == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[103:101] == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[103:101] == 3'd3)
	$write("OP_Stage2_SH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd1 &&
	  rg_alu_outputs[103:101] != 3'd2 &&
	  rg_alu_outputs[103:101] != 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("'h%h", rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("'h%h", rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write(", ", "val1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("'h%h", rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write(", ", "val2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$write("'h%h", rg_alu_outputs[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && cfg_verbosity == 2'd3)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("    CONTROL_BRANCH reg [%0d] <= 0x%08h",
		 rg_alu_outputs[100:96],
		 rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  rg_alu_outputs[95:64] == rg_pc)
	begin
	  v__h145103 = $stime;
	  #0;
	end
    v__h145097 = v__h145103 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  rg_alu_outputs[95:64] == rg_pc)
	$display("%06d:[D]:%m.rl_exec2: Tight infinite loop: pc 0x%0x",
		 v__h145097,
		 rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  rg_alu_outputs[95:64] == rg_pc)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  cfg_verbosity != 2'd0)
	$write("                      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("    CONTROL_STRAIGHT, ALU: reg [%0d] <= 0x%08h; next_pc = 0x%08h",
		 rg_alu_outputs[100:96],
		 rg_alu_outputs[63:32],
		 next_pc__h150034);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  cfg_verbosity != 2'd0)
	$write("(GPR[%02d]<-0x%08h) ",
	       rg_alu_outputs[100:96],
	       rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd4 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("    CONTROL_STRAIGHT, M: is_OP_not_OP_32 %d, funct3 %0h 0x%08h  0x%08h",
		 !rg_exec1_inputs[129],
		 rg_exec1_inputs[140:138],
		 rg_alu_outputs[63:32],
		 rg_alu_outputs[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd4 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	begin
	  v__h144348 = $stime;
	  #0;
	end
    v__h144342 = v__h144348 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$display("%06d:[E]:%m.rl_run: Unrecognized op_stage2", v__h144342);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("ALU_Outputs { ", "control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[107:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "op_stage2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd3)
	$write("OP_Stage2_SH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4 &&
	  rg_alu_outputs[103:101] != 3'd1 &&
	  rg_alu_outputs[103:101] != 3'd2 &&
	  rg_alu_outputs[103:101] != 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "val1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "val2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("    xRET: next_pc 0x%0h ", csr_regfile$csr_ret_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  cfg_verbosity != 2'd0)
	$write("                      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  cfg_verbosity != 2'd0)
	$write("                      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("    CONTROL_FENCE_I/CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd9 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("    CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd9 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    CONTROL_TRAP: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Pipe_Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_alu_outputs[107:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", x__h144839, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	begin
	  v__h144870 = $stime;
	  #0;
	end
    v__h144864 = v__h144870 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$display("%06d:[E].%m.rl_run: unrecognized 'control' in alu_outputs",
		 v__h144864);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("ALU_Outputs { ", "control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[111:108] != 4'd0 &&
	  rg_alu_outputs[111:108] != 4'd7)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[107:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "op_stage2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd3)
	$write("OP_Stage2_SH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd1 &&
	  rg_alu_outputs[103:101] != 3'd2 &&
	  rg_alu_outputs[103:101] != 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "val1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "val2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    %s: ", "LD: Trap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Pipe_Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", exc__h147781);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_alu_outputs[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h147200 = $stime;
	  #0;
	end
    v__h147194 = v__h147200 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_LD_completion: Rd [%0d] <= data 0x%08h",
		 v__h147194,
		 rg_alu_outputs[100:96],
		 near_mem$dmem_word32_get);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(GPR[%02d]<-0x%08h) ",
	       rg_alu_outputs[100:96],
	       near_mem$dmem_word32_get);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    %s: ", "ST: Trap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Pipe_Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", exc__h147781);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_alu_outputs[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("                      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("(MEM[0x%08h]<-0x%08h) ",
	       rg_alu_outputs[95:64],
	       rg_alu_outputs[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h148276 = $stime;
	  #0;
	end
    v__h148270 = v__h148276 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_ST_completion", v__h148270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && cfg_verbosity != 2'd0)
	$write("(GPR[%02d]<-0x%08h) ", rg_alu_outputs[100:96], mbox$word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && cfg_verbosity != 2'd0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h148764 = $stime;
	  #0;
	end
    v__h148758 = v__h148764 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_M_completion: Rd [%0d] <= data 0x%08h",
		 v__h148758,
		 rg_alu_outputs[100:96],
		 mbox$word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && cfg_verbosity != 2'd0)
	$write("(GPR[%02d]<-0x%08h) ", rg_alu_outputs[100:96], sbox$word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h149249 = $stime;
	  #0;
	end
    v__h149243 = v__h149249 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_SH_completion: Rd [%0d] <= data 0x%08h",
		 v__h149243,
		 rg_alu_outputs[100:96],
		 sbox$word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(GPR[%02d]<-0x%08h) ",
	       rg_alu_outputs[100:96],
	       csr_regfile$read_csr[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h149946 = $stime;
	  #0;
	end
    v__h149940 = v__h149946 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_CSRR_W_COMPLETION: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 v__h149940,
		 rg_exec1_inputs[145:141],
		 rg_alu_outputs[63:32],
		 rg_exec1_inputs[157:146],
		 csr_regfile$read_csr[31:0],
		 rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    %s: ", "CSRR_W: Trap on CSR permissions");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Pipe_Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", 4'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_exec1_inputs[157:126], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("(GPR[%02d]<-0x%08h) ",
	       rg_alu_outputs[100:96],
	       csr_regfile$read_csr[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  cfg_verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h150692 = $stime;
	  #0;
	end
    v__h150686 = v__h150692 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_CSRR_S_or_C_COMPLETION: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 v__h150686,
		 rg_exec1_inputs[145:141],
		 rg_alu_outputs[63:32],
		 rg_exec1_inputs[157:146],
		 csr_regfile$read_csr[31:0],
		 rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    New csr_val(s): ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("CSR_Write_Result { ", "new_csr_value: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", x1_avValue_new_csr_value__h150294);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "m_new_csr_value2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  (rg_exec1_inputs[145:141] == 5'd0 ||
	   !csr_regfile$mav_csr_write[32]))
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130 &&
	  rg_exec1_inputs[145:141] != 5'd0 &&
	  csr_regfile$mav_csr_write[32])
	$write("tagged Valid ", "'h%h", value__h150812);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("    %s: ", "CSRR_S_or_C: Trap on CSR permissions");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("Pipe_Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", 4'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("'h%h", rg_exec1_inputs[157:126], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && !rg_csr_permitted &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_818_BITS_67_TO_36_819_EQ_csr_regf_ETC___d1823)
	begin
	  v__h150993 = $stime;
	  #0;
	end
    v__h150987 = v__h150993 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_818_BITS_67_TO_36_819_EQ_csr_regf_ETC___d1823)
	$display("%06d:[D]:%m.rl_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 v__h150987,
		 csr_regfile$csr_trap_actions,
		 rg_exec1_inputs[157:126]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_818_BITS_67_TO_36_819_EQ_csr_regf_ETC___d1823)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h151049,
		 cpifrac__h151050,
		 delta_CPI_cycles__h151045,
		 _theResult____h151047);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_818_BITS_67_TO_36_819_EQ_csr_regf_ETC___d1823)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cfg_verbosity != 2'd0)
	begin
	  v__h151169 = $stime;
	  #0;
	end
    v__h151163 = v__h151169 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cfg_verbosity != 2'd0)
	$display("%0d:[D]:%m.rl_trap: epc 0x%0h  instr 0x%08h  exc_code %0d  tval 0x%0d ",
		 v__h151163,
		 rg_trap_info[67:36],
		 rg_exec1_inputs[157:126],
		 rg_trap_info[35:32],
		 rg_trap_info[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cfg_verbosity != 2'd0)
	$display("    new_pc (=mtvec) 0x%0h", csr_regfile$csr_trap_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cfg_verbosity != 2'd0)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_trap &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h151361 = $stime;
	  #0;
	end
    v__h151355 = v__h151361 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_trap &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_restart_trap: pc 0x%0h", v__h151355, rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h151483 = $stime;
	  #0;
	end
    v__h151477 = v__h151483 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_WFI_resume", v__h151477);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cfg_verbosity != 2'd0)
	$write("(instret:%06d) ", csr_regfile$read_csr_minstret);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cfg_verbosity != 2'd0)
	$write("(PC:0x%08h) ", rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cfg_verbosity != 2'd0)
	$write("(instr:0x%08h) ",
	       IF_rg_exec1_inputs_94_BIT_125_215_THEN_rg_exec_ETC___d1639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cfg_verbosity != 2'd0)
	$write("                      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cfg_verbosity != 2'd0)
	$write("                              ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cfg_verbosity != 2'd0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h151962 = $stime;
	  #0;
	end
    v__h151956 = v__h151962 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_reset_from_WFI", v__h151956);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_take_external_interrupt && cfg_verbosity != 2'd0)
	begin
	  v__h152177 = $stime;
	  #0;
	end
    v__h152171 = v__h152177 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_take_external_interrupt && cfg_verbosity != 2'd0)
	$display("%0d:[D]:%m.rl_take_external_interrupt; epc 0x%0h, pc 0x%0h",
		 v__h152171,
		 rg_pc,
		 csr_regfile$csr_trap_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_take_external_interrupt && cfg_verbosity != 2'd0)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_external_interrupt &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	begin
	  v__h152314 = $stime;
	  #0;
	end
    v__h152308 = v__h152314 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_external_interrupt &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$display("%0d:[D]:%m.rl_restart_external_interrupt: pc 0x%0h",
		 v__h152308,
		 rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_external_interrupt &&
	  NOT_cfg_verbosity_read__1_ULE_1_29___d130)
	$fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_imem_c_rl_NEW_RSP && WILL_FIRE_RL_rl_exec1)
	$display("Error: \"/home/nsharma/work/projects/magritte/mcu-release/MCU_Core/CPU/CPU.bsv\", line 1627, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_imem_c_rl_NEW_RSP] and\n  [RL_rl_exec1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && WILL_FIRE_RL_imem_c_rl_new_req)
	$display("Error: \"/home/nsharma/work/projects/magritte/mcu-release/MCU_Core/CPU/CPU.bsv\", line 1628, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_exec1] and\n  [RL_imem_c_rl_new_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Low Footprint Core v1.3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Simple FSM CPU, i.e., not pipelined");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2018-2022 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 2'd0)
	begin
	  v__h3617 = $stime;
	  #0;
	end
    v__h3611 = v__h3617 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 2'd0)
	$display("%06d:[D]:%m.rl_reset_start", v__h3611);
  end
  // synopsys translate_on
endmodule  // mkCPU

