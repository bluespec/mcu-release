//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// m0_HADDR                       O    32 reg
// m0_HBURST                      O     3 const
// m0_HMASTLOCK                   O     1 const
// m0_HPROT                       O     4 const
// m0_HSIZE                       O     3 reg
// m0_HTRANS                      O     2 reg
// m0_HWDATA                      O    32 reg
// m0_HWRITE                      O     1 reg
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 reg
// mv_tohost_value                O    32 reg
// RDY_mv_tohost_value            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// cpu_reset_server_request_put   I     1 reg
// m0_HRDATA                      I    32 reg
// m0_HREADY                      I     1
// m0_HRESP                       I     1
// ext_interrupt                  I     1 reg
// sw_interrupt                   I     1 reg
// timer_interrupt                I     1 reg
// set_verbosity_verbosity        I     2 reg
// set_watch_tohost_watch_tohost  I     1
// set_watch_tohost_tohost_addr   I    32 reg
// EN_cpu_reset_server_request_put  I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_cpu_reset_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      m0_HADDR,

	      m0_HBURST,

	      m0_HMASTLOCK,

	      m0_HPROT,

	      m0_HSIZE,

	      m0_HTRANS,

	      m0_HWDATA,

	      m0_HWRITE,

	      m0_HRDATA,

	      m0_HREADY,

	      m0_HRESP,

	      ext_interrupt,

	      sw_interrupt,

	      timer_interrupt,

	      set_verbosity_verbosity,
	      EN_set_verbosity,
	      RDY_set_verbosity,

	      set_watch_tohost_watch_tohost,
	      set_watch_tohost_tohost_addr,
	      EN_set_watch_tohost,
	      RDY_set_watch_tohost,

	      mv_tohost_value,
	      RDY_mv_tohost_value);
  input  CLK;
  input  RST_N;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method m0_haddr
  output [31 : 0] m0_HADDR;

  // value method m0_hburst
  output [2 : 0] m0_HBURST;

  // value method m0_hmastlock
  output m0_HMASTLOCK;

  // value method m0_hprot
  output [3 : 0] m0_HPROT;

  // value method m0_hsize
  output [2 : 0] m0_HSIZE;

  // value method m0_htrans
  output [1 : 0] m0_HTRANS;

  // value method m0_hwdata
  output [31 : 0] m0_HWDATA;

  // value method m0_hwrite
  output m0_HWRITE;

  // action method m0_hrdata
  input  [31 : 0] m0_HRDATA;

  // action method m0_hready
  input  m0_HREADY;

  // action method m0_hresp
  input  m0_HRESP;

  // action method m_external_interrupt_req
  input  ext_interrupt;

  // action method software_interrupt_req
  input  sw_interrupt;

  // action method timer_interrupt_req
  input  timer_interrupt;

  // action method set_verbosity
  input  [1 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [31 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [31 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [31 : 0] m0_HADDR, m0_HWDATA, mv_tohost_value;
  wire [3 : 0] m0_HPROT;
  wire [2 : 0] m0_HBURST, m0_HSIZE;
  wire [1 : 0] m0_HTRANS;
  wire RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_mv_tohost_value,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       cpu_reset_server_response_get,
       m0_HMASTLOCK,
       m0_HWRITE;

  // ports of submodule cpu
  wire [31 : 0] cpu$dmem_master_HADDR,
		cpu$dmem_master_HRDATA,
		cpu$dmem_master_HWDATA,
		cpu$mv_tohost_value,
		cpu$set_watch_tohost_tohost_addr;
  wire [3 : 0] cpu$dmem_master_HPROT;
  wire [2 : 0] cpu$dmem_master_HBURST, cpu$dmem_master_HSIZE;
  wire [1 : 0] cpu$dmem_master_HTRANS, cpu$set_verbosity_verbosity;
  wire cpu$EN_hart_reset_server_request_put,
       cpu$EN_hart_reset_server_response_get,
       cpu$EN_set_verbosity,
       cpu$EN_set_watch_tohost,
       cpu$RDY_hart_reset_server_request_put,
       cpu$RDY_hart_reset_server_response_get,
       cpu$RDY_mv_tohost_value,
       cpu$RDY_set_watch_tohost,
       cpu$dmem_master_HMASTLOCK,
       cpu$dmem_master_HREADY,
       cpu$dmem_master_HRESP,
       cpu$dmem_master_HWRITE,
       cpu$hart_reset_server_request_put,
       cpu$hart_reset_server_response_get,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$set_watch_tohost_watch_tohost,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_requestor
  wire f_reset_requestor$CLR,
       f_reset_requestor$DEQ,
       f_reset_requestor$D_IN,
       f_reset_requestor$D_OUT,
       f_reset_requestor$EMPTY_N,
       f_reset_requestor$ENQ,
       f_reset_requestor$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_m0_hrdata,
       CAN_FIRE_m0_hready,
       CAN_FIRE_m0_hresp,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_m0_hrdata,
       WILL_FIRE_m0_hready,
       WILL_FIRE_m0_hresp,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h610;
  reg [31 : 0] v__h711;
  reg [31 : 0] v__h604;
  reg [31 : 0] v__h705;
  // synopsys translate_on

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method m0_haddr
  assign m0_HADDR = cpu$dmem_master_HADDR ;

  // value method m0_hburst
  assign m0_HBURST = cpu$dmem_master_HBURST ;

  // value method m0_hmastlock
  assign m0_HMASTLOCK = cpu$dmem_master_HMASTLOCK ;

  // value method m0_hprot
  assign m0_HPROT = cpu$dmem_master_HPROT ;

  // value method m0_hsize
  assign m0_HSIZE = cpu$dmem_master_HSIZE ;

  // value method m0_htrans
  assign m0_HTRANS = cpu$dmem_master_HTRANS ;

  // value method m0_hwdata
  assign m0_HWDATA = cpu$dmem_master_HWDATA ;

  // value method m0_hwrite
  assign m0_HWRITE = cpu$dmem_master_HWRITE ;

  // action method m0_hrdata
  assign CAN_FIRE_m0_hrdata = 1'd1 ;
  assign WILL_FIRE_m0_hrdata = 1'd1 ;

  // action method m0_hready
  assign CAN_FIRE_m0_hready = 1'd1 ;
  assign WILL_FIRE_m0_hready = 1'd1 ;

  // action method m0_hresp
  assign CAN_FIRE_m0_hresp = 1'd1 ;
  assign WILL_FIRE_m0_hresp = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = cpu$RDY_set_watch_tohost ;
  assign CAN_FIRE_set_watch_tohost = cpu$RDY_set_watch_tohost ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = cpu$mv_tohost_value ;
  assign RDY_mv_tohost_value = cpu$RDY_mv_tohost_value ;

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dmem_master_HRDATA(cpu$dmem_master_HRDATA),
	    .dmem_master_HREADY(cpu$dmem_master_HREADY),
	    .dmem_master_HRESP(cpu$dmem_master_HRESP),
	    .hart_reset_server_request_put(cpu$hart_reset_server_request_put),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .set_watch_tohost_tohost_addr(cpu$set_watch_tohost_tohost_addr),
	    .set_watch_tohost_watch_tohost(cpu$set_watch_tohost_watch_tohost),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_hart_reset_server_request_put(cpu$EN_hart_reset_server_request_put),
	    .EN_hart_reset_server_response_get(cpu$EN_hart_reset_server_response_get),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .EN_set_watch_tohost(cpu$EN_set_watch_tohost),
	    .dmem_master_HADDR(cpu$dmem_master_HADDR),
	    .dmem_master_HBURST(cpu$dmem_master_HBURST),
	    .dmem_master_HMASTLOCK(cpu$dmem_master_HMASTLOCK),
	    .dmem_master_HPROT(cpu$dmem_master_HPROT),
	    .dmem_master_HSIZE(cpu$dmem_master_HSIZE),
	    .dmem_master_HTRANS(cpu$dmem_master_HTRANS),
	    .dmem_master_HWDATA(cpu$dmem_master_HWDATA),
	    .dmem_master_HWRITE(cpu$dmem_master_HWRITE),
	    .RDY_hart_reset_server_request_put(cpu$RDY_hart_reset_server_request_put),
	    .hart_reset_server_response_get(cpu$hart_reset_server_response_get),
	    .RDY_hart_reset_server_response_get(cpu$RDY_hart_reset_server_response_get),
	    .RDY_set_watch_tohost(cpu$RDY_set_watch_tohost),
	    .mv_tohost_value(cpu$mv_tohost_value),
	    .RDY_mv_tohost_value(cpu$RDY_mv_tohost_value));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_requestor
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_requestor(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_reset_requestor$D_IN),
							   .ENQ(f_reset_requestor$ENQ),
							   .DEQ(f_reset_requestor$DEQ),
							   .CLR(f_reset_requestor$CLR),
							   .D_OUT(f_reset_requestor$D_OUT),
							   .FULL_N(f_reset_requestor$FULL_N),
							   .EMPTY_N(f_reset_requestor$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     cpu$RDY_hart_reset_server_request_put && f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     cpu$RDY_hart_reset_server_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     f_reset_requestor$D_OUT ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // submodule cpu
  assign cpu$dmem_master_HRDATA = m0_HRDATA ;
  assign cpu$dmem_master_HREADY = m0_HREADY ;
  assign cpu$dmem_master_HRESP = m0_HRESP ;
  assign cpu$hart_reset_server_request_put = f_reset_reqs$D_OUT ;
  assign cpu$m_external_interrupt_req_set_not_clear = ext_interrupt ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign cpu$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign cpu$software_interrupt_req_set_not_clear = sw_interrupt ;
  assign cpu$timer_interrupt_req_set_not_clear = timer_interrupt ;
  assign cpu$EN_hart_reset_server_request_put =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign cpu$EN_hart_reset_server_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;
  assign cpu$EN_set_watch_tohost = EN_set_watch_tohost ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     cpu$RDY_hart_reset_server_request_put && f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_requestor
  assign f_reset_requestor$D_IN = 1'd1 ;
  assign f_reset_requestor$ENQ =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign f_reset_requestor$DEQ = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign f_reset_requestor$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$hart_reset_server_response_get ;
  assign f_reset_rsps$ENQ =
	     cpu$RDY_hart_reset_server_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     f_reset_requestor$D_OUT ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h610 = $stime;
	  #0;
	end
    v__h604 = v__h610 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%06d:[D]:%m.rl_cpu_hart0_reset_from_soc_start", v__h604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h711 = $stime;
	  #0;
	end
    v__h705 = v__h711 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%06d:[D]:%m.rl_cpu_hart0_reset_complete", v__h705);
  end
  // synopsys translate_on
endmodule  // mkCore

