//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// m_gpio_addr_base               O    32 const
// m_gpio_addr_size               O    32 const
// m_gpio_addr_lim                O    32 const
// m_plic_addr_base               O    32 const
// m_plic_addr_size               O    32 const
// m_plic_addr_lim                O    32 const
// m_clint_addr_base              O    32 const
// m_clint_addr_size              O    32 const
// m_clint_addr_lim               O    32 const
// m_uart_addr_base               O    32 const
// m_uart_addr_size               O    32 const
// m_uart_addr_lim                O    32 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Map(CLK,
		 RST_N,

		 m_gpio_addr_base,

		 m_gpio_addr_size,

		 m_gpio_addr_lim,

		 m_plic_addr_base,

		 m_plic_addr_size,

		 m_plic_addr_lim,

		 m_clint_addr_base,

		 m_clint_addr_size,

		 m_clint_addr_lim,

		 m_uart_addr_base,

		 m_uart_addr_size,

		 m_uart_addr_lim);
  input  CLK;
  input  RST_N;

  // value method m_gpio_addr_base
  output [31 : 0] m_gpio_addr_base;

  // value method m_gpio_addr_size
  output [31 : 0] m_gpio_addr_size;

  // value method m_gpio_addr_lim
  output [31 : 0] m_gpio_addr_lim;

  // value method m_plic_addr_base
  output [31 : 0] m_plic_addr_base;

  // value method m_plic_addr_size
  output [31 : 0] m_plic_addr_size;

  // value method m_plic_addr_lim
  output [31 : 0] m_plic_addr_lim;

  // value method m_clint_addr_base
  output [31 : 0] m_clint_addr_base;

  // value method m_clint_addr_size
  output [31 : 0] m_clint_addr_size;

  // value method m_clint_addr_lim
  output [31 : 0] m_clint_addr_lim;

  // value method m_uart_addr_base
  output [31 : 0] m_uart_addr_base;

  // value method m_uart_addr_size
  output [31 : 0] m_uart_addr_size;

  // value method m_uart_addr_lim
  output [31 : 0] m_uart_addr_lim;

  // signals for module outputs
  wire [31 : 0] m_clint_addr_base,
		m_clint_addr_lim,
		m_clint_addr_size,
		m_gpio_addr_base,
		m_gpio_addr_lim,
		m_gpio_addr_size,
		m_plic_addr_base,
		m_plic_addr_lim,
		m_plic_addr_size,
		m_uart_addr_base,
		m_uart_addr_lim,
		m_uart_addr_size;

  // value method m_gpio_addr_base
  assign m_gpio_addr_base = 32'h6FFF0000 ;

  // value method m_gpio_addr_size
  assign m_gpio_addr_size = 32'h00000040 ;

  // value method m_gpio_addr_lim
  assign m_gpio_addr_lim = 32'h6FFF0040 ;

  // value method m_plic_addr_base
  assign m_plic_addr_base = 32'h0C000000 ;

  // value method m_plic_addr_size
  assign m_plic_addr_size = 32'h00400000 ;

  // value method m_plic_addr_lim
  assign m_plic_addr_lim = 32'h0C400000 ;

  // value method m_clint_addr_base
  assign m_clint_addr_base = 32'h10000000 ;

  // value method m_clint_addr_size
  assign m_clint_addr_size = 32'h0000C000 ;

  // value method m_clint_addr_lim
  assign m_clint_addr_lim = 32'h1000C000 ;

  // value method m_uart_addr_base
  assign m_uart_addr_base = 32'h62300000 ;

  // value method m_uart_addr_size
  assign m_uart_addr_size = 32'h00001000 ;

  // value method m_uart_addr_lim
  assign m_uart_addr_lim = 32'h62301000 ;
endmodule  // mkSoC_Map

