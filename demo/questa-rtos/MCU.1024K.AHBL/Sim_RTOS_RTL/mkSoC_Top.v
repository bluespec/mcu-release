//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// gpios                          O    16 const
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// RDY_set_watch_tohost           O     1 reg
// mv_tohost_value                O    32 reg
// RDY_mv_tohost_value            O     1 reg
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_from_console_put           I     8 reg
// set_watch_tohost_watch_tohost  I     1
// set_watch_tohost_tohost_addr   I    32 reg
// set_verbosity_verbosity        I     2 reg
// EN_put_from_console_put        I     1
// EN_set_watch_tohost            I     1
// EN_set_verbosity               I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Top(CLK,
		 RST_N,

		 gpios,

		 EN_get_to_console_get,
		 get_to_console_get,
		 RDY_get_to_console_get,

		 put_from_console_put,
		 EN_put_from_console_put,
		 RDY_put_from_console_put,

		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr,
		 EN_set_watch_tohost,
		 RDY_set_watch_tohost,

		 mv_tohost_value,
		 RDY_mv_tohost_value,

		 set_verbosity_verbosity,
		 EN_set_verbosity,
		 RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // value method gpios
  output [15 : 0] gpios;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [31 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [31 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method set_verbosity
  input  [1 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [31 : 0] mv_tohost_value;
  wire [15 : 0] gpios;
  wire [7 : 0] get_to_console_get;
  wire RDY_get_to_console_get,
       RDY_mv_tohost_value,
       RDY_put_from_console_put,
       RDY_set_verbosity,
       RDY_set_watch_tohost;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule ahbl_axi4_bridge
  wire [31 : 0] ahbl_axi4_bridge$ahbl_target_HADDR,
		ahbl_axi4_bridge$ahbl_target_HRDATA,
		ahbl_axi4_bridge$ahbl_target_HWDATA,
		ahbl_axi4_bridge$axi4_initiator_araddr,
		ahbl_axi4_bridge$axi4_initiator_awaddr,
		ahbl_axi4_bridge$axi4_initiator_rdata,
		ahbl_axi4_bridge$axi4_initiator_wdata;
  wire [7 : 0] ahbl_axi4_bridge$axi4_initiator_arlen,
	       ahbl_axi4_bridge$axi4_initiator_awlen;
  wire [3 : 0] ahbl_axi4_bridge$ahbl_target_HPROT,
	       ahbl_axi4_bridge$axi4_initiator_arcache,
	       ahbl_axi4_bridge$axi4_initiator_arid,
	       ahbl_axi4_bridge$axi4_initiator_arqos,
	       ahbl_axi4_bridge$axi4_initiator_arregion,
	       ahbl_axi4_bridge$axi4_initiator_awcache,
	       ahbl_axi4_bridge$axi4_initiator_awid,
	       ahbl_axi4_bridge$axi4_initiator_awqos,
	       ahbl_axi4_bridge$axi4_initiator_awregion,
	       ahbl_axi4_bridge$axi4_initiator_bid,
	       ahbl_axi4_bridge$axi4_initiator_rid,
	       ahbl_axi4_bridge$axi4_initiator_wstrb;
  wire [2 : 0] ahbl_axi4_bridge$ahbl_target_HBURST,
	       ahbl_axi4_bridge$ahbl_target_HSIZE,
	       ahbl_axi4_bridge$axi4_initiator_arprot,
	       ahbl_axi4_bridge$axi4_initiator_arsize,
	       ahbl_axi4_bridge$axi4_initiator_awprot,
	       ahbl_axi4_bridge$axi4_initiator_awsize;
  wire [1 : 0] ahbl_axi4_bridge$ahbl_target_HTRANS,
	       ahbl_axi4_bridge$axi4_initiator_arburst,
	       ahbl_axi4_bridge$axi4_initiator_awburst,
	       ahbl_axi4_bridge$axi4_initiator_bresp,
	       ahbl_axi4_bridge$axi4_initiator_rresp;
  wire ahbl_axi4_bridge$EN_reset,
       ahbl_axi4_bridge$ahbl_target_HMASTLOCK,
       ahbl_axi4_bridge$ahbl_target_HREADY,
       ahbl_axi4_bridge$ahbl_target_HREADYOUT,
       ahbl_axi4_bridge$ahbl_target_HRESP,
       ahbl_axi4_bridge$ahbl_target_HSEL,
       ahbl_axi4_bridge$ahbl_target_HWRITE,
       ahbl_axi4_bridge$axi4_initiator_arlock,
       ahbl_axi4_bridge$axi4_initiator_arready,
       ahbl_axi4_bridge$axi4_initiator_arvalid,
       ahbl_axi4_bridge$axi4_initiator_awlock,
       ahbl_axi4_bridge$axi4_initiator_awready,
       ahbl_axi4_bridge$axi4_initiator_awvalid,
       ahbl_axi4_bridge$axi4_initiator_bready,
       ahbl_axi4_bridge$axi4_initiator_bvalid,
       ahbl_axi4_bridge$axi4_initiator_rlast,
       ahbl_axi4_bridge$axi4_initiator_rready,
       ahbl_axi4_bridge$axi4_initiator_rvalid,
       ahbl_axi4_bridge$axi4_initiator_wlast,
       ahbl_axi4_bridge$axi4_initiator_wready,
       ahbl_axi4_bridge$axi4_initiator_wvalid;

  // ports of submodule clint
  wire [31 : 0] clint$axi4_araddr,
		clint$axi4_awaddr,
		clint$axi4_rdata,
		clint$axi4_wdata;
  wire [7 : 0] clint$axi4_arlen, clint$axi4_awlen;
  wire [3 : 0] clint$axi4_arcache,
	       clint$axi4_arid,
	       clint$axi4_arqos,
	       clint$axi4_arregion,
	       clint$axi4_awcache,
	       clint$axi4_awid,
	       clint$axi4_awqos,
	       clint$axi4_awregion,
	       clint$axi4_bid,
	       clint$axi4_rid,
	       clint$axi4_wstrb;
  wire [2 : 0] clint$axi4_arprot,
	       clint$axi4_arsize,
	       clint$axi4_awprot,
	       clint$axi4_awsize;
  wire [1 : 0] clint$axi4_arburst,
	       clint$axi4_awburst,
	       clint$axi4_bresp,
	       clint$axi4_rresp;
  wire clint$EN_get_sw_interrupt_req_get,
       clint$EN_get_timer_interrupt_req_get,
       clint$RDY_get_sw_interrupt_req_get,
       clint$RDY_get_timer_interrupt_req_get,
       clint$axi4_arlock,
       clint$axi4_arready,
       clint$axi4_arvalid,
       clint$axi4_awlock,
       clint$axi4_awready,
       clint$axi4_awvalid,
       clint$axi4_bready,
       clint$axi4_bvalid,
       clint$axi4_rlast,
       clint$axi4_rready,
       clint$axi4_rvalid,
       clint$axi4_wlast,
       clint$axi4_wready,
       clint$axi4_wvalid,
       clint$get_sw_interrupt_req_get,
       clint$get_timer_interrupt_req_get;

  // ports of submodule fabric
  wire [31 : 0] fabric$v_from_masters_0_araddr,
		fabric$v_from_masters_0_awaddr,
		fabric$v_from_masters_0_rdata,
		fabric$v_from_masters_0_wdata,
		fabric$v_to_slaves_0_araddr,
		fabric$v_to_slaves_0_awaddr,
		fabric$v_to_slaves_0_rdata,
		fabric$v_to_slaves_0_wdata,
		fabric$v_to_slaves_1_araddr,
		fabric$v_to_slaves_1_awaddr,
		fabric$v_to_slaves_1_rdata,
		fabric$v_to_slaves_1_wdata,
		fabric$v_to_slaves_2_araddr,
		fabric$v_to_slaves_2_awaddr,
		fabric$v_to_slaves_2_rdata,
		fabric$v_to_slaves_2_wdata;
  wire [7 : 0] fabric$v_from_masters_0_arlen,
	       fabric$v_from_masters_0_awlen,
	       fabric$v_to_slaves_0_arlen,
	       fabric$v_to_slaves_0_awlen,
	       fabric$v_to_slaves_1_arlen,
	       fabric$v_to_slaves_1_awlen,
	       fabric$v_to_slaves_2_arlen,
	       fabric$v_to_slaves_2_awlen;
  wire [3 : 0] fabric$v_from_masters_0_arcache,
	       fabric$v_from_masters_0_arid,
	       fabric$v_from_masters_0_arqos,
	       fabric$v_from_masters_0_arregion,
	       fabric$v_from_masters_0_awcache,
	       fabric$v_from_masters_0_awid,
	       fabric$v_from_masters_0_awqos,
	       fabric$v_from_masters_0_awregion,
	       fabric$v_from_masters_0_bid,
	       fabric$v_from_masters_0_rid,
	       fabric$v_from_masters_0_wstrb,
	       fabric$v_to_slaves_0_arcache,
	       fabric$v_to_slaves_0_arid,
	       fabric$v_to_slaves_0_arqos,
	       fabric$v_to_slaves_0_arregion,
	       fabric$v_to_slaves_0_awcache,
	       fabric$v_to_slaves_0_awid,
	       fabric$v_to_slaves_0_awqos,
	       fabric$v_to_slaves_0_awregion,
	       fabric$v_to_slaves_0_bid,
	       fabric$v_to_slaves_0_rid,
	       fabric$v_to_slaves_0_wstrb,
	       fabric$v_to_slaves_1_arcache,
	       fabric$v_to_slaves_1_arid,
	       fabric$v_to_slaves_1_arqos,
	       fabric$v_to_slaves_1_arregion,
	       fabric$v_to_slaves_1_awcache,
	       fabric$v_to_slaves_1_awid,
	       fabric$v_to_slaves_1_awqos,
	       fabric$v_to_slaves_1_awregion,
	       fabric$v_to_slaves_1_bid,
	       fabric$v_to_slaves_1_rid,
	       fabric$v_to_slaves_1_wstrb,
	       fabric$v_to_slaves_2_arcache,
	       fabric$v_to_slaves_2_arid,
	       fabric$v_to_slaves_2_arqos,
	       fabric$v_to_slaves_2_arregion,
	       fabric$v_to_slaves_2_awcache,
	       fabric$v_to_slaves_2_awid,
	       fabric$v_to_slaves_2_awqos,
	       fabric$v_to_slaves_2_awregion,
	       fabric$v_to_slaves_2_bid,
	       fabric$v_to_slaves_2_rid,
	       fabric$v_to_slaves_2_wstrb;
  wire [2 : 0] fabric$v_from_masters_0_arprot,
	       fabric$v_from_masters_0_arsize,
	       fabric$v_from_masters_0_awprot,
	       fabric$v_from_masters_0_awsize,
	       fabric$v_to_slaves_0_arprot,
	       fabric$v_to_slaves_0_arsize,
	       fabric$v_to_slaves_0_awprot,
	       fabric$v_to_slaves_0_awsize,
	       fabric$v_to_slaves_1_arprot,
	       fabric$v_to_slaves_1_arsize,
	       fabric$v_to_slaves_1_awprot,
	       fabric$v_to_slaves_1_awsize,
	       fabric$v_to_slaves_2_arprot,
	       fabric$v_to_slaves_2_arsize,
	       fabric$v_to_slaves_2_awprot,
	       fabric$v_to_slaves_2_awsize;
  wire [1 : 0] fabric$v_from_masters_0_arburst,
	       fabric$v_from_masters_0_awburst,
	       fabric$v_from_masters_0_bresp,
	       fabric$v_from_masters_0_rresp,
	       fabric$v_to_slaves_0_arburst,
	       fabric$v_to_slaves_0_awburst,
	       fabric$v_to_slaves_0_bresp,
	       fabric$v_to_slaves_0_rresp,
	       fabric$v_to_slaves_1_arburst,
	       fabric$v_to_slaves_1_awburst,
	       fabric$v_to_slaves_1_bresp,
	       fabric$v_to_slaves_1_rresp,
	       fabric$v_to_slaves_2_arburst,
	       fabric$v_to_slaves_2_awburst,
	       fabric$v_to_slaves_2_bresp,
	       fabric$v_to_slaves_2_rresp;
  wire fabric$EN_reset,
       fabric$v_from_masters_0_arlock,
       fabric$v_from_masters_0_arready,
       fabric$v_from_masters_0_arvalid,
       fabric$v_from_masters_0_awlock,
       fabric$v_from_masters_0_awready,
       fabric$v_from_masters_0_awvalid,
       fabric$v_from_masters_0_bready,
       fabric$v_from_masters_0_bvalid,
       fabric$v_from_masters_0_rlast,
       fabric$v_from_masters_0_rready,
       fabric$v_from_masters_0_rvalid,
       fabric$v_from_masters_0_wlast,
       fabric$v_from_masters_0_wready,
       fabric$v_from_masters_0_wvalid,
       fabric$v_to_slaves_0_arlock,
       fabric$v_to_slaves_0_arready,
       fabric$v_to_slaves_0_arvalid,
       fabric$v_to_slaves_0_awlock,
       fabric$v_to_slaves_0_awready,
       fabric$v_to_slaves_0_awvalid,
       fabric$v_to_slaves_0_bready,
       fabric$v_to_slaves_0_bvalid,
       fabric$v_to_slaves_0_rlast,
       fabric$v_to_slaves_0_rready,
       fabric$v_to_slaves_0_rvalid,
       fabric$v_to_slaves_0_wlast,
       fabric$v_to_slaves_0_wready,
       fabric$v_to_slaves_0_wvalid,
       fabric$v_to_slaves_1_arlock,
       fabric$v_to_slaves_1_arready,
       fabric$v_to_slaves_1_arvalid,
       fabric$v_to_slaves_1_awlock,
       fabric$v_to_slaves_1_awready,
       fabric$v_to_slaves_1_awvalid,
       fabric$v_to_slaves_1_bready,
       fabric$v_to_slaves_1_bvalid,
       fabric$v_to_slaves_1_rlast,
       fabric$v_to_slaves_1_rready,
       fabric$v_to_slaves_1_rvalid,
       fabric$v_to_slaves_1_wlast,
       fabric$v_to_slaves_1_wready,
       fabric$v_to_slaves_1_wvalid,
       fabric$v_to_slaves_2_arlock,
       fabric$v_to_slaves_2_arready,
       fabric$v_to_slaves_2_arvalid,
       fabric$v_to_slaves_2_awlock,
       fabric$v_to_slaves_2_awready,
       fabric$v_to_slaves_2_awvalid,
       fabric$v_to_slaves_2_bready,
       fabric$v_to_slaves_2_bvalid,
       fabric$v_to_slaves_2_rlast,
       fabric$v_to_slaves_2_rready,
       fabric$v_to_slaves_2_rvalid,
       fabric$v_to_slaves_2_wlast,
       fabric$v_to_slaves_2_wready,
       fabric$v_to_slaves_2_wvalid;

  // ports of submodule mcu
  wire [31 : 0] mcu$master1_HADDR,
		mcu$master1_HRDATA,
		mcu$master1_HWDATA,
		mcu$mv_tohost_value,
		mcu$set_watch_tohost_tohost_addr;
  wire [3 : 0] mcu$master1_HPROT;
  wire [2 : 0] mcu$master1_HBURST, mcu$master1_HSIZE;
  wire [1 : 0] mcu$master1_HTRANS, mcu$set_verbosity_verbosity;
  wire mcu$EN_set_verbosity,
       mcu$EN_set_watch_tohost,
       mcu$RDY_mv_tohost_value,
       mcu$RDY_set_watch_tohost,
       mcu$ext_interrupt,
       mcu$master1_HMASTLOCK,
       mcu$master1_HREADY,
       mcu$master1_HRESP,
       mcu$master1_HWRITE,
       mcu$set_watch_tohost_watch_tohost,
       mcu$sw_interrupt,
       mcu$timer_interrupt;

  // ports of submodule plic
  wire [31 : 0] plic$axi4_araddr,
		plic$axi4_awaddr,
		plic$axi4_rdata,
		plic$axi4_wdata;
  wire [7 : 0] plic$axi4_arlen, plic$axi4_awlen;
  wire [3 : 0] plic$axi4_arcache,
	       plic$axi4_arid,
	       plic$axi4_arqos,
	       plic$axi4_arregion,
	       plic$axi4_awcache,
	       plic$axi4_awid,
	       plic$axi4_awqos,
	       plic$axi4_awregion,
	       plic$axi4_bid,
	       plic$axi4_rid,
	       plic$axi4_wstrb;
  wire [2 : 0] plic$axi4_arprot,
	       plic$axi4_arsize,
	       plic$axi4_awprot,
	       plic$axi4_awsize;
  wire [1 : 0] plic$axi4_arburst,
	       plic$axi4_awburst,
	       plic$axi4_bresp,
	       plic$axi4_rresp;
  wire plic$axi4_arlock,
       plic$axi4_arready,
       plic$axi4_arvalid,
       plic$axi4_awlock,
       plic$axi4_awready,
       plic$axi4_awvalid,
       plic$axi4_bready,
       plic$axi4_bvalid,
       plic$axi4_rlast,
       plic$axi4_rready,
       plic$axi4_rvalid,
       plic$axi4_wlast,
       plic$axi4_wready,
       plic$axi4_wvalid,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip;

  // ports of submodule soc_map
  wire [31 : 0] soc_map$m_uart_addr_base, soc_map$m_uart_addr_lim;

  // ports of submodule uart
  wire [31 : 0] uart$axi4_araddr,
		uart$axi4_awaddr,
		uart$axi4_rdata,
		uart$axi4_wdata,
		uart$set_addr_map_addr_base,
		uart$set_addr_map_addr_lim;
  wire [7 : 0] uart$axi4_arlen,
	       uart$axi4_awlen,
	       uart$get_to_console_get,
	       uart$put_from_console_put;
  wire [3 : 0] uart$axi4_arcache,
	       uart$axi4_arid,
	       uart$axi4_arqos,
	       uart$axi4_arregion,
	       uart$axi4_awcache,
	       uart$axi4_awid,
	       uart$axi4_awqos,
	       uart$axi4_awregion,
	       uart$axi4_bid,
	       uart$axi4_rid,
	       uart$axi4_wstrb;
  wire [2 : 0] uart$axi4_arprot,
	       uart$axi4_arsize,
	       uart$axi4_awprot,
	       uart$axi4_awsize;
  wire [1 : 0] uart$axi4_arburst,
	       uart$axi4_awburst,
	       uart$axi4_bresp,
	       uart$axi4_rresp;
  wire uart$EN_get_to_console_get,
       uart$EN_put_from_console_put,
       uart$EN_server_reset_request_put,
       uart$EN_server_reset_response_get,
       uart$EN_set_addr_map,
       uart$RDY_get_to_console_get,
       uart$RDY_put_from_console_put,
       uart$RDY_server_reset_request_put,
       uart$axi4_arlock,
       uart$axi4_arready,
       uart$axi4_arvalid,
       uart$axi4_awlock,
       uart$axi4_awready,
       uart$axi4_awvalid,
       uart$axi4_bready,
       uart$axi4_bvalid,
       uart$axi4_rlast,
       uart$axi4_rready,
       uart$axi4_rvalid,
       uart$axi4_wlast,
       uart$axi4_wready,
       uart$axi4_wvalid,
       uart$intr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ahbl_decoder,
       CAN_FIRE_RL_rl_connect_clint_sint,
       CAN_FIRE_RL_rl_connect_clint_tint,
       CAN_FIRE_RL_rl_connect_haddr,
       CAN_FIRE_RL_rl_connect_hburst,
       CAN_FIRE_RL_rl_connect_hmastlock,
       CAN_FIRE_RL_rl_connect_hprot,
       CAN_FIRE_RL_rl_connect_hrdata,
       CAN_FIRE_RL_rl_connect_hready,
       CAN_FIRE_RL_rl_connect_hresp,
       CAN_FIRE_RL_rl_connect_hsize,
       CAN_FIRE_RL_rl_connect_htrans,
       CAN_FIRE_RL_rl_connect_hwdata,
       CAN_FIRE_RL_rl_connect_hwrite,
       CAN_FIRE_RL_rl_connect_plic_src,
       CAN_FIRE_RL_rl_connect_plic_trgt,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_addr_channel_2,
       CAN_FIRE_RL_rl_rd_addr_channel_3,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel_2,
       CAN_FIRE_RL_rl_rd_data_channel_3,
       CAN_FIRE_RL_rl_reset_complete_initial,
       CAN_FIRE_RL_rl_reset_start_initial,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel_2,
       CAN_FIRE_RL_rl_wr_addr_channel_3,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel_2,
       CAN_FIRE_RL_rl_wr_data_channel_3,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel_2,
       CAN_FIRE_RL_rl_wr_response_channel_3,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_RL_rl_ahbl_decoder,
       WILL_FIRE_RL_rl_connect_clint_sint,
       WILL_FIRE_RL_rl_connect_clint_tint,
       WILL_FIRE_RL_rl_connect_haddr,
       WILL_FIRE_RL_rl_connect_hburst,
       WILL_FIRE_RL_rl_connect_hmastlock,
       WILL_FIRE_RL_rl_connect_hprot,
       WILL_FIRE_RL_rl_connect_hrdata,
       WILL_FIRE_RL_rl_connect_hready,
       WILL_FIRE_RL_rl_connect_hresp,
       WILL_FIRE_RL_rl_connect_hsize,
       WILL_FIRE_RL_rl_connect_htrans,
       WILL_FIRE_RL_rl_connect_hwdata,
       WILL_FIRE_RL_rl_connect_hwrite,
       WILL_FIRE_RL_rl_connect_plic_src,
       WILL_FIRE_RL_rl_connect_plic_trgt,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_addr_channel_2,
       WILL_FIRE_RL_rl_rd_addr_channel_3,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel_2,
       WILL_FIRE_RL_rl_rd_data_channel_3,
       WILL_FIRE_RL_rl_reset_complete_initial,
       WILL_FIRE_RL_rl_reset_start_initial,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel_2,
       WILL_FIRE_RL_rl_wr_addr_channel_3,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel_2,
       WILL_FIRE_RL_rl_wr_data_channel_3,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel_2,
       WILL_FIRE_RL_rl_wr_response_channel_3,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost;

  // inputs to muxes for submodule ports
  wire MUX_rg_state$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h7389;
  reg [31 : 0] v__h7493;
  reg [31 : 0] v__h7383;
  reg [31 : 0] v__h7487;
  // synopsys translate_on

  // value method gpios
  assign gpios = 16'b0 ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = uart$get_to_console_get ;
  assign RDY_get_to_console_get = uart$RDY_get_to_console_get ;
  assign CAN_FIRE_get_to_console_get = uart$RDY_get_to_console_get ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = uart$RDY_put_from_console_put ;
  assign CAN_FIRE_put_from_console_put = uart$RDY_put_from_console_put ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = mcu$RDY_set_watch_tohost ;
  assign CAN_FIRE_set_watch_tohost = mcu$RDY_set_watch_tohost ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = mcu$mv_tohost_value ;
  assign RDY_mv_tohost_value = mcu$RDY_mv_tohost_value ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule ahbl_axi4_bridge
  // An AHBL-AXI4 bridge to integrate the MCU to an AXI4 based SoC
  mkAHBL_Target_AXI4_Initiator ahbl_axi4_bridge(.CLK(CLK),
						.RST_N(RST_N),
						.ahbl_target_HADDR(ahbl_axi4_bridge$ahbl_target_HADDR),
						.ahbl_target_HBURST(ahbl_axi4_bridge$ahbl_target_HBURST),
						.ahbl_target_HMASTLOCK(ahbl_axi4_bridge$ahbl_target_HMASTLOCK),
						.ahbl_target_HPROT(ahbl_axi4_bridge$ahbl_target_HPROT),
						.ahbl_target_HREADY(ahbl_axi4_bridge$ahbl_target_HREADY),
						.ahbl_target_HSEL(ahbl_axi4_bridge$ahbl_target_HSEL),
						.ahbl_target_HSIZE(ahbl_axi4_bridge$ahbl_target_HSIZE),
						.ahbl_target_HTRANS(ahbl_axi4_bridge$ahbl_target_HTRANS),
						.ahbl_target_HWDATA(ahbl_axi4_bridge$ahbl_target_HWDATA),
						.ahbl_target_HWRITE(ahbl_axi4_bridge$ahbl_target_HWRITE),
						.axi4_initiator_arready(ahbl_axi4_bridge$axi4_initiator_arready),
						.axi4_initiator_awready(ahbl_axi4_bridge$axi4_initiator_awready),
						.axi4_initiator_bid(ahbl_axi4_bridge$axi4_initiator_bid),
						.axi4_initiator_bresp(ahbl_axi4_bridge$axi4_initiator_bresp),
						.axi4_initiator_bvalid(ahbl_axi4_bridge$axi4_initiator_bvalid),
						.axi4_initiator_rdata(ahbl_axi4_bridge$axi4_initiator_rdata),
						.axi4_initiator_rid(ahbl_axi4_bridge$axi4_initiator_rid),
						.axi4_initiator_rlast(ahbl_axi4_bridge$axi4_initiator_rlast),
						.axi4_initiator_rresp(ahbl_axi4_bridge$axi4_initiator_rresp),
						.axi4_initiator_rvalid(ahbl_axi4_bridge$axi4_initiator_rvalid),
						.axi4_initiator_wready(ahbl_axi4_bridge$axi4_initiator_wready),
						.EN_reset(ahbl_axi4_bridge$EN_reset),
						.RDY_reset(),
						.ahbl_target_HRDATA(ahbl_axi4_bridge$ahbl_target_HRDATA),
						.ahbl_target_HREADYOUT(ahbl_axi4_bridge$ahbl_target_HREADYOUT),
						.ahbl_target_HRESP(ahbl_axi4_bridge$ahbl_target_HRESP),
						.axi4_initiator_awvalid(ahbl_axi4_bridge$axi4_initiator_awvalid),
						.axi4_initiator_awid(ahbl_axi4_bridge$axi4_initiator_awid),
						.axi4_initiator_awaddr(ahbl_axi4_bridge$axi4_initiator_awaddr),
						.axi4_initiator_awlen(ahbl_axi4_bridge$axi4_initiator_awlen),
						.axi4_initiator_awsize(ahbl_axi4_bridge$axi4_initiator_awsize),
						.axi4_initiator_awburst(ahbl_axi4_bridge$axi4_initiator_awburst),
						.axi4_initiator_awlock(ahbl_axi4_bridge$axi4_initiator_awlock),
						.axi4_initiator_awcache(ahbl_axi4_bridge$axi4_initiator_awcache),
						.axi4_initiator_awprot(ahbl_axi4_bridge$axi4_initiator_awprot),
						.axi4_initiator_awqos(ahbl_axi4_bridge$axi4_initiator_awqos),
						.axi4_initiator_awregion(ahbl_axi4_bridge$axi4_initiator_awregion),
						.axi4_initiator_wvalid(ahbl_axi4_bridge$axi4_initiator_wvalid),
						.axi4_initiator_wdata(ahbl_axi4_bridge$axi4_initiator_wdata),
						.axi4_initiator_wstrb(ahbl_axi4_bridge$axi4_initiator_wstrb),
						.axi4_initiator_wlast(ahbl_axi4_bridge$axi4_initiator_wlast),
						.axi4_initiator_bready(ahbl_axi4_bridge$axi4_initiator_bready),
						.axi4_initiator_arvalid(ahbl_axi4_bridge$axi4_initiator_arvalid),
						.axi4_initiator_arid(ahbl_axi4_bridge$axi4_initiator_arid),
						.axi4_initiator_araddr(ahbl_axi4_bridge$axi4_initiator_araddr),
						.axi4_initiator_arlen(ahbl_axi4_bridge$axi4_initiator_arlen),
						.axi4_initiator_arsize(ahbl_axi4_bridge$axi4_initiator_arsize),
						.axi4_initiator_arburst(ahbl_axi4_bridge$axi4_initiator_arburst),
						.axi4_initiator_arlock(ahbl_axi4_bridge$axi4_initiator_arlock),
						.axi4_initiator_arcache(ahbl_axi4_bridge$axi4_initiator_arcache),
						.axi4_initiator_arprot(ahbl_axi4_bridge$axi4_initiator_arprot),
						.axi4_initiator_arqos(ahbl_axi4_bridge$axi4_initiator_arqos),
						.axi4_initiator_arregion(ahbl_axi4_bridge$axi4_initiator_arregion),
						.axi4_initiator_rready(ahbl_axi4_bridge$axi4_initiator_rready));

  // submodule clint
  // The Core Level Interrupt Device (CLINT)
  mkCLINT_AXI4 clint(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_araddr(clint$axi4_araddr),
		     .axi4_arburst(clint$axi4_arburst),
		     .axi4_arcache(clint$axi4_arcache),
		     .axi4_arid(clint$axi4_arid),
		     .axi4_arlen(clint$axi4_arlen),
		     .axi4_arlock(clint$axi4_arlock),
		     .axi4_arprot(clint$axi4_arprot),
		     .axi4_arqos(clint$axi4_arqos),
		     .axi4_arregion(clint$axi4_arregion),
		     .axi4_arsize(clint$axi4_arsize),
		     .axi4_arvalid(clint$axi4_arvalid),
		     .axi4_awaddr(clint$axi4_awaddr),
		     .axi4_awburst(clint$axi4_awburst),
		     .axi4_awcache(clint$axi4_awcache),
		     .axi4_awid(clint$axi4_awid),
		     .axi4_awlen(clint$axi4_awlen),
		     .axi4_awlock(clint$axi4_awlock),
		     .axi4_awprot(clint$axi4_awprot),
		     .axi4_awqos(clint$axi4_awqos),
		     .axi4_awregion(clint$axi4_awregion),
		     .axi4_awsize(clint$axi4_awsize),
		     .axi4_awvalid(clint$axi4_awvalid),
		     .axi4_bready(clint$axi4_bready),
		     .axi4_rready(clint$axi4_rready),
		     .axi4_wdata(clint$axi4_wdata),
		     .axi4_wlast(clint$axi4_wlast),
		     .axi4_wstrb(clint$axi4_wstrb),
		     .axi4_wvalid(clint$axi4_wvalid),
		     .EN_get_timer_interrupt_req_get(clint$EN_get_timer_interrupt_req_get),
		     .EN_get_sw_interrupt_req_get(clint$EN_get_sw_interrupt_req_get),
		     .axi4_awready(clint$axi4_awready),
		     .axi4_wready(clint$axi4_wready),
		     .axi4_bvalid(clint$axi4_bvalid),
		     .axi4_bid(clint$axi4_bid),
		     .axi4_bresp(clint$axi4_bresp),
		     .axi4_arready(clint$axi4_arready),
		     .axi4_rvalid(clint$axi4_rvalid),
		     .axi4_rid(clint$axi4_rid),
		     .axi4_rdata(clint$axi4_rdata),
		     .axi4_rresp(clint$axi4_rresp),
		     .axi4_rlast(clint$axi4_rlast),
		     .get_timer_interrupt_req_get(clint$get_timer_interrupt_req_get),
		     .RDY_get_timer_interrupt_req_get(clint$RDY_get_timer_interrupt_req_get),
		     .get_sw_interrupt_req_get(clint$get_sw_interrupt_req_get),
		     .RDY_get_sw_interrupt_req_get(clint$RDY_get_sw_interrupt_req_get));

  // submodule fabric
  // The AXI4 SoC Fabric
  mkFabric_AXI4 fabric(.CLK(CLK),
		       .RST_N(RST_N),
		       .v_from_masters_0_araddr(fabric$v_from_masters_0_araddr),
		       .v_from_masters_0_arburst(fabric$v_from_masters_0_arburst),
		       .v_from_masters_0_arcache(fabric$v_from_masters_0_arcache),
		       .v_from_masters_0_arid(fabric$v_from_masters_0_arid),
		       .v_from_masters_0_arlen(fabric$v_from_masters_0_arlen),
		       .v_from_masters_0_arlock(fabric$v_from_masters_0_arlock),
		       .v_from_masters_0_arprot(fabric$v_from_masters_0_arprot),
		       .v_from_masters_0_arqos(fabric$v_from_masters_0_arqos),
		       .v_from_masters_0_arregion(fabric$v_from_masters_0_arregion),
		       .v_from_masters_0_arsize(fabric$v_from_masters_0_arsize),
		       .v_from_masters_0_arvalid(fabric$v_from_masters_0_arvalid),
		       .v_from_masters_0_awaddr(fabric$v_from_masters_0_awaddr),
		       .v_from_masters_0_awburst(fabric$v_from_masters_0_awburst),
		       .v_from_masters_0_awcache(fabric$v_from_masters_0_awcache),
		       .v_from_masters_0_awid(fabric$v_from_masters_0_awid),
		       .v_from_masters_0_awlen(fabric$v_from_masters_0_awlen),
		       .v_from_masters_0_awlock(fabric$v_from_masters_0_awlock),
		       .v_from_masters_0_awprot(fabric$v_from_masters_0_awprot),
		       .v_from_masters_0_awqos(fabric$v_from_masters_0_awqos),
		       .v_from_masters_0_awregion(fabric$v_from_masters_0_awregion),
		       .v_from_masters_0_awsize(fabric$v_from_masters_0_awsize),
		       .v_from_masters_0_awvalid(fabric$v_from_masters_0_awvalid),
		       .v_from_masters_0_bready(fabric$v_from_masters_0_bready),
		       .v_from_masters_0_rready(fabric$v_from_masters_0_rready),
		       .v_from_masters_0_wdata(fabric$v_from_masters_0_wdata),
		       .v_from_masters_0_wlast(fabric$v_from_masters_0_wlast),
		       .v_from_masters_0_wstrb(fabric$v_from_masters_0_wstrb),
		       .v_from_masters_0_wvalid(fabric$v_from_masters_0_wvalid),
		       .v_to_slaves_0_arready(fabric$v_to_slaves_0_arready),
		       .v_to_slaves_0_awready(fabric$v_to_slaves_0_awready),
		       .v_to_slaves_0_bid(fabric$v_to_slaves_0_bid),
		       .v_to_slaves_0_bresp(fabric$v_to_slaves_0_bresp),
		       .v_to_slaves_0_bvalid(fabric$v_to_slaves_0_bvalid),
		       .v_to_slaves_0_rdata(fabric$v_to_slaves_0_rdata),
		       .v_to_slaves_0_rid(fabric$v_to_slaves_0_rid),
		       .v_to_slaves_0_rlast(fabric$v_to_slaves_0_rlast),
		       .v_to_slaves_0_rresp(fabric$v_to_slaves_0_rresp),
		       .v_to_slaves_0_rvalid(fabric$v_to_slaves_0_rvalid),
		       .v_to_slaves_0_wready(fabric$v_to_slaves_0_wready),
		       .v_to_slaves_1_arready(fabric$v_to_slaves_1_arready),
		       .v_to_slaves_1_awready(fabric$v_to_slaves_1_awready),
		       .v_to_slaves_1_bid(fabric$v_to_slaves_1_bid),
		       .v_to_slaves_1_bresp(fabric$v_to_slaves_1_bresp),
		       .v_to_slaves_1_bvalid(fabric$v_to_slaves_1_bvalid),
		       .v_to_slaves_1_rdata(fabric$v_to_slaves_1_rdata),
		       .v_to_slaves_1_rid(fabric$v_to_slaves_1_rid),
		       .v_to_slaves_1_rlast(fabric$v_to_slaves_1_rlast),
		       .v_to_slaves_1_rresp(fabric$v_to_slaves_1_rresp),
		       .v_to_slaves_1_rvalid(fabric$v_to_slaves_1_rvalid),
		       .v_to_slaves_1_wready(fabric$v_to_slaves_1_wready),
		       .v_to_slaves_2_arready(fabric$v_to_slaves_2_arready),
		       .v_to_slaves_2_awready(fabric$v_to_slaves_2_awready),
		       .v_to_slaves_2_bid(fabric$v_to_slaves_2_bid),
		       .v_to_slaves_2_bresp(fabric$v_to_slaves_2_bresp),
		       .v_to_slaves_2_bvalid(fabric$v_to_slaves_2_bvalid),
		       .v_to_slaves_2_rdata(fabric$v_to_slaves_2_rdata),
		       .v_to_slaves_2_rid(fabric$v_to_slaves_2_rid),
		       .v_to_slaves_2_rlast(fabric$v_to_slaves_2_rlast),
		       .v_to_slaves_2_rresp(fabric$v_to_slaves_2_rresp),
		       .v_to_slaves_2_rvalid(fabric$v_to_slaves_2_rvalid),
		       .v_to_slaves_2_wready(fabric$v_to_slaves_2_wready),
		       .EN_reset(fabric$EN_reset),
		       .RDY_reset(),
		       .v_from_masters_0_awready(fabric$v_from_masters_0_awready),
		       .v_from_masters_0_wready(fabric$v_from_masters_0_wready),
		       .v_from_masters_0_bvalid(fabric$v_from_masters_0_bvalid),
		       .v_from_masters_0_bid(fabric$v_from_masters_0_bid),
		       .v_from_masters_0_bresp(fabric$v_from_masters_0_bresp),
		       .v_from_masters_0_arready(fabric$v_from_masters_0_arready),
		       .v_from_masters_0_rvalid(fabric$v_from_masters_0_rvalid),
		       .v_from_masters_0_rid(fabric$v_from_masters_0_rid),
		       .v_from_masters_0_rdata(fabric$v_from_masters_0_rdata),
		       .v_from_masters_0_rresp(fabric$v_from_masters_0_rresp),
		       .v_from_masters_0_rlast(fabric$v_from_masters_0_rlast),
		       .v_to_slaves_0_awvalid(fabric$v_to_slaves_0_awvalid),
		       .v_to_slaves_0_awid(fabric$v_to_slaves_0_awid),
		       .v_to_slaves_0_awaddr(fabric$v_to_slaves_0_awaddr),
		       .v_to_slaves_0_awlen(fabric$v_to_slaves_0_awlen),
		       .v_to_slaves_0_awsize(fabric$v_to_slaves_0_awsize),
		       .v_to_slaves_0_awburst(fabric$v_to_slaves_0_awburst),
		       .v_to_slaves_0_awlock(fabric$v_to_slaves_0_awlock),
		       .v_to_slaves_0_awcache(fabric$v_to_slaves_0_awcache),
		       .v_to_slaves_0_awprot(fabric$v_to_slaves_0_awprot),
		       .v_to_slaves_0_awqos(fabric$v_to_slaves_0_awqos),
		       .v_to_slaves_0_awregion(fabric$v_to_slaves_0_awregion),
		       .v_to_slaves_0_wvalid(fabric$v_to_slaves_0_wvalid),
		       .v_to_slaves_0_wdata(fabric$v_to_slaves_0_wdata),
		       .v_to_slaves_0_wstrb(fabric$v_to_slaves_0_wstrb),
		       .v_to_slaves_0_wlast(fabric$v_to_slaves_0_wlast),
		       .v_to_slaves_0_bready(fabric$v_to_slaves_0_bready),
		       .v_to_slaves_0_arvalid(fabric$v_to_slaves_0_arvalid),
		       .v_to_slaves_0_arid(fabric$v_to_slaves_0_arid),
		       .v_to_slaves_0_araddr(fabric$v_to_slaves_0_araddr),
		       .v_to_slaves_0_arlen(fabric$v_to_slaves_0_arlen),
		       .v_to_slaves_0_arsize(fabric$v_to_slaves_0_arsize),
		       .v_to_slaves_0_arburst(fabric$v_to_slaves_0_arburst),
		       .v_to_slaves_0_arlock(fabric$v_to_slaves_0_arlock),
		       .v_to_slaves_0_arcache(fabric$v_to_slaves_0_arcache),
		       .v_to_slaves_0_arprot(fabric$v_to_slaves_0_arprot),
		       .v_to_slaves_0_arqos(fabric$v_to_slaves_0_arqos),
		       .v_to_slaves_0_arregion(fabric$v_to_slaves_0_arregion),
		       .v_to_slaves_0_rready(fabric$v_to_slaves_0_rready),
		       .v_to_slaves_1_awvalid(fabric$v_to_slaves_1_awvalid),
		       .v_to_slaves_1_awid(fabric$v_to_slaves_1_awid),
		       .v_to_slaves_1_awaddr(fabric$v_to_slaves_1_awaddr),
		       .v_to_slaves_1_awlen(fabric$v_to_slaves_1_awlen),
		       .v_to_slaves_1_awsize(fabric$v_to_slaves_1_awsize),
		       .v_to_slaves_1_awburst(fabric$v_to_slaves_1_awburst),
		       .v_to_slaves_1_awlock(fabric$v_to_slaves_1_awlock),
		       .v_to_slaves_1_awcache(fabric$v_to_slaves_1_awcache),
		       .v_to_slaves_1_awprot(fabric$v_to_slaves_1_awprot),
		       .v_to_slaves_1_awqos(fabric$v_to_slaves_1_awqos),
		       .v_to_slaves_1_awregion(fabric$v_to_slaves_1_awregion),
		       .v_to_slaves_1_wvalid(fabric$v_to_slaves_1_wvalid),
		       .v_to_slaves_1_wdata(fabric$v_to_slaves_1_wdata),
		       .v_to_slaves_1_wstrb(fabric$v_to_slaves_1_wstrb),
		       .v_to_slaves_1_wlast(fabric$v_to_slaves_1_wlast),
		       .v_to_slaves_1_bready(fabric$v_to_slaves_1_bready),
		       .v_to_slaves_1_arvalid(fabric$v_to_slaves_1_arvalid),
		       .v_to_slaves_1_arid(fabric$v_to_slaves_1_arid),
		       .v_to_slaves_1_araddr(fabric$v_to_slaves_1_araddr),
		       .v_to_slaves_1_arlen(fabric$v_to_slaves_1_arlen),
		       .v_to_slaves_1_arsize(fabric$v_to_slaves_1_arsize),
		       .v_to_slaves_1_arburst(fabric$v_to_slaves_1_arburst),
		       .v_to_slaves_1_arlock(fabric$v_to_slaves_1_arlock),
		       .v_to_slaves_1_arcache(fabric$v_to_slaves_1_arcache),
		       .v_to_slaves_1_arprot(fabric$v_to_slaves_1_arprot),
		       .v_to_slaves_1_arqos(fabric$v_to_slaves_1_arqos),
		       .v_to_slaves_1_arregion(fabric$v_to_slaves_1_arregion),
		       .v_to_slaves_1_rready(fabric$v_to_slaves_1_rready),
		       .v_to_slaves_2_awvalid(fabric$v_to_slaves_2_awvalid),
		       .v_to_slaves_2_awid(fabric$v_to_slaves_2_awid),
		       .v_to_slaves_2_awaddr(fabric$v_to_slaves_2_awaddr),
		       .v_to_slaves_2_awlen(fabric$v_to_slaves_2_awlen),
		       .v_to_slaves_2_awsize(fabric$v_to_slaves_2_awsize),
		       .v_to_slaves_2_awburst(fabric$v_to_slaves_2_awburst),
		       .v_to_slaves_2_awlock(fabric$v_to_slaves_2_awlock),
		       .v_to_slaves_2_awcache(fabric$v_to_slaves_2_awcache),
		       .v_to_slaves_2_awprot(fabric$v_to_slaves_2_awprot),
		       .v_to_slaves_2_awqos(fabric$v_to_slaves_2_awqos),
		       .v_to_slaves_2_awregion(fabric$v_to_slaves_2_awregion),
		       .v_to_slaves_2_wvalid(fabric$v_to_slaves_2_wvalid),
		       .v_to_slaves_2_wdata(fabric$v_to_slaves_2_wdata),
		       .v_to_slaves_2_wstrb(fabric$v_to_slaves_2_wstrb),
		       .v_to_slaves_2_wlast(fabric$v_to_slaves_2_wlast),
		       .v_to_slaves_2_bready(fabric$v_to_slaves_2_bready),
		       .v_to_slaves_2_arvalid(fabric$v_to_slaves_2_arvalid),
		       .v_to_slaves_2_arid(fabric$v_to_slaves_2_arid),
		       .v_to_slaves_2_araddr(fabric$v_to_slaves_2_araddr),
		       .v_to_slaves_2_arlen(fabric$v_to_slaves_2_arlen),
		       .v_to_slaves_2_arsize(fabric$v_to_slaves_2_arsize),
		       .v_to_slaves_2_arburst(fabric$v_to_slaves_2_arburst),
		       .v_to_slaves_2_arlock(fabric$v_to_slaves_2_arlock),
		       .v_to_slaves_2_arcache(fabric$v_to_slaves_2_arcache),
		       .v_to_slaves_2_arprot(fabric$v_to_slaves_2_arprot),
		       .v_to_slaves_2_arqos(fabric$v_to_slaves_2_arqos),
		       .v_to_slaves_2_arregion(fabric$v_to_slaves_2_arregion),
		       .v_to_slaves_2_rready(fabric$v_to_slaves_2_rready));

  // submodule mcu
  // MCU Core
  mkMCUTop mcu(.CLK(CLK),
	       .RST_N(RST_N),
	       .ext_interrupt(mcu$ext_interrupt),
	       .master1_HRDATA(mcu$master1_HRDATA),
	       .master1_HREADY(mcu$master1_HREADY),
	       .master1_HRESP(mcu$master1_HRESP),
	       .set_verbosity_verbosity(mcu$set_verbosity_verbosity),
	       .set_watch_tohost_tohost_addr(mcu$set_watch_tohost_tohost_addr),
	       .set_watch_tohost_watch_tohost(mcu$set_watch_tohost_watch_tohost),
	       .sw_interrupt(mcu$sw_interrupt),
	       .timer_interrupt(mcu$timer_interrupt),
	       .EN_set_watch_tohost(mcu$EN_set_watch_tohost),
	       .EN_set_verbosity(mcu$EN_set_verbosity),
	       .master1_HADDR(mcu$master1_HADDR),
	       .master1_HBURST(mcu$master1_HBURST),
	       .master1_HMASTLOCK(mcu$master1_HMASTLOCK),
	       .master1_HPROT(mcu$master1_HPROT),
	       .master1_HSIZE(mcu$master1_HSIZE),
	       .master1_HTRANS(mcu$master1_HTRANS),
	       .master1_HWDATA(mcu$master1_HWDATA),
	       .master1_HWRITE(mcu$master1_HWRITE),
	       .RDY_set_watch_tohost(mcu$RDY_set_watch_tohost),
	       .mv_tohost_value(mcu$mv_tohost_value),
	       .RDY_mv_tohost_value(mcu$RDY_mv_tohost_value),
	       .RDY_set_verbosity());

  // submodule plic
  // The Platform Level Interrupt Controller (PLIC)
  mkPLIC_16_1_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_araddr(plic$axi4_araddr),
		     .axi4_arburst(plic$axi4_arburst),
		     .axi4_arcache(plic$axi4_arcache),
		     .axi4_arid(plic$axi4_arid),
		     .axi4_arlen(plic$axi4_arlen),
		     .axi4_arlock(plic$axi4_arlock),
		     .axi4_arprot(plic$axi4_arprot),
		     .axi4_arqos(plic$axi4_arqos),
		     .axi4_arregion(plic$axi4_arregion),
		     .axi4_arsize(plic$axi4_arsize),
		     .axi4_arvalid(plic$axi4_arvalid),
		     .axi4_awaddr(plic$axi4_awaddr),
		     .axi4_awburst(plic$axi4_awburst),
		     .axi4_awcache(plic$axi4_awcache),
		     .axi4_awid(plic$axi4_awid),
		     .axi4_awlen(plic$axi4_awlen),
		     .axi4_awlock(plic$axi4_awlock),
		     .axi4_awprot(plic$axi4_awprot),
		     .axi4_awqos(plic$axi4_awqos),
		     .axi4_awregion(plic$axi4_awregion),
		     .axi4_awsize(plic$axi4_awsize),
		     .axi4_awvalid(plic$axi4_awvalid),
		     .axi4_bready(plic$axi4_bready),
		     .axi4_rready(plic$axi4_rready),
		     .axi4_wdata(plic$axi4_wdata),
		     .axi4_wlast(plic$axi4_wlast),
		     .axi4_wstrb(plic$axi4_wstrb),
		     .axi4_wvalid(plic$axi4_wvalid),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .axi4_awready(plic$axi4_awready),
		     .axi4_wready(plic$axi4_wready),
		     .axi4_bvalid(plic$axi4_bvalid),
		     .axi4_bid(plic$axi4_bid),
		     .axi4_bresp(plic$axi4_bresp),
		     .axi4_arready(plic$axi4_arready),
		     .axi4_rvalid(plic$axi4_rvalid),
		     .axi4_rid(plic$axi4_rid),
		     .axi4_rdata(plic$axi4_rdata),
		     .axi4_rresp(plic$axi4_rresp),
		     .axi4_rlast(plic$axi4_rlast),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_gpio_addr_base(),
		    .m_gpio_addr_size(),
		    .m_gpio_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_clint_addr_base(),
		    .m_clint_addr_size(),
		    .m_clint_addr_lim(),
		    .m_uart_addr_base(soc_map$m_uart_addr_base),
		    .m_uart_addr_size(),
		    .m_uart_addr_lim(soc_map$m_uart_addr_lim));

  // submodule uart
  // A UART device for console IO
  mkUART uart(.CLK(CLK),
	      .RST_N(RST_N),
	      .axi4_araddr(uart$axi4_araddr),
	      .axi4_arburst(uart$axi4_arburst),
	      .axi4_arcache(uart$axi4_arcache),
	      .axi4_arid(uart$axi4_arid),
	      .axi4_arlen(uart$axi4_arlen),
	      .axi4_arlock(uart$axi4_arlock),
	      .axi4_arprot(uart$axi4_arprot),
	      .axi4_arqos(uart$axi4_arqos),
	      .axi4_arregion(uart$axi4_arregion),
	      .axi4_arsize(uart$axi4_arsize),
	      .axi4_arvalid(uart$axi4_arvalid),
	      .axi4_awaddr(uart$axi4_awaddr),
	      .axi4_awburst(uart$axi4_awburst),
	      .axi4_awcache(uart$axi4_awcache),
	      .axi4_awid(uart$axi4_awid),
	      .axi4_awlen(uart$axi4_awlen),
	      .axi4_awlock(uart$axi4_awlock),
	      .axi4_awprot(uart$axi4_awprot),
	      .axi4_awqos(uart$axi4_awqos),
	      .axi4_awregion(uart$axi4_awregion),
	      .axi4_awsize(uart$axi4_awsize),
	      .axi4_awvalid(uart$axi4_awvalid),
	      .axi4_bready(uart$axi4_bready),
	      .axi4_rready(uart$axi4_rready),
	      .axi4_wdata(uart$axi4_wdata),
	      .axi4_wlast(uart$axi4_wlast),
	      .axi4_wstrb(uart$axi4_wstrb),
	      .axi4_wvalid(uart$axi4_wvalid),
	      .put_from_console_put(uart$put_from_console_put),
	      .set_addr_map_addr_base(uart$set_addr_map_addr_base),
	      .set_addr_map_addr_lim(uart$set_addr_map_addr_lim),
	      .EN_server_reset_request_put(uart$EN_server_reset_request_put),
	      .EN_server_reset_response_get(uart$EN_server_reset_response_get),
	      .EN_set_addr_map(uart$EN_set_addr_map),
	      .EN_get_to_console_get(uart$EN_get_to_console_get),
	      .EN_put_from_console_put(uart$EN_put_from_console_put),
	      .RDY_server_reset_request_put(uart$RDY_server_reset_request_put),
	      .RDY_server_reset_response_get(),
	      .RDY_set_addr_map(),
	      .axi4_awready(uart$axi4_awready),
	      .axi4_wready(uart$axi4_wready),
	      .axi4_bvalid(uart$axi4_bvalid),
	      .axi4_bid(uart$axi4_bid),
	      .axi4_bresp(uart$axi4_bresp),
	      .axi4_arready(uart$axi4_arready),
	      .axi4_rvalid(uart$axi4_rvalid),
	      .axi4_rid(uart$axi4_rid),
	      .axi4_rdata(uart$axi4_rdata),
	      .axi4_rresp(uart$axi4_rresp),
	      .axi4_rlast(uart$axi4_rlast),
	      .get_to_console_get(uart$get_to_console_get),
	      .RDY_get_to_console_get(uart$RDY_get_to_console_get),
	      .RDY_put_from_console_put(uart$RDY_put_from_console_put),
	      .intr(uart$intr));

  // rule RL_rl_connect_haddr
  assign CAN_FIRE_RL_rl_connect_haddr = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_haddr = 1'd1 ;

  // rule RL_rl_connect_hburst
  assign CAN_FIRE_RL_rl_connect_hburst = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hburst = 1'd1 ;

  // rule RL_rl_connect_hmastlock
  assign CAN_FIRE_RL_rl_connect_hmastlock = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hmastlock = 1'd1 ;

  // rule RL_rl_connect_hprot
  assign CAN_FIRE_RL_rl_connect_hprot = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hprot = 1'd1 ;

  // rule RL_rl_connect_hsize
  assign CAN_FIRE_RL_rl_connect_hsize = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hsize = 1'd1 ;

  // rule RL_rl_connect_htrans
  assign CAN_FIRE_RL_rl_connect_htrans = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_htrans = 1'd1 ;

  // rule RL_rl_connect_hwdata
  assign CAN_FIRE_RL_rl_connect_hwdata = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hwdata = 1'd1 ;

  // rule RL_rl_connect_hwrite
  assign CAN_FIRE_RL_rl_connect_hwrite = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hwrite = 1'd1 ;

  // rule RL_rl_connect_hrdata
  assign CAN_FIRE_RL_rl_connect_hrdata = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hrdata = 1'd1 ;

  // rule RL_rl_connect_hready
  assign CAN_FIRE_RL_rl_connect_hready = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hready = 1'd1 ;

  // rule RL_rl_connect_hresp
  assign CAN_FIRE_RL_rl_connect_hresp = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_hresp = 1'd1 ;

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_2
  assign CAN_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;

  // rule RL_rl_wr_data_channel_2
  assign CAN_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_response_channel_2
  assign CAN_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_2
  assign CAN_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;

  // rule RL_rl_rd_data_channel_2
  assign CAN_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_3
  assign CAN_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;

  // rule RL_rl_wr_data_channel_3
  assign CAN_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_response_channel_3
  assign CAN_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_3
  assign CAN_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;

  // rule RL_rl_rd_data_channel_3
  assign CAN_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;

  // rule RL_rl_ahbl_decoder
  assign CAN_FIRE_RL_rl_ahbl_decoder = 1'd1 ;
  assign WILL_FIRE_RL_rl_ahbl_decoder = 1'd1 ;

  // rule RL_rl_connect_plic_trgt
  assign CAN_FIRE_RL_rl_connect_plic_trgt = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_plic_trgt = 1'd1 ;

  // rule RL_rl_connect_plic_src
  assign CAN_FIRE_RL_rl_connect_plic_src = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_plic_src = 1'd1 ;

  // rule RL_rl_connect_clint_sint
  assign CAN_FIRE_RL_rl_connect_clint_sint =
	     clint$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_connect_clint_sint =
	     clint$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_connect_clint_tint
  assign CAN_FIRE_RL_rl_connect_clint_tint =
	     clint$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_connect_clint_tint =
	     clint$RDY_get_timer_interrupt_req_get ;

  // rule RL_rl_reset_start_initial
  assign CAN_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_reset_complete_initial
  assign CAN_FIRE_RL_rl_reset_complete_initial = rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete_initial = rg_state == 2'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_state$write_1__SEL_1 =
	     uart$RDY_server_reset_request_put && rg_state == 2'd0 ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_reset_start_initial ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_start_initial ||
	     WILL_FIRE_RL_rl_reset_complete_initial ;

  // submodule ahbl_axi4_bridge
  assign ahbl_axi4_bridge$ahbl_target_HADDR = mcu$master1_HADDR ;
  assign ahbl_axi4_bridge$ahbl_target_HBURST = mcu$master1_HBURST ;
  assign ahbl_axi4_bridge$ahbl_target_HMASTLOCK = mcu$master1_HMASTLOCK ;
  assign ahbl_axi4_bridge$ahbl_target_HPROT = mcu$master1_HPROT ;
  assign ahbl_axi4_bridge$ahbl_target_HREADY = 1'd1 ;
  assign ahbl_axi4_bridge$ahbl_target_HSEL = 1'd1 ;
  assign ahbl_axi4_bridge$ahbl_target_HSIZE = mcu$master1_HSIZE ;
  assign ahbl_axi4_bridge$ahbl_target_HTRANS = mcu$master1_HTRANS ;
  assign ahbl_axi4_bridge$ahbl_target_HWDATA = mcu$master1_HWDATA ;
  assign ahbl_axi4_bridge$ahbl_target_HWRITE = mcu$master1_HWRITE ;
  assign ahbl_axi4_bridge$axi4_initiator_arready =
	     fabric$v_from_masters_0_arready ;
  assign ahbl_axi4_bridge$axi4_initiator_awready =
	     fabric$v_from_masters_0_awready ;
  assign ahbl_axi4_bridge$axi4_initiator_bid = fabric$v_from_masters_0_bid ;
  assign ahbl_axi4_bridge$axi4_initiator_bresp =
	     fabric$v_from_masters_0_bresp ;
  assign ahbl_axi4_bridge$axi4_initiator_bvalid =
	     fabric$v_from_masters_0_bvalid ;
  assign ahbl_axi4_bridge$axi4_initiator_rdata =
	     fabric$v_from_masters_0_rdata ;
  assign ahbl_axi4_bridge$axi4_initiator_rid = fabric$v_from_masters_0_rid ;
  assign ahbl_axi4_bridge$axi4_initiator_rlast =
	     fabric$v_from_masters_0_rlast ;
  assign ahbl_axi4_bridge$axi4_initiator_rresp =
	     fabric$v_from_masters_0_rresp ;
  assign ahbl_axi4_bridge$axi4_initiator_rvalid =
	     fabric$v_from_masters_0_rvalid ;
  assign ahbl_axi4_bridge$axi4_initiator_wready =
	     fabric$v_from_masters_0_wready ;
  assign ahbl_axi4_bridge$EN_reset = 1'b0 ;

  // submodule clint
  assign clint$axi4_araddr = fabric$v_to_slaves_2_araddr ;
  assign clint$axi4_arburst = fabric$v_to_slaves_2_arburst ;
  assign clint$axi4_arcache = fabric$v_to_slaves_2_arcache ;
  assign clint$axi4_arid = fabric$v_to_slaves_2_arid ;
  assign clint$axi4_arlen = fabric$v_to_slaves_2_arlen ;
  assign clint$axi4_arlock = fabric$v_to_slaves_2_arlock ;
  assign clint$axi4_arprot = fabric$v_to_slaves_2_arprot ;
  assign clint$axi4_arqos = fabric$v_to_slaves_2_arqos ;
  assign clint$axi4_arregion = fabric$v_to_slaves_2_arregion ;
  assign clint$axi4_arsize = fabric$v_to_slaves_2_arsize ;
  assign clint$axi4_arvalid = fabric$v_to_slaves_2_arvalid ;
  assign clint$axi4_awaddr = fabric$v_to_slaves_2_awaddr ;
  assign clint$axi4_awburst = fabric$v_to_slaves_2_awburst ;
  assign clint$axi4_awcache = fabric$v_to_slaves_2_awcache ;
  assign clint$axi4_awid = fabric$v_to_slaves_2_awid ;
  assign clint$axi4_awlen = fabric$v_to_slaves_2_awlen ;
  assign clint$axi4_awlock = fabric$v_to_slaves_2_awlock ;
  assign clint$axi4_awprot = fabric$v_to_slaves_2_awprot ;
  assign clint$axi4_awqos = fabric$v_to_slaves_2_awqos ;
  assign clint$axi4_awregion = fabric$v_to_slaves_2_awregion ;
  assign clint$axi4_awsize = fabric$v_to_slaves_2_awsize ;
  assign clint$axi4_awvalid = fabric$v_to_slaves_2_awvalid ;
  assign clint$axi4_bready = fabric$v_to_slaves_2_bready ;
  assign clint$axi4_rready = fabric$v_to_slaves_2_rready ;
  assign clint$axi4_wdata = fabric$v_to_slaves_2_wdata ;
  assign clint$axi4_wlast = fabric$v_to_slaves_2_wlast ;
  assign clint$axi4_wstrb = fabric$v_to_slaves_2_wstrb ;
  assign clint$axi4_wvalid = fabric$v_to_slaves_2_wvalid ;
  assign clint$EN_get_timer_interrupt_req_get =
	     clint$RDY_get_timer_interrupt_req_get ;
  assign clint$EN_get_sw_interrupt_req_get =
	     clint$RDY_get_sw_interrupt_req_get ;

  // submodule fabric
  assign fabric$v_from_masters_0_araddr =
	     ahbl_axi4_bridge$axi4_initiator_araddr ;
  assign fabric$v_from_masters_0_arburst =
	     ahbl_axi4_bridge$axi4_initiator_arburst ;
  assign fabric$v_from_masters_0_arcache =
	     ahbl_axi4_bridge$axi4_initiator_arcache ;
  assign fabric$v_from_masters_0_arid = ahbl_axi4_bridge$axi4_initiator_arid ;
  assign fabric$v_from_masters_0_arlen =
	     ahbl_axi4_bridge$axi4_initiator_arlen ;
  assign fabric$v_from_masters_0_arlock =
	     ahbl_axi4_bridge$axi4_initiator_arlock ;
  assign fabric$v_from_masters_0_arprot =
	     ahbl_axi4_bridge$axi4_initiator_arprot ;
  assign fabric$v_from_masters_0_arqos =
	     ahbl_axi4_bridge$axi4_initiator_arqos ;
  assign fabric$v_from_masters_0_arregion =
	     ahbl_axi4_bridge$axi4_initiator_arregion ;
  assign fabric$v_from_masters_0_arsize =
	     ahbl_axi4_bridge$axi4_initiator_arsize ;
  assign fabric$v_from_masters_0_arvalid =
	     ahbl_axi4_bridge$axi4_initiator_arvalid ;
  assign fabric$v_from_masters_0_awaddr =
	     ahbl_axi4_bridge$axi4_initiator_awaddr ;
  assign fabric$v_from_masters_0_awburst =
	     ahbl_axi4_bridge$axi4_initiator_awburst ;
  assign fabric$v_from_masters_0_awcache =
	     ahbl_axi4_bridge$axi4_initiator_awcache ;
  assign fabric$v_from_masters_0_awid = ahbl_axi4_bridge$axi4_initiator_awid ;
  assign fabric$v_from_masters_0_awlen =
	     ahbl_axi4_bridge$axi4_initiator_awlen ;
  assign fabric$v_from_masters_0_awlock =
	     ahbl_axi4_bridge$axi4_initiator_awlock ;
  assign fabric$v_from_masters_0_awprot =
	     ahbl_axi4_bridge$axi4_initiator_awprot ;
  assign fabric$v_from_masters_0_awqos =
	     ahbl_axi4_bridge$axi4_initiator_awqos ;
  assign fabric$v_from_masters_0_awregion =
	     ahbl_axi4_bridge$axi4_initiator_awregion ;
  assign fabric$v_from_masters_0_awsize =
	     ahbl_axi4_bridge$axi4_initiator_awsize ;
  assign fabric$v_from_masters_0_awvalid =
	     ahbl_axi4_bridge$axi4_initiator_awvalid ;
  assign fabric$v_from_masters_0_bready =
	     ahbl_axi4_bridge$axi4_initiator_bready ;
  assign fabric$v_from_masters_0_rready =
	     ahbl_axi4_bridge$axi4_initiator_rready ;
  assign fabric$v_from_masters_0_wdata =
	     ahbl_axi4_bridge$axi4_initiator_wdata ;
  assign fabric$v_from_masters_0_wlast =
	     ahbl_axi4_bridge$axi4_initiator_wlast ;
  assign fabric$v_from_masters_0_wstrb =
	     ahbl_axi4_bridge$axi4_initiator_wstrb ;
  assign fabric$v_from_masters_0_wvalid =
	     ahbl_axi4_bridge$axi4_initiator_wvalid ;
  assign fabric$v_to_slaves_0_arready = uart$axi4_arready ;
  assign fabric$v_to_slaves_0_awready = uart$axi4_awready ;
  assign fabric$v_to_slaves_0_bid = uart$axi4_bid ;
  assign fabric$v_to_slaves_0_bresp = uart$axi4_bresp ;
  assign fabric$v_to_slaves_0_bvalid = uart$axi4_bvalid ;
  assign fabric$v_to_slaves_0_rdata = uart$axi4_rdata ;
  assign fabric$v_to_slaves_0_rid = uart$axi4_rid ;
  assign fabric$v_to_slaves_0_rlast = uart$axi4_rlast ;
  assign fabric$v_to_slaves_0_rresp = uart$axi4_rresp ;
  assign fabric$v_to_slaves_0_rvalid = uart$axi4_rvalid ;
  assign fabric$v_to_slaves_0_wready = uart$axi4_wready ;
  assign fabric$v_to_slaves_1_arready = plic$axi4_arready ;
  assign fabric$v_to_slaves_1_awready = plic$axi4_awready ;
  assign fabric$v_to_slaves_1_bid = plic$axi4_bid ;
  assign fabric$v_to_slaves_1_bresp = plic$axi4_bresp ;
  assign fabric$v_to_slaves_1_bvalid = plic$axi4_bvalid ;
  assign fabric$v_to_slaves_1_rdata = plic$axi4_rdata ;
  assign fabric$v_to_slaves_1_rid = plic$axi4_rid ;
  assign fabric$v_to_slaves_1_rlast = plic$axi4_rlast ;
  assign fabric$v_to_slaves_1_rresp = plic$axi4_rresp ;
  assign fabric$v_to_slaves_1_rvalid = plic$axi4_rvalid ;
  assign fabric$v_to_slaves_1_wready = plic$axi4_wready ;
  assign fabric$v_to_slaves_2_arready = clint$axi4_arready ;
  assign fabric$v_to_slaves_2_awready = clint$axi4_awready ;
  assign fabric$v_to_slaves_2_bid = clint$axi4_bid ;
  assign fabric$v_to_slaves_2_bresp = clint$axi4_bresp ;
  assign fabric$v_to_slaves_2_bvalid = clint$axi4_bvalid ;
  assign fabric$v_to_slaves_2_rdata = clint$axi4_rdata ;
  assign fabric$v_to_slaves_2_rid = clint$axi4_rid ;
  assign fabric$v_to_slaves_2_rlast = clint$axi4_rlast ;
  assign fabric$v_to_slaves_2_rresp = clint$axi4_rresp ;
  assign fabric$v_to_slaves_2_rvalid = clint$axi4_rvalid ;
  assign fabric$v_to_slaves_2_wready = clint$axi4_wready ;
  assign fabric$EN_reset = 1'b0 ;

  // submodule mcu
  assign mcu$ext_interrupt = plic$v_targets_0_m_eip ;
  assign mcu$master1_HRDATA = ahbl_axi4_bridge$ahbl_target_HRDATA ;
  assign mcu$master1_HREADY = ahbl_axi4_bridge$ahbl_target_HREADYOUT ;
  assign mcu$master1_HRESP = ahbl_axi4_bridge$ahbl_target_HRESP ;
  assign mcu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign mcu$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign mcu$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign mcu$sw_interrupt = clint$get_sw_interrupt_req_get ;
  assign mcu$timer_interrupt = clint$get_timer_interrupt_req_get ;
  assign mcu$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign mcu$EN_set_verbosity = EN_set_verbosity ;

  // submodule plic
  assign plic$axi4_araddr = fabric$v_to_slaves_1_araddr ;
  assign plic$axi4_arburst = fabric$v_to_slaves_1_arburst ;
  assign plic$axi4_arcache = fabric$v_to_slaves_1_arcache ;
  assign plic$axi4_arid = fabric$v_to_slaves_1_arid ;
  assign plic$axi4_arlen = fabric$v_to_slaves_1_arlen ;
  assign plic$axi4_arlock = fabric$v_to_slaves_1_arlock ;
  assign plic$axi4_arprot = fabric$v_to_slaves_1_arprot ;
  assign plic$axi4_arqos = fabric$v_to_slaves_1_arqos ;
  assign plic$axi4_arregion = fabric$v_to_slaves_1_arregion ;
  assign plic$axi4_arsize = fabric$v_to_slaves_1_arsize ;
  assign plic$axi4_arvalid = fabric$v_to_slaves_1_arvalid ;
  assign plic$axi4_awaddr = fabric$v_to_slaves_1_awaddr ;
  assign plic$axi4_awburst = fabric$v_to_slaves_1_awburst ;
  assign plic$axi4_awcache = fabric$v_to_slaves_1_awcache ;
  assign plic$axi4_awid = fabric$v_to_slaves_1_awid ;
  assign plic$axi4_awlen = fabric$v_to_slaves_1_awlen ;
  assign plic$axi4_awlock = fabric$v_to_slaves_1_awlock ;
  assign plic$axi4_awprot = fabric$v_to_slaves_1_awprot ;
  assign plic$axi4_awqos = fabric$v_to_slaves_1_awqos ;
  assign plic$axi4_awregion = fabric$v_to_slaves_1_awregion ;
  assign plic$axi4_awsize = fabric$v_to_slaves_1_awsize ;
  assign plic$axi4_awvalid = fabric$v_to_slaves_1_awvalid ;
  assign plic$axi4_bready = fabric$v_to_slaves_1_bready ;
  assign plic$axi4_rready = fabric$v_to_slaves_1_rready ;
  assign plic$axi4_wdata = fabric$v_to_slaves_1_wdata ;
  assign plic$axi4_wlast = fabric$v_to_slaves_1_wlast ;
  assign plic$axi4_wstrb = fabric$v_to_slaves_1_wstrb ;
  assign plic$axi4_wvalid = fabric$v_to_slaves_1_wvalid ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear = uart$intr ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear = 1'd0 ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear = 1'd0 ;

  // submodule uart
  assign uart$axi4_araddr = fabric$v_to_slaves_0_araddr ;
  assign uart$axi4_arburst = fabric$v_to_slaves_0_arburst ;
  assign uart$axi4_arcache = fabric$v_to_slaves_0_arcache ;
  assign uart$axi4_arid = fabric$v_to_slaves_0_arid ;
  assign uart$axi4_arlen = fabric$v_to_slaves_0_arlen ;
  assign uart$axi4_arlock = fabric$v_to_slaves_0_arlock ;
  assign uart$axi4_arprot = fabric$v_to_slaves_0_arprot ;
  assign uart$axi4_arqos = fabric$v_to_slaves_0_arqos ;
  assign uart$axi4_arregion = fabric$v_to_slaves_0_arregion ;
  assign uart$axi4_arsize = fabric$v_to_slaves_0_arsize ;
  assign uart$axi4_arvalid = fabric$v_to_slaves_0_arvalid ;
  assign uart$axi4_awaddr = fabric$v_to_slaves_0_awaddr ;
  assign uart$axi4_awburst = fabric$v_to_slaves_0_awburst ;
  assign uart$axi4_awcache = fabric$v_to_slaves_0_awcache ;
  assign uart$axi4_awid = fabric$v_to_slaves_0_awid ;
  assign uart$axi4_awlen = fabric$v_to_slaves_0_awlen ;
  assign uart$axi4_awlock = fabric$v_to_slaves_0_awlock ;
  assign uart$axi4_awprot = fabric$v_to_slaves_0_awprot ;
  assign uart$axi4_awqos = fabric$v_to_slaves_0_awqos ;
  assign uart$axi4_awregion = fabric$v_to_slaves_0_awregion ;
  assign uart$axi4_awsize = fabric$v_to_slaves_0_awsize ;
  assign uart$axi4_awvalid = fabric$v_to_slaves_0_awvalid ;
  assign uart$axi4_bready = fabric$v_to_slaves_0_bready ;
  assign uart$axi4_rready = fabric$v_to_slaves_0_rready ;
  assign uart$axi4_wdata = fabric$v_to_slaves_0_wdata ;
  assign uart$axi4_wlast = fabric$v_to_slaves_0_wlast ;
  assign uart$axi4_wstrb = fabric$v_to_slaves_0_wstrb ;
  assign uart$axi4_wvalid = fabric$v_to_slaves_0_wvalid ;
  assign uart$put_from_console_put = put_from_console_put ;
  assign uart$set_addr_map_addr_base = soc_map$m_uart_addr_base ;
  assign uart$set_addr_map_addr_lim = soc_map$m_uart_addr_lim ;
  assign uart$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign uart$EN_server_reset_response_get = 1'b0 ;
  assign uart$EN_set_addr_map = rg_state == 2'd1 ;
  assign uart$EN_get_to_console_get = EN_get_to_console_get ;
  assign uart$EN_put_from_console_put = EN_put_from_console_put ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	begin
	  v__h7389 = $stime;
	  #0;
	end
    v__h7383 = v__h7389 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	$display("%0d:%m.rl_reset_start_initial ...", v__h7383);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	begin
	  v__h7493 = $stime;
	  #0;
	end
    v__h7487 = v__h7493 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("%0d:%m.rl_reset_complete_initial", v__h7487);
  end
  // synopsys translate_on
endmodule  // mkSoC_Top

