//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1 const
// axi4_awready                   O     1 reg
// axi4_wready                    O     1 reg
// axi4_bvalid                    O     1 reg
// axi4_bid                       O     4 reg
// axi4_bresp                     O     2 reg
// axi4_arready                   O     1 reg
// axi4_rvalid                    O     1 reg
// axi4_rid                       O     4 reg
// axi4_rdata                     O    32 reg
// axi4_rresp                     O     2 reg
// axi4_rlast                     O     1 reg
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// intr                           O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    32 reg
// set_addr_map_addr_lim          I    32 reg
// axi4_awvalid                   I     1
// axi4_awid                      I     4 reg
// axi4_awaddr                    I    32 reg
// axi4_awlen                     I     8 reg
// axi4_awsize                    I     3 reg
// axi4_awburst                   I     2 reg
// axi4_awlock                    I     1 reg
// axi4_awcache                   I     4 reg
// axi4_awprot                    I     3 reg
// axi4_awqos                     I     4 reg
// axi4_awregion                  I     4 reg
// axi4_wvalid                    I     1
// axi4_wdata                     I    32 reg
// axi4_wstrb                     I     4 reg
// axi4_wlast                     I     1 reg
// axi4_bready                    I     1
// axi4_arvalid                   I     1
// axi4_arid                      I     4 reg
// axi4_araddr                    I    32 reg
// axi4_arlen                     I     8 reg
// axi4_arsize                    I     3 reg
// axi4_arburst                   I     2 reg
// axi4_arlock                    I     1 reg
// axi4_arcache                   I     4 reg
// axi4_arprot                    I     3 reg
// axi4_arqos                     I     4 reg
// axi4_arregion                  I     4 reg
// axi4_rready                    I     1
// put_from_console_put           I     8 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// EN_put_from_console_put        I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUART(CLK,
	      RST_N,

	      EN_server_reset_request_put,
	      RDY_server_reset_request_put,

	      EN_server_reset_response_get,
	      RDY_server_reset_response_get,

	      set_addr_map_addr_base,
	      set_addr_map_addr_lim,
	      EN_set_addr_map,
	      RDY_set_addr_map,

	      axi4_awvalid,
	      axi4_awid,
	      axi4_awaddr,
	      axi4_awlen,
	      axi4_awsize,
	      axi4_awburst,
	      axi4_awlock,
	      axi4_awcache,
	      axi4_awprot,
	      axi4_awqos,
	      axi4_awregion,

	      axi4_awready,

	      axi4_wvalid,
	      axi4_wdata,
	      axi4_wstrb,
	      axi4_wlast,

	      axi4_wready,

	      axi4_bvalid,

	      axi4_bid,

	      axi4_bresp,

	      axi4_bready,

	      axi4_arvalid,
	      axi4_arid,
	      axi4_araddr,
	      axi4_arlen,
	      axi4_arsize,
	      axi4_arburst,
	      axi4_arlock,
	      axi4_arcache,
	      axi4_arprot,
	      axi4_arqos,
	      axi4_arregion,

	      axi4_arready,

	      axi4_rvalid,

	      axi4_rid,

	      axi4_rdata,

	      axi4_rresp,

	      axi4_rlast,

	      axi4_rready,

	      EN_get_to_console_get,
	      get_to_console_get,
	      RDY_get_to_console_get,

	      put_from_console_put,
	      EN_put_from_console_put,
	      RDY_put_from_console_put,

	      intr);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [31 : 0] set_addr_map_addr_base;
  input  [31 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method axi4_m_awvalid
  input  axi4_awvalid;
  input  [3 : 0] axi4_awid;
  input  [31 : 0] axi4_awaddr;
  input  [7 : 0] axi4_awlen;
  input  [2 : 0] axi4_awsize;
  input  [1 : 0] axi4_awburst;
  input  axi4_awlock;
  input  [3 : 0] axi4_awcache;
  input  [2 : 0] axi4_awprot;
  input  [3 : 0] axi4_awqos;
  input  [3 : 0] axi4_awregion;

  // value method axi4_m_awready
  output axi4_awready;

  // action method axi4_m_wvalid
  input  axi4_wvalid;
  input  [31 : 0] axi4_wdata;
  input  [3 : 0] axi4_wstrb;
  input  axi4_wlast;

  // value method axi4_m_wready
  output axi4_wready;

  // value method axi4_m_bvalid
  output axi4_bvalid;

  // value method axi4_m_bid
  output [3 : 0] axi4_bid;

  // value method axi4_m_bresp
  output [1 : 0] axi4_bresp;

  // value method axi4_m_buser

  // action method axi4_m_bready
  input  axi4_bready;

  // action method axi4_m_arvalid
  input  axi4_arvalid;
  input  [3 : 0] axi4_arid;
  input  [31 : 0] axi4_araddr;
  input  [7 : 0] axi4_arlen;
  input  [2 : 0] axi4_arsize;
  input  [1 : 0] axi4_arburst;
  input  axi4_arlock;
  input  [3 : 0] axi4_arcache;
  input  [2 : 0] axi4_arprot;
  input  [3 : 0] axi4_arqos;
  input  [3 : 0] axi4_arregion;

  // value method axi4_m_arready
  output axi4_arready;

  // value method axi4_m_rvalid
  output axi4_rvalid;

  // value method axi4_m_rid
  output [3 : 0] axi4_rid;

  // value method axi4_m_rdata
  output [31 : 0] axi4_rdata;

  // value method axi4_m_rresp
  output [1 : 0] axi4_rresp;

  // value method axi4_m_rlast
  output axi4_rlast;

  // value method axi4_m_ruser

  // action method axi4_m_rready
  input  axi4_rready;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // value method intr
  output intr;

  // signals for module outputs
  wire [31 : 0] axi4_rdata;
  wire [7 : 0] get_to_console_get;
  wire [3 : 0] axi4_bid, axi4_rid;
  wire [1 : 0] axi4_bresp, axi4_rresp;
  wire RDY_get_to_console_get,
       RDY_put_from_console_put,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       axi4_arready,
       axi4_awready,
       axi4_bvalid,
       axi4_rlast,
       axi4_rvalid,
       axi4_wready,
       intr;

  // register rg_addr_base
  reg [31 : 0] rg_addr_base;
  wire [31 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [31 : 0] rg_addr_lim;
  wire [31 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_dll
  reg [7 : 0] rg_dll;
  wire [7 : 0] rg_dll$D_IN;
  wire rg_dll$EN;

  // register rg_dlm
  reg [7 : 0] rg_dlm;
  wire [7 : 0] rg_dlm$D_IN;
  wire rg_dlm$EN;

  // register rg_fcr
  reg [7 : 0] rg_fcr;
  wire [7 : 0] rg_fcr$D_IN;
  wire rg_fcr$EN;

  // register rg_ier
  reg [7 : 0] rg_ier;
  wire [7 : 0] rg_ier$D_IN;
  wire rg_ier$EN;

  // register rg_lcr
  reg [7 : 0] rg_lcr;
  wire [7 : 0] rg_lcr$D_IN;
  wire rg_lcr$EN;

  // register rg_lsr
  reg [7 : 0] rg_lsr;
  reg [7 : 0] rg_lsr$D_IN;
  wire rg_lsr$EN;

  // register rg_mcr
  reg [7 : 0] rg_mcr;
  wire [7 : 0] rg_mcr$D_IN;
  wire rg_mcr$EN;

  // register rg_msr
  reg [7 : 0] rg_msr;
  wire [7 : 0] rg_msr$D_IN;
  wire rg_msr$EN;

  // register rg_rbr
  reg [7 : 0] rg_rbr;
  wire [7 : 0] rg_rbr$D_IN;
  wire rg_rbr$EN;

  // register rg_scr
  reg [7 : 0] rg_scr;
  wire [7 : 0] rg_scr$D_IN;
  wire rg_scr$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_thr
  reg [7 : 0] rg_thr;
  wire [7 : 0] rg_thr$D_IN;
  wire rg_thr$EN;

  // ports of submodule f_from_console
  wire [7 : 0] f_from_console$D_IN, f_from_console$D_OUT;
  wire f_from_console$CLR,
       f_from_console$DEQ,
       f_from_console$EMPTY_N,
       f_from_console$ENQ,
       f_from_console$FULL_N;

  // ports of submodule f_from_loopback
  wire [7 : 0] f_from_loopback$D_IN, f_from_loopback$D_OUT;
  wire f_from_loopback$CLR,
       f_from_loopback$DEQ,
       f_from_loopback$EMPTY_N,
       f_from_loopback$ENQ,
       f_from_loopback$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_to_console
  wire [7 : 0] f_to_console$D_IN, f_to_console$D_OUT;
  wire f_to_console$CLR,
       f_to_console$DEQ,
       f_to_console$EMPTY_N,
       f_to_console$ENQ,
       f_to_console$FULL_N;

  // ports of submodule xactor_f_rd_addr
  wire [64 : 0] xactor_f_rd_addr$D_IN, xactor_f_rd_addr$D_OUT;
  wire xactor_f_rd_addr$CLR,
       xactor_f_rd_addr$DEQ,
       xactor_f_rd_addr$EMPTY_N,
       xactor_f_rd_addr$ENQ,
       xactor_f_rd_addr$FULL_N;

  // ports of submodule xactor_f_rd_data
  wire [38 : 0] xactor_f_rd_data$D_IN, xactor_f_rd_data$D_OUT;
  wire xactor_f_rd_data$CLR,
       xactor_f_rd_data$DEQ,
       xactor_f_rd_data$EMPTY_N,
       xactor_f_rd_data$ENQ,
       xactor_f_rd_data$FULL_N;

  // ports of submodule xactor_f_wr_addr
  wire [64 : 0] xactor_f_wr_addr$D_IN, xactor_f_wr_addr$D_OUT;
  wire xactor_f_wr_addr$CLR,
       xactor_f_wr_addr$DEQ,
       xactor_f_wr_addr$EMPTY_N,
       xactor_f_wr_addr$ENQ,
       xactor_f_wr_addr$FULL_N;

  // ports of submodule xactor_f_wr_data
  wire [36 : 0] xactor_f_wr_data$D_IN, xactor_f_wr_data$D_OUT;
  wire xactor_f_wr_data$CLR,
       xactor_f_wr_data$DEQ,
       xactor_f_wr_data$EMPTY_N,
       xactor_f_wr_data$ENQ,
       xactor_f_wr_data$FULL_N;

  // ports of submodule xactor_f_wr_resp
  wire [5 : 0] xactor_f_wr_resp$D_IN, xactor_f_wr_resp$D_OUT;
  wire xactor_f_wr_resp$CLR,
       xactor_f_wr_resp$DEQ,
       xactor_f_wr_resp$EMPTY_N,
       xactor_f_wr_resp$ENQ,
       xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_receive_console,
       CAN_FIRE_RL_rl_receive_loopback,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_axi4_m_arvalid,
       CAN_FIRE_axi4_m_awvalid,
       CAN_FIRE_axi4_m_bready,
       CAN_FIRE_axi4_m_rready,
       CAN_FIRE_axi4_m_wvalid,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_receive_console,
       WILL_FIRE_RL_rl_receive_loopback,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_axi4_m_arvalid,
       WILL_FIRE_axi4_m_awvalid,
       WILL_FIRE_axi4_m_bready,
       WILL_FIRE_axi4_m_rready,
       WILL_FIRE_axi4_m_wvalid,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map;

  // inputs to muxes for submodule ports
  wire [7 : 0] MUX_rg_lsr$write_1__VAL_2, MUX_rg_lsr$write_1__VAL_3;
  wire MUX_rg_lsr$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2051;
  reg [31 : 0] v__h3002;
  reg [31 : 0] v__h2461;
  reg [31 : 0] v__h2286;
  reg [31 : 0] v__h3567;
  reg [31 : 0] v__h5021;
  reg [31 : 0] v__h3951;
  reg [31 : 0] v__h3781;
  reg [31 : 0] v__h5741;
  reg [31 : 0] v__h5847;
  reg [31 : 0] v__h2045;
  reg [31 : 0] v__h2280;
  reg [31 : 0] v__h2455;
  reg [31 : 0] v__h2996;
  reg [31 : 0] v__h3561;
  reg [31 : 0] v__h3775;
  reg [31 : 0] v__h3945;
  reg [31 : 0] v__h5015;
  reg [31 : 0] v__h5735;
  reg [31 : 0] v__h5841;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h4126;
  reg [7 : 0] y_avValue_snd__h3184;
  wire [63 : 0] result__h4144,
		result__h4174,
		result__h4201,
		result__h4228,
		result__h4263,
		result__h4290,
		result__h4321;
  wire [31 : 0] byte_addr__h1988, byte_addr__h3516, rdr_rdata__h3301;
  wire [7 : 0] fn_iir__h1420,
	       x__h3307,
	       y_avValue_snd__h3197,
	       y_avValue_snd__h3210,
	       y_avValue_snd__h3225,
	       y_avValue_snd__h3239;
  wire [1 : 0] rdr_rresp__h3302,
	       v__h3720,
	       v__h3882,
	       v__h4052,
	       y_avValue_fst__h3238,
	       y_avValue_fst__h3252,
	       y_avValue_fst__h3266;
  wire NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d158,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d239,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d243,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d247,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d251,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d284,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d290,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d297,
       NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d303,
       xactor_f_rd_addr_first_BITS_60_TO_29_0_MINUS_r_ETC___d42,
       xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12,
       xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14,
       xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d225,
       xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d230,
       xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d234,
       xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139,
       xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140,
       xactor_f_wr_addr_i_notEmpty__34_AND_xactor_f_w_ETC___d164;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;
  assign CAN_FIRE_set_addr_map = 1'd1 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // action method axi4_m_awvalid
  assign CAN_FIRE_axi4_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4_m_awvalid = 1'd1 ;

  // value method axi4_m_awready
  assign axi4_awready = xactor_f_wr_addr$FULL_N ;

  // action method axi4_m_wvalid
  assign CAN_FIRE_axi4_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4_m_wvalid = 1'd1 ;

  // value method axi4_m_wready
  assign axi4_wready = xactor_f_wr_data$FULL_N ;

  // value method axi4_m_bvalid
  assign axi4_bvalid = xactor_f_wr_resp$EMPTY_N ;

  // value method axi4_m_bid
  assign axi4_bid = xactor_f_wr_resp$D_OUT[5:2] ;

  // value method axi4_m_bresp
  assign axi4_bresp = xactor_f_wr_resp$D_OUT[1:0] ;

  // action method axi4_m_bready
  assign CAN_FIRE_axi4_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4_m_bready = 1'd1 ;

  // action method axi4_m_arvalid
  assign CAN_FIRE_axi4_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4_m_arvalid = 1'd1 ;

  // value method axi4_m_arready
  assign axi4_arready = xactor_f_rd_addr$FULL_N ;

  // value method axi4_m_rvalid
  assign axi4_rvalid = xactor_f_rd_data$EMPTY_N ;

  // value method axi4_m_rid
  assign axi4_rid = xactor_f_rd_data$D_OUT[38:35] ;

  // value method axi4_m_rdata
  assign axi4_rdata = xactor_f_rd_data$D_OUT[34:3] ;

  // value method axi4_m_rresp
  assign axi4_rresp = xactor_f_rd_data$D_OUT[2:1] ;

  // value method axi4_m_rlast
  assign axi4_rlast = xactor_f_rd_data$D_OUT[0] ;

  // action method axi4_m_rready
  assign CAN_FIRE_axi4_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4_m_rready = 1'd1 ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = f_to_console$D_OUT ;
  assign RDY_get_to_console_get = f_to_console$EMPTY_N ;
  assign CAN_FIRE_get_to_console_get = f_to_console$EMPTY_N ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = f_from_console$FULL_N ;
  assign CAN_FIRE_put_from_console_put = f_from_console$FULL_N ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // value method intr
  assign intr = !fn_iir__h1420[0] ;

  // submodule f_from_console
  FIFO2 #(.width(32'd8), .guarded(1'd1)) f_from_console(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_from_console$D_IN),
							.ENQ(f_from_console$ENQ),
							.DEQ(f_from_console$DEQ),
							.CLR(f_from_console$CLR),
							.D_OUT(f_from_console$D_OUT),
							.FULL_N(f_from_console$FULL_N),
							.EMPTY_N(f_from_console$EMPTY_N));

  // submodule f_from_loopback
  FIFO2 #(.width(32'd8), .guarded(1'd1)) f_from_loopback(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_from_loopback$D_IN),
							 .ENQ(f_from_loopback$ENQ),
							 .DEQ(f_from_loopback$DEQ),
							 .CLR(f_from_loopback$CLR),
							 .D_OUT(f_from_loopback$D_OUT),
							 .FULL_N(f_from_loopback$FULL_N),
							 .EMPTY_N(f_from_loopback$EMPTY_N));

  // submodule f_reset_reqs
  FIFO20 #(.guarded(1'd1)) f_reset_reqs(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_reqs$ENQ),
					.DEQ(f_reset_reqs$DEQ),
					.CLR(f_reset_reqs$CLR),
					.FULL_N(f_reset_reqs$FULL_N),
					.EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_to_console
  FIFO2 #(.width(32'd8), .guarded(1'd1)) f_to_console(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_to_console$D_IN),
						      .ENQ(f_to_console$ENQ),
						      .DEQ(f_to_console$DEQ),
						      .CLR(f_to_console$CLR),
						      .D_OUT(f_to_console$D_OUT),
						      .FULL_N(f_to_console$FULL_N),
						      .EMPTY_N(f_to_console$EMPTY_N));

  // submodule xactor_f_rd_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) xactor_f_rd_addr(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(xactor_f_rd_addr$D_IN),
							   .ENQ(xactor_f_rd_addr$ENQ),
							   .DEQ(xactor_f_rd_addr$DEQ),
							   .CLR(xactor_f_rd_addr$CLR),
							   .D_OUT(xactor_f_rd_addr$D_OUT),
							   .FULL_N(xactor_f_rd_addr$FULL_N),
							   .EMPTY_N(xactor_f_rd_addr$EMPTY_N));

  // submodule xactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) xactor_f_rd_data(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(xactor_f_rd_data$D_IN),
							   .ENQ(xactor_f_rd_data$ENQ),
							   .DEQ(xactor_f_rd_data$DEQ),
							   .CLR(xactor_f_rd_data$CLR),
							   .D_OUT(xactor_f_rd_data$D_OUT),
							   .FULL_N(xactor_f_rd_data$FULL_N),
							   .EMPTY_N(xactor_f_rd_data$EMPTY_N));

  // submodule xactor_f_wr_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) xactor_f_wr_addr(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(xactor_f_wr_addr$D_IN),
							   .ENQ(xactor_f_wr_addr$ENQ),
							   .DEQ(xactor_f_wr_addr$DEQ),
							   .CLR(xactor_f_wr_addr$CLR),
							   .D_OUT(xactor_f_wr_addr$D_OUT),
							   .FULL_N(xactor_f_wr_addr$FULL_N),
							   .EMPTY_N(xactor_f_wr_addr$EMPTY_N));

  // submodule xactor_f_wr_data
  FIFO2 #(.width(32'd37), .guarded(1'd1)) xactor_f_wr_data(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(xactor_f_wr_data$D_IN),
							   .ENQ(xactor_f_wr_data$ENQ),
							   .DEQ(xactor_f_wr_data$DEQ),
							   .CLR(xactor_f_wr_data$CLR),
							   .D_OUT(xactor_f_wr_data$D_OUT),
							   .FULL_N(xactor_f_wr_data$FULL_N),
							   .EMPTY_N(xactor_f_wr_data$EMPTY_N));

  // submodule xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) xactor_f_wr_resp(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(xactor_f_wr_resp$D_IN),
							  .ENQ(xactor_f_wr_resp$ENQ),
							  .DEQ(xactor_f_wr_resp$DEQ),
							  .CLR(xactor_f_wr_resp$CLR),
							  .D_OUT(xactor_f_wr_resp$D_OUT),
							  .FULL_N(xactor_f_wr_resp$FULL_N),
							  .EMPTY_N(xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_receive_console
  assign CAN_FIRE_RL_rl_receive_console =
	     f_from_console$EMPTY_N && !rg_lsr[0] && !rg_mcr[4] ;
  assign WILL_FIRE_RL_rl_receive_console = CAN_FIRE_RL_rl_receive_console ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     xactor_f_rd_addr$EMPTY_N && xactor_f_rd_data$FULL_N && rg_state ;
  assign WILL_FIRE_RL_rl_process_rd_req =
	     CAN_FIRE_RL_rl_process_rd_req &&
	     !WILL_FIRE_RL_rl_receive_loopback &&
	     !WILL_FIRE_RL_rl_receive_console ;

  // rule RL_rl_receive_loopback
  assign CAN_FIRE_RL_rl_receive_loopback =
	     f_from_loopback$EMPTY_N && !rg_lsr[0] && rg_mcr[4] ;
  assign WILL_FIRE_RL_rl_receive_loopback = CAN_FIRE_RL_rl_receive_loopback ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     xactor_f_wr_addr_i_notEmpty__34_AND_xactor_f_w_ETC___d164 &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_rg_lsr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_process_rd_req &&
	     !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	     xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	     xactor_f_rd_addr_first_BITS_60_TO_29_0_MINUS_r_ETC___d42 ;
  assign MUX_rg_lsr$write_1__VAL_2 = { rg_lsr[7:1], 1'd1 } ;
  assign MUX_rg_lsr$write_1__VAL_3 = { rg_lsr[7:1], 1'd0 } ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_dll
  assign rg_dll$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_dll$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d225 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_dlm
  assign rg_dlm$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_dlm$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d234 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_fcr
  assign rg_fcr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_fcr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d239 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_ier
  assign rg_ier$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_ier$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d230 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_lcr
  assign rg_lcr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_lcr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d243 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_lsr
  always@(WILL_FIRE_RL_rl_reset or
	  WILL_FIRE_RL_rl_receive_loopback or
	  MUX_rg_lsr$write_1__VAL_2 or
	  MUX_rg_lsr$write_1__SEL_3 or
	  MUX_rg_lsr$write_1__VAL_3 or WILL_FIRE_RL_rl_receive_console)
  case (1'b1)
    WILL_FIRE_RL_rl_reset: rg_lsr$D_IN = 8'd96;
    WILL_FIRE_RL_rl_receive_loopback: rg_lsr$D_IN = MUX_rg_lsr$write_1__VAL_2;
    MUX_rg_lsr$write_1__SEL_3: rg_lsr$D_IN = MUX_rg_lsr$write_1__VAL_3;
    WILL_FIRE_RL_rl_receive_console: rg_lsr$D_IN = MUX_rg_lsr$write_1__VAL_2;
    default: rg_lsr$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign rg_lsr$EN =
	     WILL_FIRE_RL_rl_process_rd_req &&
	     !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	     xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	     xactor_f_rd_addr_first_BITS_60_TO_29_0_MINUS_r_ETC___d42 ||
	     WILL_FIRE_RL_rl_receive_loopback ||
	     WILL_FIRE_RL_rl_receive_console ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_mcr
  assign rg_mcr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_mcr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d247 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_msr
  assign rg_msr$D_IN = 8'd0 ;
  assign rg_msr$EN = CAN_FIRE_RL_rl_reset ;

  // register rg_rbr
  assign rg_rbr$D_IN =
	     WILL_FIRE_RL_rl_receive_console ?
	       f_from_console$D_OUT :
	       f_from_loopback$D_OUT ;
  assign rg_rbr$EN =
	     WILL_FIRE_RL_rl_receive_console ||
	     WILL_FIRE_RL_rl_receive_loopback ;

  // register rg_scr
  assign rg_scr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4126[7:0] ;
  assign rg_scr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d251 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_state
  assign rg_state$D_IN = 1'd1 ;
  assign rg_state$EN = CAN_FIRE_RL_rl_reset ;

  // register rg_thr
  assign rg_thr$D_IN = x__h4126[7:0] ;
  assign rg_thr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h0 &&
	     !rg_lcr[7] ;

  // submodule f_from_console
  assign f_from_console$D_IN = put_from_console_put ;
  assign f_from_console$ENQ = EN_put_from_console_put ;
  assign f_from_console$DEQ = CAN_FIRE_RL_rl_receive_console ;
  assign f_from_console$CLR = 1'b0 ;

  // submodule f_from_loopback
  assign f_from_loopback$D_IN = x__h4126[7:0] ;
  assign f_from_loopback$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h0 &&
	     !rg_lcr[7] &&
	     rg_mcr[4] ;
  assign f_from_loopback$DEQ = CAN_FIRE_RL_rl_receive_loopback ;
  assign f_from_loopback$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_to_console
  assign f_to_console$D_IN = x__h4126[7:0] ;
  assign f_to_console$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h0 &&
	     !rg_lcr[7] &&
	     !rg_mcr[4] ;
  assign f_to_console$DEQ = EN_get_to_console_get ;
  assign f_to_console$CLR = 1'b0 ;

  // submodule xactor_f_rd_addr
  assign xactor_f_rd_addr$D_IN =
	     { axi4_arid,
	       axi4_araddr,
	       axi4_arlen,
	       axi4_arsize,
	       axi4_arburst,
	       axi4_arlock,
	       axi4_arcache,
	       axi4_arprot,
	       axi4_arqos,
	       axi4_arregion } ;
  assign xactor_f_rd_addr$ENQ = axi4_arvalid && xactor_f_rd_addr$FULL_N ;
  assign xactor_f_rd_addr$DEQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign xactor_f_rd_addr$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule xactor_f_rd_data
  assign xactor_f_rd_data$D_IN =
	     { xactor_f_rd_addr$D_OUT[64:61],
	       rdr_rdata__h3301,
	       rdr_rresp__h3302,
	       1'd1 } ;
  assign xactor_f_rd_data$ENQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign xactor_f_rd_data$DEQ = axi4_rready && xactor_f_rd_data$EMPTY_N ;
  assign xactor_f_rd_data$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule xactor_f_wr_addr
  assign xactor_f_wr_addr$D_IN =
	     { axi4_awid,
	       axi4_awaddr,
	       axi4_awlen,
	       axi4_awsize,
	       axi4_awburst,
	       axi4_awlock,
	       axi4_awcache,
	       axi4_awprot,
	       axi4_awqos,
	       axi4_awregion } ;
  assign xactor_f_wr_addr$ENQ = axi4_awvalid && xactor_f_wr_addr$FULL_N ;
  assign xactor_f_wr_addr$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign xactor_f_wr_addr$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule xactor_f_wr_data
  assign xactor_f_wr_data$D_IN = { axi4_wdata, axi4_wstrb, axi4_wlast } ;
  assign xactor_f_wr_data$ENQ = axi4_wvalid && xactor_f_wr_data$FULL_N ;
  assign xactor_f_wr_data$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign xactor_f_wr_data$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule xactor_f_wr_resp
  assign xactor_f_wr_resp$D_IN =
	     { xactor_f_wr_addr$D_OUT[64:61],
	       (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
		!xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140) ?
		 2'b11 :
		 v__h3720 } ;
  assign xactor_f_wr_resp$ENQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign xactor_f_wr_resp$DEQ = axi4_bready && xactor_f_wr_resp$EMPTY_N ;
  assign xactor_f_wr_resp$CLR = CAN_FIRE_RL_rl_reset ;

  // remaining internal signals
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d158 =
	     byte_addr__h3516[4:2] != 3'h0 || rg_lcr[7] ||
	     (rg_mcr[4] ? f_from_loopback$FULL_N : f_to_console$FULL_N) ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d239 =
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h2 ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d243 =
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h3 ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d247 =
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h4 ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d251 =
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h7 ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d284 =
	     (byte_addr__h3516[4:2] != 3'h1 || !rg_lcr[7]) &&
	     byte_addr__h3516[4:2] != 3'h2 &&
	     byte_addr__h3516[4:2] != 3'h3 &&
	     byte_addr__h3516[4:2] != 3'h4 &&
	     byte_addr__h3516[4:2] != 3'h5 &&
	     byte_addr__h3516[4:2] != 3'h6 &&
	     byte_addr__h3516[4:2] != 3'h7 &&
	     xactor_f_wr_data$D_OUT[0] ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d290 =
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     (byte_addr__h3516[4:2] != 3'h0 || rg_lcr[7]) &&
	     (byte_addr__h3516[4:2] != 3'h0 || !rg_lcr[7]) &&
	     (byte_addr__h3516[4:2] != 3'h1 || rg_lcr[7]) &&
	     NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d284 ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d297 =
	     (byte_addr__h3516[4:2] != 3'h1 || !rg_lcr[7]) &&
	     byte_addr__h3516[4:2] != 3'h2 &&
	     byte_addr__h3516[4:2] != 3'h3 &&
	     byte_addr__h3516[4:2] != 3'h4 &&
	     byte_addr__h3516[4:2] != 3'h5 &&
	     byte_addr__h3516[4:2] != 3'h6 &&
	     byte_addr__h3516[4:2] != 3'h7 &&
	     !xactor_f_wr_data$D_OUT[0] ;
  assign NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d303 =
	     !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	     xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     (byte_addr__h3516[4:2] != 3'h0 || rg_lcr[7]) &&
	     (byte_addr__h3516[4:2] != 3'h0 || !rg_lcr[7]) &&
	     (byte_addr__h3516[4:2] != 3'h1 || rg_lcr[7]) &&
	     NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d297 ;
  assign byte_addr__h1988 = xactor_f_rd_addr$D_OUT[60:29] - rg_addr_base ;
  assign byte_addr__h3516 = xactor_f_wr_addr$D_OUT[60:29] - rg_addr_base ;
  assign fn_iir__h1420 =
	     (rg_ier[0] && rg_lsr[0]) ? 8'h04 : (rg_ier[1] ? 8'h02 : 8'd0) ;
  assign rdr_rdata__h3301 = { 24'd0, x__h3307 } ;
  assign rdr_rresp__h3302 =
	     (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	      !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14) ?
	       2'b11 :
	       y_avValue_fst__h3266 ;
  assign result__h4144 = { 56'd0, xactor_f_wr_data$D_OUT[12:5] } ;
  assign result__h4174 = { 56'd0, xactor_f_wr_data$D_OUT[20:13] } ;
  assign result__h4201 = { 56'd0, xactor_f_wr_data$D_OUT[28:21] } ;
  assign result__h4228 = { 56'd0, xactor_f_wr_data$D_OUT[36:29] } ;
  assign result__h4263 = { 48'd0, xactor_f_wr_data$D_OUT[20:5] } ;
  assign result__h4290 = { 48'd0, xactor_f_wr_data$D_OUT[36:21] } ;
  assign result__h4321 = { 32'd0, xactor_f_wr_data$D_OUT[36:5] } ;
  assign v__h3720 = (byte_addr__h3516[1:0] == 2'd0) ? v__h3882 : 2'b10 ;
  assign v__h3882 = (byte_addr__h3516[31:5] == 27'd0) ? v__h4052 : 2'b11 ;
  assign v__h4052 = y_avValue_fst__h3238 ;
  assign x__h3307 =
	     (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	      !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 ||
	      byte_addr__h1988[1:0] != 2'd0 ||
	      byte_addr__h1988[31:5] != 27'd0) ?
	       8'd0 :
	       y_avValue_snd__h3239 ;
  assign xactor_f_rd_addr_first_BITS_60_TO_29_0_MINUS_r_ETC___d42 =
	     byte_addr__h1988[1:0] == 2'd0 &&
	     byte_addr__h1988[31:5] == 27'd0 &&
	     byte_addr__h1988[4:2] == 3'h0 &&
	     !rg_lcr[7] ;
  assign xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 =
	     xactor_f_rd_addr$D_OUT[60:29] < rg_addr_base ;
  assign xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 =
	     xactor_f_rd_addr$D_OUT[60:29] < rg_addr_lim ;
  assign xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d225 =
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h0 &&
	     rg_lcr[7] ;
  assign xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d230 =
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h1 &&
	     !rg_lcr[7] ;
  assign xactor_f_wr_addr_first__37_BITS_60_TO_29_38_MI_ETC___d234 =
	     byte_addr__h3516[1:0] == 2'd0 &&
	     byte_addr__h3516[31:5] == 27'd0 &&
	     byte_addr__h3516[4:2] == 3'h1 &&
	     rg_lcr[7] ;
  assign xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 =
	     xactor_f_wr_addr$D_OUT[60:29] < rg_addr_base ;
  assign xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 =
	     xactor_f_wr_addr$D_OUT[60:29] < rg_addr_lim ;
  assign xactor_f_wr_addr_i_notEmpty__34_AND_xactor_f_w_ETC___d164 =
	     xactor_f_wr_addr$EMPTY_N && xactor_f_wr_data$EMPTY_N &&
	     xactor_f_wr_resp$FULL_N &&
	     (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	      !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 ||
	      byte_addr__h3516[1:0] != 2'd0 ||
	      byte_addr__h3516[31:5] != 27'd0 ||
	      NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d158) ;
  assign y_avValue_fst__h3238 = 2'b0 ;
  assign y_avValue_fst__h3252 =
	     (byte_addr__h1988[31:5] == 27'd0) ?
	       y_avValue_fst__h3238 :
	       2'b11 ;
  assign y_avValue_fst__h3266 =
	     (byte_addr__h1988[1:0] == 2'd0) ? y_avValue_fst__h3252 : 2'b10 ;
  assign y_avValue_snd__h3197 =
	     (byte_addr__h1988[4:2] == 3'h1 && rg_lcr[7]) ?
	       rg_dlm :
	       y_avValue_snd__h3184 ;
  assign y_avValue_snd__h3210 =
	     (byte_addr__h1988[4:2] == 3'h1 && !rg_lcr[7]) ?
	       rg_ier :
	       y_avValue_snd__h3197 ;
  assign y_avValue_snd__h3225 =
	     (byte_addr__h1988[4:2] == 3'h0 && rg_lcr[7]) ?
	       rg_dll :
	       y_avValue_snd__h3210 ;
  assign y_avValue_snd__h3239 =
	     (byte_addr__h1988[4:2] == 3'h0 && !rg_lcr[7]) ?
	       rg_rbr :
	       y_avValue_snd__h3225 ;
  always@(xactor_f_wr_data$D_OUT or
	  result__h4144 or
	  result__h4174 or
	  result__h4263 or
	  result__h4201 or result__h4228 or result__h4290 or result__h4321)
  begin
    case (xactor_f_wr_data$D_OUT[4:1])
      4'd1: x__h4126 = result__h4144;
      4'd2: x__h4126 = result__h4174;
      4'd3: x__h4126 = result__h4263;
      4'd4: x__h4126 = result__h4201;
      4'd8: x__h4126 = result__h4228;
      4'd12: x__h4126 = result__h4290;
      4'd15: x__h4126 = result__h4321;
      default: x__h4126 = 64'd0;
    endcase
  end
  always@(byte_addr__h1988 or
	  fn_iir__h1420 or rg_lcr or rg_mcr or rg_lsr or rg_msr or rg_scr)
  begin
    case (byte_addr__h1988[4:2])
      3'h2: y_avValue_snd__h3184 = fn_iir__h1420;
      3'h3: y_avValue_snd__h3184 = rg_lcr;
      3'h4: y_avValue_snd__h3184 = rg_mcr;
      3'h5: y_avValue_snd__h3184 = rg_lsr;
      3'h6: y_avValue_snd__h3184 = rg_msr;
      3'h7: y_avValue_snd__h3184 = rg_scr;
      default: y_avValue_snd__h3184 = 8'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_dll <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_dlm <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_fcr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_ier <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_lcr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_lsr <= `BSV_ASSIGNMENT_DELAY 8'd96;
	rg_mcr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_msr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_scr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_dll$EN) rg_dll <= `BSV_ASSIGNMENT_DELAY rg_dll$D_IN;
	if (rg_dlm$EN) rg_dlm <= `BSV_ASSIGNMENT_DELAY rg_dlm$D_IN;
	if (rg_fcr$EN) rg_fcr <= `BSV_ASSIGNMENT_DELAY rg_fcr$D_IN;
	if (rg_ier$EN) rg_ier <= `BSV_ASSIGNMENT_DELAY rg_ier$D_IN;
	if (rg_lcr$EN) rg_lcr <= `BSV_ASSIGNMENT_DELAY rg_lcr$D_IN;
	if (rg_lsr$EN) rg_lsr <= `BSV_ASSIGNMENT_DELAY rg_lsr$D_IN;
	if (rg_mcr$EN) rg_mcr <= `BSV_ASSIGNMENT_DELAY rg_mcr$D_IN;
	if (rg_msr$EN) rg_msr <= `BSV_ASSIGNMENT_DELAY rg_msr$D_IN;
	if (rg_scr$EN) rg_scr <= `BSV_ASSIGNMENT_DELAY rg_scr$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_rbr$EN) rg_rbr <= `BSV_ASSIGNMENT_DELAY rg_rbr$D_IN;
    if (rg_thr$EN) rg_thr <= `BSV_ASSIGNMENT_DELAY rg_thr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_addr_base = 32'hAAAAAAAA;
    rg_addr_lim = 32'hAAAAAAAA;
    rg_dll = 8'hAA;
    rg_dlm = 8'hAA;
    rg_fcr = 8'hAA;
    rg_ier = 8'hAA;
    rg_lcr = 8'hAA;
    rg_lsr = 8'hAA;
    rg_mcr = 8'hAA;
    rg_msr = 8'hAA;
    rg_rbr = 8'hAA;
    rg_scr = 8'hAA;
    rg_state = 1'h0;
    rg_thr = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	begin
	  v__h2051 = $stime;
	  #0;
	end
    v__h2045 = v__h2051 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$display("%06d:[E]:%m.rl_process_rd_req: Addr out of bounds",
		 v__h2045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$display("    UART base addr 0x%0h  limit addr 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("    AXI4 request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 ||
	   !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	begin
	  v__h3002 = $stime;
	  #0;
	end
    v__h2996 = v__h3002 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$display("%0d: %m.rl_process_rd_req: ERROR: UART unsupported addr",
		 v__h2996);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  1'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	begin
	  v__h2461 = $stime;
	  #0;
	end
    v__h2455 = v__h2461 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$display("%06d:[E]:%m.rl_process_rd_req: Unsupported addr", v__h2455);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] == 2'd0 &&
	  byte_addr__h1988[31:5] != 27'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	begin
	  v__h2286 = $stime;
	  #0;
	end
    v__h2280 = v__h2286 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$display("%06d:[E]:%m.rl_process_rd_req: Misaligned addr", v__h2280);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d12 &&
	  xactor_f_rd_addr_first_BITS_60_TO_29_0_ULT_rg__ETC___d14 &&
	  byte_addr__h1988[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	begin
	  v__h3567 = $stime;
	  #0;
	end
    v__h3561 = v__h3567 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$display("%06d:[E]:%m.rl_process_rd_req: Addr out of bounds",
		 v__h3561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$display("    UART base addr 0x%0h  limit addr 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("    AXI4 request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 ||
	   !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	begin
	  v__h5021 = $stime;
	  #0;
	end
    v__h5015 = v__h5021 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$display("%06d:[E]:%m.rl_process_wr_req: Unsupported addr", v__h5015);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d290)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_xactor_f_wr_addr_first__37_BITS_60_TO_29_3_ETC___d303)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  1'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	begin
	  v__h3951 = $stime;
	  #0;
	end
    v__h3945 = v__h3951 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$display("%06d:[E]:%m.rl_process_wr_req: Unsupported addr", v__h3945);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] == 2'd0 &&
	  byte_addr__h3516[31:5] != 27'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	begin
	  v__h3781 = $stime;
	  #0;
	end
    v__h3775 = v__h3781 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$display("%06d:[E]:%m.rl_process_wr_req: Misaligned addr", v__h3775);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d139 &&
	  xactor_f_wr_addr_first__37_BITS_60_TO_29_38_UL_ETC___d140 &&
	  byte_addr__h3516[1:0] != 2'd0)
	$write("\n");
    if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
      begin
        v__h5741 = $stime;
	#0;
      end
    v__h5735 = v__h5741 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
      $display("%06d:[W]:%m.set_addr_map: addr_base 0x%0h is not 8-Byte-aligned",
	       v__h5735,
	       set_addr_map_addr_base);
    if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
      begin
        v__h5847 = $stime;
	#0;
      end
    v__h5841 = v__h5847 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
      $display("%06d:[W]:%m.set_addr_map: addr_lim 0x%0h is not 8-Byte-aligned",
	       v__h5841,
	       set_addr_map_addr_lim);
  end
  // synopsys translate_on
endmodule  // mkUART

