//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// axi4_awready                   O     1 reg
// axi4_wready                    O     1 reg
// axi4_bvalid                    O     1 reg
// axi4_bid                       O     4 reg
// axi4_bresp                     O     2 reg
// axi4_arready                   O     1 reg
// axi4_rvalid                    O     1 reg
// axi4_rid                       O     4 reg
// axi4_rdata                     O    32 reg
// axi4_rresp                     O     2 reg
// axi4_rlast                     O     1 reg
// get_timer_interrupt_req_get    O     1 reg
// RDY_get_timer_interrupt_req_get  O     1 reg
// get_sw_interrupt_req_get       O     1 reg
// RDY_get_sw_interrupt_req_get   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// axi4_awvalid                   I     1
// axi4_awid                      I     4 reg
// axi4_awaddr                    I    32 reg
// axi4_awlen                     I     8 reg
// axi4_awsize                    I     3 reg
// axi4_awburst                   I     2 reg
// axi4_awlock                    I     1 reg
// axi4_awcache                   I     4 reg
// axi4_awprot                    I     3 reg
// axi4_awqos                     I     4 reg
// axi4_awregion                  I     4 reg
// axi4_wvalid                    I     1
// axi4_wdata                     I    32 reg
// axi4_wstrb                     I     4 reg
// axi4_wlast                     I     1 reg
// axi4_bready                    I     1
// axi4_arvalid                   I     1
// axi4_arid                      I     4 reg
// axi4_araddr                    I    32 reg
// axi4_arlen                     I     8 reg
// axi4_arsize                    I     3 reg
// axi4_arburst                   I     2 reg
// axi4_arlock                    I     1 reg
// axi4_arcache                   I     4 reg
// axi4_arprot                    I     3 reg
// axi4_arqos                     I     4 reg
// axi4_arregion                  I     4 reg
// axi4_rready                    I     1
// EN_get_timer_interrupt_req_get  I     1
// EN_get_sw_interrupt_req_get    I     1
//
// No combinational paths from inputs to outputs
//
//
// This module does not conduct address range checks.
// It is assumed that address range checks are the
// responsibility of the system AHB-L decoder.
// Resets on hard reset
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCLINT_AXI4(CLK,
		    RST_N,

		    axi4_awvalid,
		    axi4_awid,
		    axi4_awaddr,
		    axi4_awlen,
		    axi4_awsize,
		    axi4_awburst,
		    axi4_awlock,
		    axi4_awcache,
		    axi4_awprot,
		    axi4_awqos,
		    axi4_awregion,

		    axi4_awready,

		    axi4_wvalid,
		    axi4_wdata,
		    axi4_wstrb,
		    axi4_wlast,

		    axi4_wready,

		    axi4_bvalid,

		    axi4_bid,

		    axi4_bresp,

		    axi4_bready,

		    axi4_arvalid,
		    axi4_arid,
		    axi4_araddr,
		    axi4_arlen,
		    axi4_arsize,
		    axi4_arburst,
		    axi4_arlock,
		    axi4_arcache,
		    axi4_arprot,
		    axi4_arqos,
		    axi4_arregion,

		    axi4_arready,

		    axi4_rvalid,

		    axi4_rid,

		    axi4_rdata,

		    axi4_rresp,

		    axi4_rlast,

		    axi4_rready,

		    EN_get_timer_interrupt_req_get,
		    get_timer_interrupt_req_get,
		    RDY_get_timer_interrupt_req_get,

		    EN_get_sw_interrupt_req_get,
		    get_sw_interrupt_req_get,
		    RDY_get_sw_interrupt_req_get);
  input  CLK;
  input  RST_N;

  // action method axi4_m_awvalid
  input  axi4_awvalid;
  input  [3 : 0] axi4_awid;
  input  [31 : 0] axi4_awaddr;
  input  [7 : 0] axi4_awlen;
  input  [2 : 0] axi4_awsize;
  input  [1 : 0] axi4_awburst;
  input  axi4_awlock;
  input  [3 : 0] axi4_awcache;
  input  [2 : 0] axi4_awprot;
  input  [3 : 0] axi4_awqos;
  input  [3 : 0] axi4_awregion;

  // value method axi4_m_awready
  output axi4_awready;

  // action method axi4_m_wvalid
  input  axi4_wvalid;
  input  [31 : 0] axi4_wdata;
  input  [3 : 0] axi4_wstrb;
  input  axi4_wlast;

  // value method axi4_m_wready
  output axi4_wready;

  // value method axi4_m_bvalid
  output axi4_bvalid;

  // value method axi4_m_bid
  output [3 : 0] axi4_bid;

  // value method axi4_m_bresp
  output [1 : 0] axi4_bresp;

  // value method axi4_m_buser

  // action method axi4_m_bready
  input  axi4_bready;

  // action method axi4_m_arvalid
  input  axi4_arvalid;
  input  [3 : 0] axi4_arid;
  input  [31 : 0] axi4_araddr;
  input  [7 : 0] axi4_arlen;
  input  [2 : 0] axi4_arsize;
  input  [1 : 0] axi4_arburst;
  input  axi4_arlock;
  input  [3 : 0] axi4_arcache;
  input  [2 : 0] axi4_arprot;
  input  [3 : 0] axi4_arqos;
  input  [3 : 0] axi4_arregion;

  // value method axi4_m_arready
  output axi4_arready;

  // value method axi4_m_rvalid
  output axi4_rvalid;

  // value method axi4_m_rid
  output [3 : 0] axi4_rid;

  // value method axi4_m_rdata
  output [31 : 0] axi4_rdata;

  // value method axi4_m_rresp
  output [1 : 0] axi4_rresp;

  // value method axi4_m_rlast
  output axi4_rlast;

  // value method axi4_m_ruser

  // action method axi4_m_rready
  input  axi4_rready;

  // actionvalue method get_timer_interrupt_req_get
  input  EN_get_timer_interrupt_req_get;
  output get_timer_interrupt_req_get;
  output RDY_get_timer_interrupt_req_get;

  // actionvalue method get_sw_interrupt_req_get
  input  EN_get_sw_interrupt_req_get;
  output get_sw_interrupt_req_get;
  output RDY_get_sw_interrupt_req_get;

  // signals for module outputs
  wire [31 : 0] axi4_rdata;
  wire [3 : 0] axi4_bid, axi4_rid;
  wire [1 : 0] axi4_bresp, axi4_rresp;
  wire RDY_get_sw_interrupt_req_get,
       RDY_get_timer_interrupt_req_get,
       axi4_arready,
       axi4_awready,
       axi4_bvalid,
       axi4_rlast,
       axi4_rvalid,
       axi4_wready,
       get_sw_interrupt_req_get,
       get_timer_interrupt_req_get;

  // inlined wires
  wire [63 : 0] crg_time$port0__write_1,
		crg_time$port1__write_1,
		crg_time$port2__read,
		crg_timecmp$port1__write_1,
		crg_timecmp$port2__read;
  wire crg_time$EN_port1__write, crg_timecmp$EN_port1__write;

  // register crg_time
  reg [63 : 0] crg_time;
  wire [63 : 0] crg_time$D_IN;
  wire crg_time$EN;

  // register crg_timecmp
  reg [63 : 0] crg_timecmp;
  wire [63 : 0] crg_timecmp$D_IN;
  wire crg_timecmp$EN;

  // register rg_msip
  reg rg_msip;
  wire rg_msip$D_IN, rg_msip$EN;

  // register rg_mtip
  reg rg_mtip;
  wire rg_mtip$D_IN, rg_mtip$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // ports of submodule f_sw_interrupt_req
  wire f_sw_interrupt_req$CLR,
       f_sw_interrupt_req$DEQ,
       f_sw_interrupt_req$D_IN,
       f_sw_interrupt_req$D_OUT,
       f_sw_interrupt_req$EMPTY_N,
       f_sw_interrupt_req$ENQ,
       f_sw_interrupt_req$FULL_N;

  // ports of submodule f_timer_interrupt_req
  wire f_timer_interrupt_req$CLR,
       f_timer_interrupt_req$DEQ,
       f_timer_interrupt_req$D_IN,
       f_timer_interrupt_req$D_OUT,
       f_timer_interrupt_req$EMPTY_N,
       f_timer_interrupt_req$ENQ,
       f_timer_interrupt_req$FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [64 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [38 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [64 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [36 : 0] slave_xactor_f_wr_data$D_IN, slave_xactor_f_wr_data$D_OUT;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [5 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_compare,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_tick_timer,
       CAN_FIRE_axi4_m_arvalid,
       CAN_FIRE_axi4_m_awvalid,
       CAN_FIRE_axi4_m_bready,
       CAN_FIRE_axi4_m_rready,
       CAN_FIRE_axi4_m_wvalid,
       CAN_FIRE_get_sw_interrupt_req_get,
       CAN_FIRE_get_timer_interrupt_req_get,
       WILL_FIRE_RL_rl_compare,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_tick_timer,
       WILL_FIRE_axi4_m_arvalid,
       WILL_FIRE_axi4_m_awvalid,
       WILL_FIRE_axi4_m_bready,
       WILL_FIRE_axi4_m_rready,
       WILL_FIRE_axi4_m_wvalid,
       WILL_FIRE_get_sw_interrupt_req_get,
       WILL_FIRE_get_timer_interrupt_req_get;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_crg_time$port1__write_1__VAL_1,
		MUX_crg_timecmp$port1__write_1__VAL_1;
  wire MUX_crg_time$port1__write_1__SEL_1,
       MUX_crg_timecmp$port1__write_1__SEL_1,
       MUX_rg_msip$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1837;
  reg [31 : 0] v__h7050;
  reg [31 : 0] v__h1831;
  reg [31 : 0] v__h7044;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h1998;
  reg [1 : 0] CASE_slave_xactor_f_wr_addrD_OUT_BITS_44_TO_2_ETC__q1,
	      rresp__h1739;
  wire [63 : 0] mask__h2468,
		mask__h4715,
		new_data__h2466,
		new_data__h4713,
		new_time__h3542,
		new_time__h5831,
		new_timecmp__h2443,
		new_timecmp__h4690,
		old_time__h5827,
		rdata___1__h1756,
		rdata___1__h2027,
		rdata___1__h2060,
		x__h2479,
		x__h3578,
		x__h4726,
		x__h5867,
		y__h2480,
		y__h2481,
		y__h4727,
		y__h4728;
  wire [7 : 0] SEXT_slave_xactor_f_wr_data_first__0_BIT_1_07___d108,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_2_04___d105,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_3_00___d101,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_4_7___d98;
  wire NOT_crg_time_port0__read_ULT_crg_timecmp_port0_ETC___d12,
       rg_msip_2_EQ_slave_xactor_f_wr_data_first__0_B_ETC___d82;

  // action method axi4_m_awvalid
  assign CAN_FIRE_axi4_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4_m_awvalid = 1'd1 ;

  // value method axi4_m_awready
  assign axi4_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method axi4_m_wvalid
  assign CAN_FIRE_axi4_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4_m_wvalid = 1'd1 ;

  // value method axi4_m_wready
  assign axi4_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method axi4_m_bvalid
  assign axi4_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method axi4_m_bid
  assign axi4_bid = slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method axi4_m_bresp
  assign axi4_bresp = slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // action method axi4_m_bready
  assign CAN_FIRE_axi4_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4_m_bready = 1'd1 ;

  // action method axi4_m_arvalid
  assign CAN_FIRE_axi4_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4_m_arvalid = 1'd1 ;

  // value method axi4_m_arready
  assign axi4_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method axi4_m_rvalid
  assign axi4_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method axi4_m_rid
  assign axi4_rid = slave_xactor_f_rd_data$D_OUT[38:35] ;

  // value method axi4_m_rdata
  assign axi4_rdata = slave_xactor_f_rd_data$D_OUT[34:3] ;

  // value method axi4_m_rresp
  assign axi4_rresp = slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method axi4_m_rlast
  assign axi4_rlast = slave_xactor_f_rd_data$D_OUT[0] ;

  // action method axi4_m_rready
  assign CAN_FIRE_axi4_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4_m_rready = 1'd1 ;

  // actionvalue method get_timer_interrupt_req_get
  assign get_timer_interrupt_req_get = f_timer_interrupt_req$D_OUT ;
  assign RDY_get_timer_interrupt_req_get = f_timer_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_timer_interrupt_req_get =
	     f_timer_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_timer_interrupt_req_get =
	     EN_get_timer_interrupt_req_get ;

  // actionvalue method get_sw_interrupt_req_get
  assign get_sw_interrupt_req_get = f_sw_interrupt_req$D_OUT ;
  assign RDY_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_sw_interrupt_req_get = EN_get_sw_interrupt_req_get ;

  // submodule f_sw_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_sw_interrupt_req(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_sw_interrupt_req$D_IN),
							    .ENQ(f_sw_interrupt_req$ENQ),
							    .DEQ(f_sw_interrupt_req$DEQ),
							    .CLR(f_sw_interrupt_req$CLR),
							    .D_OUT(f_sw_interrupt_req$D_OUT),
							    .FULL_N(f_sw_interrupt_req$FULL_N),
							    .EMPTY_N(f_sw_interrupt_req$EMPTY_N));

  // submodule f_timer_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_timer_interrupt_req(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_timer_interrupt_req$D_IN),
							       .ENQ(f_timer_interrupt_req$ENQ),
							       .DEQ(f_timer_interrupt_req$DEQ),
							       .CLR(f_timer_interrupt_req$CLR),
							       .D_OUT(f_timer_interrupt_req$D_OUT),
							       .FULL_N(f_timer_interrupt_req$FULL_N),
							       .EMPTY_N(f_timer_interrupt_req$EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_rd_addr$D_IN),
								 .ENQ(slave_xactor_f_rd_addr$ENQ),
								 .DEQ(slave_xactor_f_rd_addr$DEQ),
								 .CLR(slave_xactor_f_rd_addr$CLR),
								 .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								 .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								 .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_rd_data$D_IN),
								 .ENQ(slave_xactor_f_rd_data$ENQ),
								 .DEQ(slave_xactor_f_rd_data$DEQ),
								 .CLR(slave_xactor_f_rd_data$CLR),
								 .D_OUT(slave_xactor_f_rd_data$D_OUT),
								 .FULL_N(slave_xactor_f_rd_data$FULL_N),
								 .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_addr$D_IN),
								 .ENQ(slave_xactor_f_wr_addr$ENQ),
								 .DEQ(slave_xactor_f_wr_addr$DEQ),
								 .CLR(slave_xactor_f_wr_addr$CLR),
								 .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								 .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd37), .guarded(1'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_data$D_IN),
								 .ENQ(slave_xactor_f_wr_data$ENQ),
								 .DEQ(slave_xactor_f_wr_data$DEQ),
								 .CLR(slave_xactor_f_wr_data$CLR),
								 .D_OUT(slave_xactor_f_wr_data$D_OUT),
								 .FULL_N(slave_xactor_f_wr_data$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(slave_xactor_f_wr_resp$D_IN),
								.ENQ(slave_xactor_f_wr_resp$ENQ),
								.DEQ(slave_xactor_f_wr_resp$DEQ),
								.CLR(slave_xactor_f_wr_resp$CLR),
								.D_OUT(slave_xactor_f_wr_resp$D_OUT),
								.FULL_N(slave_xactor_f_wr_resp$FULL_N),
								.EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = !rg_state ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_compare
  assign CAN_FIRE_RL_rl_compare =
	     f_timer_interrupt_req$FULL_N && rg_state &&
	     rg_mtip !=
	     NOT_crg_time_port0__read_ULT_crg_timecmp_port0_ETC___d12 ;
  assign WILL_FIRE_RL_rl_compare = CAN_FIRE_RL_rl_compare ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N &&
	     slave_xactor_f_rd_data$FULL_N &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_tick_timer
  assign CAN_FIRE_RL_rl_tick_timer =
	     rg_state && crg_time != 64'hFFFFFFFFFFFFFFFF ;
  assign WILL_FIRE_RL_rl_tick_timer = CAN_FIRE_RL_rl_tick_timer ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     slave_xactor_f_wr_resp$FULL_N &&
	     (slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 ||
	      rg_msip_2_EQ_slave_xactor_f_wr_data_first__0_B_ETC___d82 ||
	      f_sw_interrupt_req$FULL_N) &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // inputs to muxes for submodule ports
  assign MUX_crg_time$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd49144 ||
	      slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd49148) ;
  assign MUX_crg_timecmp$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd16384 ||
	      slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd16388) ;
  assign MUX_rg_msip$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd0 &&
	     !rg_msip_2_EQ_slave_xactor_f_wr_data_first__0_B_ETC___d82 ;
  assign MUX_crg_time$port1__write_1__VAL_1 =
	     (slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd49144) ?
	       new_time__h3542 :
	       new_time__h5831 ;
  assign MUX_crg_timecmp$port1__write_1__VAL_1 =
	     (slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd16384) ?
	       new_timecmp__h2443 :
	       new_timecmp__h4690 ;

  // inlined wires
  assign crg_time$port0__write_1 = crg_time + 64'd1 ;
  assign crg_time$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd49144 ||
	      slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd49148) ||
	     WILL_FIRE_RL_rl_reset ;
  assign crg_time$port1__write_1 =
	     MUX_crg_time$port1__write_1__SEL_1 ?
	       MUX_crg_time$port1__write_1__VAL_1 :
	       64'd1 ;
  assign crg_time$port2__read =
	     crg_time$EN_port1__write ?
	       crg_time$port1__write_1 :
	       old_time__h5827 ;
  assign crg_timecmp$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd16384 ||
	      slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd16388) ||
	     WILL_FIRE_RL_rl_reset ;
  assign crg_timecmp$port1__write_1 =
	     MUX_crg_timecmp$port1__write_1__SEL_1 ?
	       MUX_crg_timecmp$port1__write_1__VAL_1 :
	       64'd0 ;
  assign crg_timecmp$port2__read =
	     crg_timecmp$EN_port1__write ?
	       crg_timecmp$port1__write_1 :
	       crg_timecmp ;

  // register crg_time
  assign crg_time$D_IN = crg_time$port2__read ;
  assign crg_time$EN = 1'b1 ;

  // register crg_timecmp
  assign crg_timecmp$D_IN = crg_timecmp$port2__read ;
  assign crg_timecmp$EN = 1'b1 ;

  // register rg_msip
  assign rg_msip$D_IN =
	     MUX_rg_msip$write_1__SEL_1 && slave_xactor_f_wr_data$D_OUT[5] ;
  assign rg_msip$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     slave_xactor_f_wr_addr$D_OUT[44:29] == 16'd0 &&
	     !rg_msip_2_EQ_slave_xactor_f_wr_data_first__0_B_ETC___d82 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_mtip
  assign rg_mtip$D_IN =
	     !WILL_FIRE_RL_rl_compare ||
	     NOT_crg_time_port0__read_ULT_crg_timecmp_port0_ETC___d12 ;
  assign rg_mtip$EN = WILL_FIRE_RL_rl_compare || WILL_FIRE_RL_rl_reset ;

  // register rg_state
  assign rg_state$D_IN = 1'd1 ;
  assign rg_state$EN = CAN_FIRE_RL_rl_reset ;

  // submodule f_sw_interrupt_req
  assign f_sw_interrupt_req$D_IN = slave_xactor_f_wr_data$D_OUT[5] ;
  assign f_sw_interrupt_req$ENQ = MUX_rg_msip$write_1__SEL_1 ;
  assign f_sw_interrupt_req$DEQ = EN_get_sw_interrupt_req_get ;
  assign f_sw_interrupt_req$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule f_timer_interrupt_req
  assign f_timer_interrupt_req$D_IN =
	     NOT_crg_time_port0__read_ULT_crg_timecmp_port0_ETC___d12 ;
  assign f_timer_interrupt_req$ENQ = CAN_FIRE_RL_rl_compare ;
  assign f_timer_interrupt_req$DEQ = EN_get_timer_interrupt_req_get ;
  assign f_timer_interrupt_req$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN =
	     { axi4_arid,
	       axi4_araddr,
	       axi4_arlen,
	       axi4_arsize,
	       axi4_arburst,
	       axi4_arlock,
	       axi4_arcache,
	       axi4_arprot,
	       axi4_arqos,
	       axi4_arregion } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     axi4_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_addr$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     { slave_xactor_f_rd_addr$D_OUT[64:61],
	       x__h1998[31:0],
	       rresp__h1739,
	       1'd1 } ;
  assign slave_xactor_f_rd_data$ENQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_data$DEQ =
	     axi4_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN =
	     { axi4_awid,
	       axi4_awaddr,
	       axi4_awlen,
	       axi4_awsize,
	       axi4_awburst,
	       axi4_awlock,
	       axi4_awcache,
	       axi4_awprot,
	       axi4_awqos,
	       axi4_awregion } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     axi4_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_addr$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN =
	     { axi4_wdata, axi4_wstrb, axi4_wlast } ;
  assign slave_xactor_f_wr_data$ENQ =
	     axi4_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_data$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     { slave_xactor_f_wr_addr$D_OUT[64:61],
	       CASE_slave_xactor_f_wr_addrD_OUT_BITS_44_TO_2_ETC__q1 } ;
  assign slave_xactor_f_wr_resp$ENQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_resp$DEQ =
	     axi4_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = CAN_FIRE_RL_rl_reset ;

  // remaining internal signals
  assign NOT_crg_time_port0__read_ULT_crg_timecmp_port0_ETC___d12 =
	     crg_time >= crg_timecmp ;
  assign SEXT_slave_xactor_f_wr_data_first__0_BIT_1_07___d108 =
	     {8{slave_xactor_f_wr_data$D_OUT[1]}} ;
  assign SEXT_slave_xactor_f_wr_data_first__0_BIT_2_04___d105 =
	     {8{slave_xactor_f_wr_data$D_OUT[2]}} ;
  assign SEXT_slave_xactor_f_wr_data_first__0_BIT_3_00___d101 =
	     {8{slave_xactor_f_wr_data$D_OUT[3]}} ;
  assign SEXT_slave_xactor_f_wr_data_first__0_BIT_4_7___d98 =
	     {8{slave_xactor_f_wr_data$D_OUT[4]}} ;
  assign mask__h2468 =
	     { 32'd0,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_4_7___d98,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_3_00___d101,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_2_04___d105,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_1_07___d108 } ;
  assign mask__h4715 =
	     { SEXT_slave_xactor_f_wr_data_first__0_BIT_4_7___d98,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_3_00___d101,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_2_04___d105,
	       SEXT_slave_xactor_f_wr_data_first__0_BIT_1_07___d108,
	       32'd0 } ;
  assign new_data__h2466 = { 32'd0, slave_xactor_f_wr_data$D_OUT[36:5] } ;
  assign new_data__h4713 = { slave_xactor_f_wr_data$D_OUT[36:5], 32'd0 } ;
  assign new_time__h3542 = x__h3578 | y__h2480 ;
  assign new_time__h5831 = x__h5867 | y__h4727 ;
  assign new_timecmp__h2443 = x__h2479 | y__h2480 ;
  assign new_timecmp__h4690 = x__h4726 | y__h4727 ;
  assign old_time__h5827 =
	     CAN_FIRE_RL_rl_tick_timer ? crg_time$port0__write_1 : crg_time ;
  assign rdata___1__h1756 = { 63'd0, rg_msip } ;
  assign rdata___1__h2027 = { 32'd0, crg_timecmp[63:32] } ;
  assign rdata___1__h2060 = { 32'd0, crg_time[63:32] } ;
  assign rg_msip_2_EQ_slave_xactor_f_wr_data_first__0_B_ETC___d82 =
	     rg_msip == slave_xactor_f_wr_data$D_OUT[5] ;
  assign x__h2479 = crg_timecmp & y__h2481 ;
  assign x__h3578 = old_time__h5827 & y__h2481 ;
  assign x__h4726 = crg_timecmp & y__h4728 ;
  assign x__h5867 = old_time__h5827 & y__h4728 ;
  assign y__h2480 = new_data__h2466 & mask__h2468 ;
  assign y__h2481 =
	     { 32'hFFFFFFFF,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_4_7___d98,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_3_00___d101,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_2_04___d105,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_1_07___d108 } ;
  assign y__h4727 = new_data__h4713 & mask__h4715 ;
  assign y__h4728 =
	     { ~SEXT_slave_xactor_f_wr_data_first__0_BIT_4_7___d98,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_3_00___d101,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_2_04___d105,
	       ~SEXT_slave_xactor_f_wr_data_first__0_BIT_1_07___d108,
	       32'hFFFFFFFF } ;
  always@(slave_xactor_f_rd_addr$D_OUT)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[44:29])
      16'd0, 16'd4, 16'd16384, 16'd16388, 16'd49144, 16'd49148:
	  rresp__h1739 = 2'b0;
      default: rresp__h1739 = 2'b11;
    endcase
  end
  always@(slave_xactor_f_rd_addr$D_OUT or
	  rdata___1__h1756 or
	  crg_timecmp or rdata___1__h2027 or crg_time or rdata___1__h2060)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[44:29])
      16'd0: x__h1998 = rdata___1__h1756;
      16'd4: x__h1998 = 64'd0;
      16'd16384: x__h1998 = crg_timecmp;
      16'd16388: x__h1998 = rdata___1__h2027;
      16'd49144: x__h1998 = crg_time;
      16'd49148: x__h1998 = rdata___1__h2060;
      default: x__h1998 = 64'd0;
    endcase
  end
  always@(slave_xactor_f_wr_addr$D_OUT)
  begin
    case (slave_xactor_f_wr_addr$D_OUT[44:29])
      16'd0, 16'd4, 16'd16384, 16'd16388, 16'd49144, 16'd49148:
	  CASE_slave_xactor_f_wr_addrD_OUT_BITS_44_TO_2_ETC__q1 = 2'b0;
      default: CASE_slave_xactor_f_wr_addrD_OUT_BITS_44_TO_2_ETC__q1 = 2'b11;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        crg_time <= `BSV_ASSIGNMENT_DELAY 64'd1;
	crg_timecmp <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (crg_time$EN) crg_time <= `BSV_ASSIGNMENT_DELAY crg_time$D_IN;
	if (crg_timecmp$EN)
	  crg_timecmp <= `BSV_ASSIGNMENT_DELAY crg_timecmp$D_IN;
	if (rg_mtip$EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_msip$EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    crg_time = 64'hAAAAAAAAAAAAAAAA;
    crg_timecmp = 64'hAAAAAAAAAAAAAAAA;
    rg_msip = 1'h0;
    rg_mtip = 1'h0;
    rg_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	begin
	  v__h1837 = $stime;
	  #0;
	end
    v__h1831 = v__h1837 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$display("%06d:[E]:%m.rl_process_rd_req: unrecognized addr",
		 v__h1831);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_rd_addr$D_OUT[44:29] != 16'd49148)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	begin
	  v__h7050 = $stime;
	  #0;
	end
    v__h7044 = v__h7050 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$display("%06d:[E]:%m.rl_process_wr_req: unrecognized addr",
		 v__h7044);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148 &&
	  slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148 &&
	  !slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd0 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16384 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49144 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd4 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd16388 &&
	  slave_xactor_f_wr_addr$D_OUT[44:29] != 16'd49148)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkCLINT_AXI4

