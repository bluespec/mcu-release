//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_imem_req                   O     1
// imem_instr                     O    37
// RDY_imem_instr                 O     1
// RDY_dmem_req                   O     1
// dmem_word32_get                O    32 reg
// RDY_dmem_word32_get            O     1
// dmem_exc_get                   O     5 reg
// RDY_dmem_exc_get               O     1
// dmem_master_HADDR              O    32 reg
// dmem_master_HBURST             O     3 const
// dmem_master_HMASTLOCK          O     1 const
// dmem_master_HPROT              O     4 const
// dmem_master_HSIZE              O     3 reg
// dmem_master_HTRANS             O     2 reg
// dmem_master_HWDATA             O    32 reg
// dmem_master_HWRITE             O     1 reg
// RDY_set_watch_tohost           O     1 reg
// mv_tohost_value                O    32 reg
// RDY_mv_tohost_value            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_req_addr                  I    32
// dmem_req_op                    I     1
// dmem_req_f3                    I     3
// dmem_req_addr                  I    32
// dmem_req_store_value           I    32 reg
// dmem_master_HRDATA             I    32 reg
// dmem_master_HREADY             I     1
// dmem_master_HRESP              I     1
// set_watch_tohost_watch_tohost  I     1
// set_watch_tohost_tohost_addr   I    32 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_imem_req                    I     1
// EN_dmem_req                    I     1
// EN_set_watch_tohost            I     1
// EN_imem_instr                  I     1
// EN_dmem_word32_get             I     1
// EN_dmem_exc_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem(CLK,
		  RST_N,

		  EN_server_reset_request_put,
		  RDY_server_reset_request_put,

		  EN_server_reset_response_get,
		  RDY_server_reset_response_get,

		  imem_req_addr,
		  EN_imem_req,
		  RDY_imem_req,

		  EN_imem_instr,
		  imem_instr,
		  RDY_imem_instr,

		  dmem_req_op,
		  dmem_req_f3,
		  dmem_req_addr,
		  dmem_req_store_value,
		  EN_dmem_req,
		  RDY_dmem_req,

		  EN_dmem_word32_get,
		  dmem_word32_get,
		  RDY_dmem_word32_get,

		  EN_dmem_exc_get,
		  dmem_exc_get,
		  RDY_dmem_exc_get,

		  dmem_master_HADDR,

		  dmem_master_HBURST,

		  dmem_master_HMASTLOCK,

		  dmem_master_HPROT,

		  dmem_master_HSIZE,

		  dmem_master_HTRANS,

		  dmem_master_HWDATA,

		  dmem_master_HWRITE,

		  dmem_master_HRDATA,

		  dmem_master_HREADY,

		  dmem_master_HRESP,

		  set_watch_tohost_watch_tohost,
		  set_watch_tohost_tohost_addr,
		  EN_set_watch_tohost,
		  RDY_set_watch_tohost,

		  mv_tohost_value,
		  RDY_mv_tohost_value);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method imem_req
  input  [31 : 0] imem_req_addr;
  input  EN_imem_req;
  output RDY_imem_req;

  // actionvalue method imem_instr
  input  EN_imem_instr;
  output [36 : 0] imem_instr;
  output RDY_imem_instr;

  // action method dmem_req
  input  dmem_req_op;
  input  [2 : 0] dmem_req_f3;
  input  [31 : 0] dmem_req_addr;
  input  [31 : 0] dmem_req_store_value;
  input  EN_dmem_req;
  output RDY_dmem_req;

  // actionvalue method dmem_word32_get
  input  EN_dmem_word32_get;
  output [31 : 0] dmem_word32_get;
  output RDY_dmem_word32_get;

  // actionvalue method dmem_exc_get
  input  EN_dmem_exc_get;
  output [4 : 0] dmem_exc_get;
  output RDY_dmem_exc_get;

  // value method dmem_master_haddr
  output [31 : 0] dmem_master_HADDR;

  // value method dmem_master_hburst
  output [2 : 0] dmem_master_HBURST;

  // value method dmem_master_hmastlock
  output dmem_master_HMASTLOCK;

  // value method dmem_master_hprot
  output [3 : 0] dmem_master_HPROT;

  // value method dmem_master_hsize
  output [2 : 0] dmem_master_HSIZE;

  // value method dmem_master_htrans
  output [1 : 0] dmem_master_HTRANS;

  // value method dmem_master_hwdata
  output [31 : 0] dmem_master_HWDATA;

  // value method dmem_master_hwrite
  output dmem_master_HWRITE;

  // action method dmem_master_hrdata
  input  [31 : 0] dmem_master_HRDATA;

  // action method dmem_master_hready
  input  dmem_master_HREADY;

  // action method dmem_master_hresp
  input  dmem_master_HRESP;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [31 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [31 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [36 : 0] imem_instr;
  wire [31 : 0] dmem_master_HADDR,
		dmem_master_HWDATA,
		dmem_word32_get,
		mv_tohost_value;
  wire [4 : 0] dmem_exc_get;
  wire [3 : 0] dmem_master_HPROT;
  wire [2 : 0] dmem_master_HBURST, dmem_master_HSIZE;
  wire [1 : 0] dmem_master_HTRANS;
  wire RDY_dmem_exc_get,
       RDY_dmem_req,
       RDY_dmem_word32_get,
       RDY_imem_instr,
       RDY_imem_req,
       RDY_mv_tohost_value,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_watch_tohost,
       dmem_master_HMASTLOCK,
       dmem_master_HWRITE;

  // ports of submodule addr_map
  wire [31 : 0] addr_map$m_is_dtcm_addr_addr, addr_map$m_is_itcm_addr_addr;

  // ports of submodule dtcm
  wire [31 : 0] dtcm$dmem_req_addr,
		dtcm$dmem_req_store_value,
		dtcm$dmem_word32_get,
		dtcm$mem_master_HADDR,
		dtcm$mem_master_HRDATA,
		dtcm$mem_master_HWDATA,
		dtcm$mv_tohost_value,
		dtcm$set_watch_tohost_tohost_addr;
  wire [4 : 0] dtcm$dmem_exc_get;
  wire [3 : 0] dtcm$mem_master_HPROT;
  wire [2 : 0] dtcm$dmem_req_f3,
	       dtcm$mem_master_HBURST,
	       dtcm$mem_master_HSIZE;
  wire [1 : 0] dtcm$mem_master_HTRANS;
  wire dtcm$EN_dmem_exc_get,
       dtcm$EN_dmem_req,
       dtcm$EN_dmem_word32_get,
       dtcm$EN_server_reset_request_put,
       dtcm$EN_server_reset_response_get,
       dtcm$EN_set_watch_tohost,
       dtcm$RDY_dmem_exc_get,
       dtcm$RDY_dmem_req,
       dtcm$RDY_dmem_word32_get,
       dtcm$RDY_mv_tohost_value,
       dtcm$RDY_server_reset_request_put,
       dtcm$RDY_server_reset_response_get,
       dtcm$RDY_set_watch_tohost,
       dtcm$dmem_req_op,
       dtcm$mem_master_HMASTLOCK,
       dtcm$mem_master_HREADY,
       dtcm$mem_master_HRESP,
       dtcm$mem_master_HWRITE,
       dtcm$set_watch_tohost_watch_tohost;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule itcm
  wire [36 : 0] itcm$imem_instr;
  wire [31 : 0] itcm$imem_req_addr;
  wire itcm$EN_imem_instr,
       itcm$EN_imem_req,
       itcm$EN_server_reset_request_put,
       itcm$EN_server_reset_response_get,
       itcm$RDY_imem_instr,
       itcm$RDY_imem_req,
       itcm$RDY_server_reset_request_put,
       itcm$RDY_server_reset_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_dmem_exc_get,
       CAN_FIRE_dmem_master_hrdata,
       CAN_FIRE_dmem_master_hready,
       CAN_FIRE_dmem_master_hresp,
       CAN_FIRE_dmem_req,
       CAN_FIRE_dmem_word32_get,
       CAN_FIRE_imem_instr,
       CAN_FIRE_imem_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_dmem_exc_get,
       WILL_FIRE_dmem_master_hrdata,
       WILL_FIRE_dmem_master_hready,
       WILL_FIRE_dmem_master_hresp,
       WILL_FIRE_dmem_req,
       WILL_FIRE_dmem_word32_get,
       WILL_FIRE_imem_instr,
       WILL_FIRE_imem_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_watch_tohost;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method imem_req
  assign RDY_imem_req = itcm$RDY_imem_req ;
  assign CAN_FIRE_imem_req = itcm$RDY_imem_req ;
  assign WILL_FIRE_imem_req = EN_imem_req ;

  // actionvalue method imem_instr
  assign imem_instr = itcm$imem_instr ;
  assign RDY_imem_instr = itcm$RDY_imem_instr ;
  assign CAN_FIRE_imem_instr = itcm$RDY_imem_instr ;
  assign WILL_FIRE_imem_instr = EN_imem_instr ;

  // action method dmem_req
  assign RDY_dmem_req = dtcm$RDY_dmem_req ;
  assign CAN_FIRE_dmem_req = dtcm$RDY_dmem_req ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // actionvalue method dmem_word32_get
  assign dmem_word32_get = dtcm$dmem_word32_get ;
  assign RDY_dmem_word32_get = dtcm$RDY_dmem_word32_get ;
  assign CAN_FIRE_dmem_word32_get = dtcm$RDY_dmem_word32_get ;
  assign WILL_FIRE_dmem_word32_get = EN_dmem_word32_get ;

  // actionvalue method dmem_exc_get
  assign dmem_exc_get = dtcm$dmem_exc_get ;
  assign RDY_dmem_exc_get = dtcm$RDY_dmem_exc_get ;
  assign CAN_FIRE_dmem_exc_get = dtcm$RDY_dmem_exc_get ;
  assign WILL_FIRE_dmem_exc_get = EN_dmem_exc_get ;

  // value method dmem_master_haddr
  assign dmem_master_HADDR = dtcm$mem_master_HADDR ;

  // value method dmem_master_hburst
  assign dmem_master_HBURST = dtcm$mem_master_HBURST ;

  // value method dmem_master_hmastlock
  assign dmem_master_HMASTLOCK = dtcm$mem_master_HMASTLOCK ;

  // value method dmem_master_hprot
  assign dmem_master_HPROT = dtcm$mem_master_HPROT ;

  // value method dmem_master_hsize
  assign dmem_master_HSIZE = dtcm$mem_master_HSIZE ;

  // value method dmem_master_htrans
  assign dmem_master_HTRANS = dtcm$mem_master_HTRANS ;

  // value method dmem_master_hwdata
  assign dmem_master_HWDATA = dtcm$mem_master_HWDATA ;

  // value method dmem_master_hwrite
  assign dmem_master_HWRITE = dtcm$mem_master_HWRITE ;

  // action method dmem_master_hrdata
  assign CAN_FIRE_dmem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_dmem_master_hrdata = 1'd1 ;

  // action method dmem_master_hready
  assign CAN_FIRE_dmem_master_hready = 1'd1 ;
  assign WILL_FIRE_dmem_master_hready = 1'd1 ;

  // action method dmem_master_hresp
  assign CAN_FIRE_dmem_master_hresp = 1'd1 ;
  assign WILL_FIRE_dmem_master_hresp = 1'd1 ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = dtcm$RDY_set_watch_tohost ;
  assign CAN_FIRE_set_watch_tohost = dtcm$RDY_set_watch_tohost ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = dtcm$mv_tohost_value ;
  assign RDY_mv_tohost_value = dtcm$RDY_mv_tohost_value ;

  // submodule addr_map
  mkCore_Map addr_map(.CLK(CLK),
		      .RST_N(RST_N),
		      .m_is_dtcm_addr_addr(addr_map$m_is_dtcm_addr_addr),
		      .m_is_itcm_addr_addr(addr_map$m_is_itcm_addr_addr),
		      .m_itcm_addr_base(),
		      .m_itcm_addr_size(),
		      .m_itcm_addr_lim(),
		      .m_is_itcm_addr(),
		      .m_dtcm_addr_base(),
		      .m_dtcm_addr_size(),
		      .m_dtcm_addr_lim(),
		      .m_is_dtcm_addr(),
		      .m_pc_reset_value(),
		      .m_mtvec_reset_value());

  // submodule dtcm
  mkDTCM dtcm(.verbosity(2'd0),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .dmem_req_addr(dtcm$dmem_req_addr),
	      .dmem_req_f3(dtcm$dmem_req_f3),
	      .dmem_req_op(dtcm$dmem_req_op),
	      .dmem_req_store_value(dtcm$dmem_req_store_value),
	      .mem_master_HRDATA(dtcm$mem_master_HRDATA),
	      .mem_master_HREADY(dtcm$mem_master_HREADY),
	      .mem_master_HRESP(dtcm$mem_master_HRESP),
	      .set_watch_tohost_tohost_addr(dtcm$set_watch_tohost_tohost_addr),
	      .set_watch_tohost_watch_tohost(dtcm$set_watch_tohost_watch_tohost),
	      .EN_server_reset_request_put(dtcm$EN_server_reset_request_put),
	      .EN_server_reset_response_get(dtcm$EN_server_reset_response_get),
	      .EN_dmem_req(dtcm$EN_dmem_req),
	      .EN_dmem_word32_get(dtcm$EN_dmem_word32_get),
	      .EN_dmem_exc_get(dtcm$EN_dmem_exc_get),
	      .EN_set_watch_tohost(dtcm$EN_set_watch_tohost),
	      .RDY_server_reset_request_put(dtcm$RDY_server_reset_request_put),
	      .RDY_server_reset_response_get(dtcm$RDY_server_reset_response_get),
	      .RDY_dmem_req(dtcm$RDY_dmem_req),
	      .dmem_word32_get(dtcm$dmem_word32_get),
	      .RDY_dmem_word32_get(dtcm$RDY_dmem_word32_get),
	      .dmem_exc_get(dtcm$dmem_exc_get),
	      .RDY_dmem_exc_get(dtcm$RDY_dmem_exc_get),
	      .mem_master_HADDR(dtcm$mem_master_HADDR),
	      .mem_master_HBURST(dtcm$mem_master_HBURST),
	      .mem_master_HMASTLOCK(dtcm$mem_master_HMASTLOCK),
	      .mem_master_HPROT(dtcm$mem_master_HPROT),
	      .mem_master_HSIZE(dtcm$mem_master_HSIZE),
	      .mem_master_HTRANS(dtcm$mem_master_HTRANS),
	      .mem_master_HWDATA(dtcm$mem_master_HWDATA),
	      .mem_master_HWRITE(dtcm$mem_master_HWRITE),
	      .RDY_set_watch_tohost(dtcm$RDY_set_watch_tohost),
	      .mv_tohost_value(dtcm$mv_tohost_value),
	      .RDY_mv_tohost_value(dtcm$RDY_mv_tohost_value));

  // submodule f_reset_reqs
  FIFO10 #(.guarded(1'd1)) f_reset_reqs(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_reqs$ENQ),
					.DEQ(f_reset_reqs$DEQ),
					.CLR(f_reset_reqs$CLR),
					.FULL_N(f_reset_reqs$FULL_N),
					.EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO10 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule itcm
  mkITCM itcm(.verbosity(2'd0),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .imem_req_addr(itcm$imem_req_addr),
	      .EN_server_reset_request_put(itcm$EN_server_reset_request_put),
	      .EN_server_reset_response_get(itcm$EN_server_reset_response_get),
	      .EN_imem_req(itcm$EN_imem_req),
	      .EN_imem_instr(itcm$EN_imem_instr),
	      .RDY_server_reset_request_put(itcm$RDY_server_reset_request_put),
	      .RDY_server_reset_response_get(itcm$RDY_server_reset_response_get),
	      .RDY_imem_req(itcm$RDY_imem_req),
	      .imem_instr(itcm$imem_instr),
	      .RDY_imem_instr(itcm$RDY_imem_instr));

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     itcm$RDY_server_reset_response_get &&
	     dtcm$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     itcm$RDY_server_reset_request_put &&
	     dtcm$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // submodule addr_map
  assign addr_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign addr_map$m_is_itcm_addr_addr = 32'h0 ;

  // submodule dtcm
  assign dtcm$dmem_req_addr = dmem_req_addr ;
  assign dtcm$dmem_req_f3 = dmem_req_f3 ;
  assign dtcm$dmem_req_op = dmem_req_op ;
  assign dtcm$dmem_req_store_value = dmem_req_store_value ;
  assign dtcm$mem_master_HRDATA = dmem_master_HRDATA ;
  assign dtcm$mem_master_HREADY = dmem_master_HREADY ;
  assign dtcm$mem_master_HRESP = dmem_master_HRESP ;
  assign dtcm$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign dtcm$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign dtcm$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign dtcm$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_complete ;
  assign dtcm$EN_dmem_req = EN_dmem_req ;
  assign dtcm$EN_dmem_word32_get = EN_dmem_word32_get ;
  assign dtcm$EN_dmem_exc_get = EN_dmem_exc_get ;
  assign dtcm$EN_set_watch_tohost = EN_set_watch_tohost ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     itcm$RDY_server_reset_request_put &&
	     dtcm$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     itcm$RDY_server_reset_response_get &&
	     dtcm$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule itcm
  assign itcm$imem_req_addr = imem_req_addr ;
  assign itcm$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign itcm$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_complete ;
  assign itcm$EN_imem_req = EN_imem_req ;
  assign itcm$EN_imem_instr = EN_imem_instr ;
endmodule  // mkNear_Mem

