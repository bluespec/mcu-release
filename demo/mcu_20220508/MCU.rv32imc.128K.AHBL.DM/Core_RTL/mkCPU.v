//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// dmem_master_HADDR              O    32 reg
// dmem_master_HBURST             O     3 const
// dmem_master_HMASTLOCK          O     1 const
// dmem_master_HPROT              O     4 const
// dmem_master_HSIZE              O     3 reg
// dmem_master_HTRANS             O     2 reg
// dmem_master_HWDATA             O    32 reg
// dmem_master_HWRITE             O     1 reg
// RDY_dbg_server_request_put     O     1
// dbg_server_response_get        O    34
// RDY_dbg_server_response_get    O     1
// RDY_dma_server_request_put     O     1
// dma_server_response_get        O     1 reg
// RDY_dma_server_response_get    O     1 reg
// RDY_debug_hart_reset_server_request_put  O     1 reg
// debug_hart_reset_server_response_get  O     1 reg
// RDY_debug_hart_reset_server_response_get  O     1 reg
// RDY_debug_hart_server_run_halt_request_put  O     1 reg
// debug_hart_server_run_halt_response_get  O     1 reg
// RDY_debug_hart_server_run_halt_response_get  O     1 reg
// RDY_debug_hart_put_other_req_put  O     1 const
// RDY_debug_hart_gpr_mem_server_request_put  O     1 reg
// debug_hart_gpr_mem_server_response_get  O    33 reg
// RDY_debug_hart_gpr_mem_server_response_get  O     1 reg
// RDY_debug_hart_csr_mem_server_request_put  O     1 reg
// debug_hart_csr_mem_server_response_get  O    33 reg
// RDY_debug_hart_csr_mem_server_response_get  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dmem_master_HRDATA             I    32 reg
// dmem_master_HREADY             I     1
// dmem_master_HRESP              I     1
// dbg_server_request_put         I    68
// dma_server_request_put         I    68
// m_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// debug_hart_reset_server_request_put  I     1 reg
// debug_hart_server_run_halt_request_put  I     1 reg
// debug_hart_put_other_req_put   I     4
// debug_hart_gpr_mem_server_request_put  I    38 reg
// debug_hart_csr_mem_server_request_put  I    45 reg
// set_verbosity_verbosity        I     2
// EN_dbg_server_request_put      I     1
// EN_dma_server_request_put      I     1
// EN_debug_hart_reset_server_request_put  I     1
// EN_debug_hart_server_run_halt_request_put  I     1
// EN_debug_hart_put_other_req_put  I     1
// EN_debug_hart_gpr_mem_server_request_put  I     1
// EN_debug_hart_csr_mem_server_request_put  I     1
// EN_set_verbosity               I     1
// EN_dbg_server_response_get     I     1
// EN_dma_server_response_get     I     1
// EN_debug_hart_reset_server_response_get  I     1
// EN_debug_hart_server_run_halt_response_get  I     1
// EN_debug_hart_gpr_mem_server_response_get  I     1
// EN_debug_hart_csr_mem_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     dmem_master_HADDR,

	     dmem_master_HBURST,

	     dmem_master_HMASTLOCK,

	     dmem_master_HPROT,

	     dmem_master_HSIZE,

	     dmem_master_HTRANS,

	     dmem_master_HWDATA,

	     dmem_master_HWRITE,

	     dmem_master_HRDATA,

	     dmem_master_HREADY,

	     dmem_master_HRESP,

	     dbg_server_request_put,
	     EN_dbg_server_request_put,
	     RDY_dbg_server_request_put,

	     EN_dbg_server_response_get,
	     dbg_server_response_get,
	     RDY_dbg_server_response_get,

	     dma_server_request_put,
	     EN_dma_server_request_put,
	     RDY_dma_server_request_put,

	     EN_dma_server_response_get,
	     dma_server_response_get,
	     RDY_dma_server_response_get,

	     m_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     debug_hart_reset_server_request_put,
	     EN_debug_hart_reset_server_request_put,
	     RDY_debug_hart_reset_server_request_put,

	     EN_debug_hart_reset_server_response_get,
	     debug_hart_reset_server_response_get,
	     RDY_debug_hart_reset_server_response_get,

	     debug_hart_server_run_halt_request_put,
	     EN_debug_hart_server_run_halt_request_put,
	     RDY_debug_hart_server_run_halt_request_put,

	     EN_debug_hart_server_run_halt_response_get,
	     debug_hart_server_run_halt_response_get,
	     RDY_debug_hart_server_run_halt_response_get,

	     debug_hart_put_other_req_put,
	     EN_debug_hart_put_other_req_put,
	     RDY_debug_hart_put_other_req_put,

	     debug_hart_gpr_mem_server_request_put,
	     EN_debug_hart_gpr_mem_server_request_put,
	     RDY_debug_hart_gpr_mem_server_request_put,

	     EN_debug_hart_gpr_mem_server_response_get,
	     debug_hart_gpr_mem_server_response_get,
	     RDY_debug_hart_gpr_mem_server_response_get,

	     debug_hart_csr_mem_server_request_put,
	     EN_debug_hart_csr_mem_server_request_put,
	     RDY_debug_hart_csr_mem_server_request_put,

	     EN_debug_hart_csr_mem_server_response_get,
	     debug_hart_csr_mem_server_response_get,
	     RDY_debug_hart_csr_mem_server_response_get,

	     set_verbosity_verbosity,
	     EN_set_verbosity);
  input  CLK;
  input  RST_N;

  // value method dmem_master_haddr
  output [31 : 0] dmem_master_HADDR;

  // value method dmem_master_hburst
  output [2 : 0] dmem_master_HBURST;

  // value method dmem_master_hmastlock
  output dmem_master_HMASTLOCK;

  // value method dmem_master_hprot
  output [3 : 0] dmem_master_HPROT;

  // value method dmem_master_hsize
  output [2 : 0] dmem_master_HSIZE;

  // value method dmem_master_htrans
  output [1 : 0] dmem_master_HTRANS;

  // value method dmem_master_hwdata
  output [31 : 0] dmem_master_HWDATA;

  // value method dmem_master_hwrite
  output dmem_master_HWRITE;

  // action method dmem_master_hrdata
  input  [31 : 0] dmem_master_HRDATA;

  // action method dmem_master_hready
  input  dmem_master_HREADY;

  // action method dmem_master_hresp
  input  dmem_master_HRESP;

  // action method dbg_server_request_put
  input  [67 : 0] dbg_server_request_put;
  input  EN_dbg_server_request_put;
  output RDY_dbg_server_request_put;

  // actionvalue method dbg_server_response_get
  input  EN_dbg_server_response_get;
  output [33 : 0] dbg_server_response_get;
  output RDY_dbg_server_response_get;

  // action method dma_server_request_put
  input  [67 : 0] dma_server_request_put;
  input  EN_dma_server_request_put;
  output RDY_dma_server_request_put;

  // actionvalue method dma_server_response_get
  input  EN_dma_server_response_get;
  output dma_server_response_get;
  output RDY_dma_server_response_get;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method debug_hart_reset_server_request_put
  input  debug_hart_reset_server_request_put;
  input  EN_debug_hart_reset_server_request_put;
  output RDY_debug_hart_reset_server_request_put;

  // actionvalue method debug_hart_reset_server_response_get
  input  EN_debug_hart_reset_server_response_get;
  output debug_hart_reset_server_response_get;
  output RDY_debug_hart_reset_server_response_get;

  // action method debug_hart_server_run_halt_request_put
  input  debug_hart_server_run_halt_request_put;
  input  EN_debug_hart_server_run_halt_request_put;
  output RDY_debug_hart_server_run_halt_request_put;

  // actionvalue method debug_hart_server_run_halt_response_get
  input  EN_debug_hart_server_run_halt_response_get;
  output debug_hart_server_run_halt_response_get;
  output RDY_debug_hart_server_run_halt_response_get;

  // action method debug_hart_put_other_req_put
  input  [3 : 0] debug_hart_put_other_req_put;
  input  EN_debug_hart_put_other_req_put;
  output RDY_debug_hart_put_other_req_put;

  // action method debug_hart_gpr_mem_server_request_put
  input  [37 : 0] debug_hart_gpr_mem_server_request_put;
  input  EN_debug_hart_gpr_mem_server_request_put;
  output RDY_debug_hart_gpr_mem_server_request_put;

  // actionvalue method debug_hart_gpr_mem_server_response_get
  input  EN_debug_hart_gpr_mem_server_response_get;
  output [32 : 0] debug_hart_gpr_mem_server_response_get;
  output RDY_debug_hart_gpr_mem_server_response_get;

  // action method debug_hart_csr_mem_server_request_put
  input  [44 : 0] debug_hart_csr_mem_server_request_put;
  input  EN_debug_hart_csr_mem_server_request_put;
  output RDY_debug_hart_csr_mem_server_request_put;

  // actionvalue method debug_hart_csr_mem_server_response_get
  input  EN_debug_hart_csr_mem_server_response_get;
  output [32 : 0] debug_hart_csr_mem_server_response_get;
  output RDY_debug_hart_csr_mem_server_response_get;

  // action method set_verbosity
  input  [1 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;

  // signals for module outputs
  wire [33 : 0] dbg_server_response_get;
  wire [32 : 0] debug_hart_csr_mem_server_response_get,
		debug_hart_gpr_mem_server_response_get;
  wire [31 : 0] dmem_master_HADDR, dmem_master_HWDATA;
  wire [3 : 0] dmem_master_HPROT;
  wire [2 : 0] dmem_master_HBURST, dmem_master_HSIZE;
  wire [1 : 0] dmem_master_HTRANS;
  wire RDY_dbg_server_request_put,
       RDY_dbg_server_response_get,
       RDY_debug_hart_csr_mem_server_request_put,
       RDY_debug_hart_csr_mem_server_response_get,
       RDY_debug_hart_gpr_mem_server_request_put,
       RDY_debug_hart_gpr_mem_server_response_get,
       RDY_debug_hart_put_other_req_put,
       RDY_debug_hart_reset_server_request_put,
       RDY_debug_hart_reset_server_response_get,
       RDY_debug_hart_server_run_halt_request_put,
       RDY_debug_hart_server_run_halt_response_get,
       RDY_dma_server_request_put,
       RDY_dma_server_response_get,
       debug_hart_reset_server_response_get,
       debug_hart_server_run_halt_response_get,
       dma_server_response_get,
       dmem_master_HMASTLOCK,
       dmem_master_HWRITE;

  // inlined wires
  wire imem_c_w_addr$whas;

  // register cfg_verbosity
  reg [1 : 0] cfg_verbosity;
  wire [1 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_c_rg_cache_b16
  reg [15 : 0] imem_c_rg_cache_b16;
  wire [15 : 0] imem_c_rg_cache_b16$D_IN;
  wire imem_c_rg_cache_b16$EN;

  // register imem_c_rg_exc
  reg [4 : 0] imem_c_rg_exc;
  wire [4 : 0] imem_c_rg_exc$D_IN;
  wire imem_c_rg_exc$EN;

  // register imem_c_rg_instr
  reg [32 : 0] imem_c_rg_instr;
  reg [32 : 0] imem_c_rg_instr$D_IN;
  wire imem_c_rg_instr$EN;

  // register imem_c_rg_pc
  reg [31 : 0] imem_c_rg_pc;
  wire [31 : 0] imem_c_rg_pc$D_IN;
  wire imem_c_rg_pc$EN;

  // register imem_c_rg_state
  reg [2 : 0] imem_c_rg_state;
  reg [2 : 0] imem_c_rg_state$D_IN;
  wire imem_c_rg_state$EN;

  // register rg_alu_outputs
  reg [111 : 0] rg_alu_outputs;
  wire [111 : 0] rg_alu_outputs$D_IN;
  wire rg_alu_outputs$EN;

  // register rg_csr_permitted
  reg rg_csr_permitted;
  wire rg_csr_permitted$D_IN, rg_csr_permitted$EN;

  // register rg_exec1_inputs
  reg [157 : 0] rg_exec1_inputs;
  wire [157 : 0] rg_exec1_inputs$D_IN;
  wire rg_exec1_inputs$EN;

  // register rg_halt
  reg rg_halt;
  wire rg_halt$D_IN, rg_halt$EN;

  // register rg_pc
  reg [31 : 0] rg_pc;
  reg [31 : 0] rg_pc$D_IN;
  wire rg_pc$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_step_req
  reg rg_step_req;
  wire rg_step_req$D_IN, rg_step_req$EN;

  // register rg_stop_req
  reg rg_stop_req;
  reg rg_stop_req$D_IN;
  wire rg_stop_req$EN;

  // register rg_trap_info
  reg [67 : 0] rg_trap_info;
  reg [67 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // ports of submodule addr_map
  wire [31 : 0] addr_map$m_is_dtcm_addr_addr,
		addr_map$m_is_itcm_addr_addr,
		addr_map$m_pc_reset_value;

  // ports of submodule csr_regfile
  reg [31 : 0] csr_regfile$mav_csr_write_word;
  reg [2 : 0] csr_regfile$write_dcsr_cause_priv_cause;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_ret_actions,
		csr_regfile$csr_trap_actions,
		csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$read_dpc,
		csr_regfile$write_dpc_pc;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$read_csr_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [1 : 0] csr_regfile$dcsr_break_enters_debug_cur_priv,
	       csr_regfile$write_dcsr_cause_priv_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_write_dcsr_cause_priv,
       csr_regfile$EN_write_dpc,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted,
       csr_regfile$access_permitted_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$dcsr_break_enters_debug,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$read_dcsr_step,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_csr_reqs
  wire [44 : 0] f_csr_reqs$D_IN, f_csr_reqs$D_OUT;
  wire f_csr_reqs$CLR,
       f_csr_reqs$DEQ,
       f_csr_reqs$EMPTY_N,
       f_csr_reqs$ENQ,
       f_csr_reqs$FULL_N;

  // ports of submodule f_csr_rsps
  wire [32 : 0] f_csr_rsps$D_IN, f_csr_rsps$D_OUT;
  wire f_csr_rsps$CLR,
       f_csr_rsps$DEQ,
       f_csr_rsps$EMPTY_N,
       f_csr_rsps$ENQ,
       f_csr_rsps$FULL_N;

  // ports of submodule f_gpr_reqs
  wire [37 : 0] f_gpr_reqs$D_IN, f_gpr_reqs$D_OUT;
  wire f_gpr_reqs$CLR,
       f_gpr_reqs$DEQ,
       f_gpr_reqs$EMPTY_N,
       f_gpr_reqs$ENQ,
       f_gpr_reqs$FULL_N;

  // ports of submodule f_gpr_rsps
  wire [32 : 0] f_gpr_rsps$D_IN, f_gpr_rsps$D_OUT;
  wire f_gpr_rsps$CLR,
       f_gpr_rsps$DEQ,
       f_gpr_rsps$EMPTY_N,
       f_gpr_rsps$ENQ,
       f_gpr_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_run_halt_reqs
  wire f_run_halt_reqs$CLR,
       f_run_halt_reqs$DEQ,
       f_run_halt_reqs$D_IN,
       f_run_halt_reqs$D_OUT,
       f_run_halt_reqs$EMPTY_N,
       f_run_halt_reqs$ENQ,
       f_run_halt_reqs$FULL_N;

  // ports of submodule f_run_halt_rsps
  wire f_run_halt_rsps$CLR,
       f_run_halt_rsps$DEQ,
       f_run_halt_rsps$D_IN,
       f_run_halt_rsps$D_OUT,
       f_run_halt_rsps$EMPTY_N,
       f_run_halt_rsps$ENQ,
       f_run_halt_rsps$FULL_N;

  // ports of submodule gpr_regfile
  reg [31 : 0] gpr_regfile$write_rd_rd_val;
  wire [31 : 0] gpr_regfile$read_rs1, gpr_regfile$read_rs2;
  wire [4 : 0] gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule mbox
  wire [31 : 0] mbox$req_v1, mbox$req_v2, mbox$word;
  wire [3 : 0] mbox$set_verbosity_verbosity;
  wire [2 : 0] mbox$req_f3;
  wire mbox$EN_req,
       mbox$EN_req_reset,
       mbox$EN_rsp_reset,
       mbox$EN_set_verbosity,
       mbox$req_is_OP_not_OP_32,
       mbox$valid;

  // ports of submodule near_mem
  wire [67 : 0] near_mem$dbg_server_request_put,
		near_mem$dma_server_request_put;
  wire [36 : 0] near_mem$imem_instr;
  wire [33 : 0] near_mem$dbg_server_response_get;
  wire [31 : 0] near_mem$dmem_master_HADDR,
		near_mem$dmem_master_HRDATA,
		near_mem$dmem_master_HWDATA,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word32_get,
		near_mem$imem_req_addr;
  wire [4 : 0] near_mem$dmem_exc_get;
  wire [3 : 0] near_mem$dmem_master_HPROT;
  wire [2 : 0] near_mem$dmem_master_HBURST,
	       near_mem$dmem_master_HSIZE,
	       near_mem$dmem_req_f3;
  wire [1 : 0] near_mem$dmem_master_HTRANS;
  wire near_mem$EN_dbg_server_request_put,
       near_mem$EN_dbg_server_response_get,
       near_mem$EN_dma_server_request_put,
       near_mem$EN_dma_server_response_get,
       near_mem$EN_dmem_exc_get,
       near_mem$EN_dmem_req,
       near_mem$EN_dmem_word32_get,
       near_mem$EN_imem_instr,
       near_mem$EN_imem_req,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$RDY_dbg_server_request_put,
       near_mem$RDY_dbg_server_response_get,
       near_mem$RDY_dma_server_request_put,
       near_mem$RDY_dma_server_response_get,
       near_mem$RDY_dmem_exc_get,
       near_mem$RDY_dmem_req,
       near_mem$RDY_dmem_word32_get,
       near_mem$RDY_imem_instr,
       near_mem$RDY_imem_req,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dma_server_response_get,
       near_mem$dmem_master_HMASTLOCK,
       near_mem$dmem_master_HREADY,
       near_mem$dmem_master_HRESP,
       near_mem$dmem_master_HWRITE,
       near_mem$dmem_req_op;

  // ports of submodule sbox
  wire [31 : 0] sbox$req_v1, sbox$req_v2, sbox$word;
  wire sbox$EN_req,
       sbox$EN_server_reset_request_put,
       sbox$EN_server_reset_response_get,
       sbox$RDY_server_reset_request_put,
       sbox$RDY_server_reset_response_get,
       sbox$req_right,
       sbox$valid;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_c_rl_I16_ODD_RSP,
       CAN_FIRE_RL_imem_c_rl_I32_ODD_RSP,
       CAN_FIRE_RL_imem_c_rl_NEW_RSP,
       CAN_FIRE_RL_imem_c_rl_new_req,
       CAN_FIRE_RL_rl_CSRR_S_or_C_completion,
       CAN_FIRE_RL_rl_CSRR_W_completion,
       CAN_FIRE_RL_rl_LD_completion,
       CAN_FIRE_RL_rl_M_completion,
       CAN_FIRE_RL_rl_SH_completion,
       CAN_FIRE_RL_rl_ST_completion,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_debug_halt,
       CAN_FIRE_RL_rl_debug_halt_ignore,
       CAN_FIRE_RL_rl_debug_read_csr,
       CAN_FIRE_RL_rl_debug_read_gpr,
       CAN_FIRE_RL_rl_debug_run,
       CAN_FIRE_RL_rl_debug_run_ignore,
       CAN_FIRE_RL_rl_debug_write_csr,
       CAN_FIRE_RL_rl_debug_write_gpr,
       CAN_FIRE_RL_rl_exec1,
       CAN_FIRE_RL_rl_exec2,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_Debug_Mode,
       CAN_FIRE_RL_rl_reset_from_RUNNING,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_restart_external_interrupt,
       CAN_FIRE_RL_rl_restart_trap,
       CAN_FIRE_RL_rl_run,
       CAN_FIRE_RL_rl_stop,
       CAN_FIRE_RL_rl_take_external_interrupt,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_7,
       CAN_FIRE_dbg_server_request_put,
       CAN_FIRE_dbg_server_response_get,
       CAN_FIRE_debug_hart_csr_mem_server_request_put,
       CAN_FIRE_debug_hart_csr_mem_server_response_get,
       CAN_FIRE_debug_hart_gpr_mem_server_request_put,
       CAN_FIRE_debug_hart_gpr_mem_server_response_get,
       CAN_FIRE_debug_hart_put_other_req_put,
       CAN_FIRE_debug_hart_reset_server_request_put,
       CAN_FIRE_debug_hart_reset_server_response_get,
       CAN_FIRE_debug_hart_server_run_halt_request_put,
       CAN_FIRE_debug_hart_server_run_halt_response_get,
       CAN_FIRE_dma_server_request_put,
       CAN_FIRE_dma_server_response_get,
       CAN_FIRE_dmem_master_hrdata,
       CAN_FIRE_dmem_master_hready,
       CAN_FIRE_dmem_master_hresp,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP,
       WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP,
       WILL_FIRE_RL_imem_c_rl_NEW_RSP,
       WILL_FIRE_RL_imem_c_rl_new_req,
       WILL_FIRE_RL_rl_CSRR_S_or_C_completion,
       WILL_FIRE_RL_rl_CSRR_W_completion,
       WILL_FIRE_RL_rl_LD_completion,
       WILL_FIRE_RL_rl_M_completion,
       WILL_FIRE_RL_rl_SH_completion,
       WILL_FIRE_RL_rl_ST_completion,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_debug_halt,
       WILL_FIRE_RL_rl_debug_halt_ignore,
       WILL_FIRE_RL_rl_debug_read_csr,
       WILL_FIRE_RL_rl_debug_read_gpr,
       WILL_FIRE_RL_rl_debug_run,
       WILL_FIRE_RL_rl_debug_run_ignore,
       WILL_FIRE_RL_rl_debug_write_csr,
       WILL_FIRE_RL_rl_debug_write_gpr,
       WILL_FIRE_RL_rl_exec1,
       WILL_FIRE_RL_rl_exec2,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_Debug_Mode,
       WILL_FIRE_RL_rl_reset_from_RUNNING,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_restart_external_interrupt,
       WILL_FIRE_RL_rl_restart_trap,
       WILL_FIRE_RL_rl_run,
       WILL_FIRE_RL_rl_stop,
       WILL_FIRE_RL_rl_take_external_interrupt,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_7,
       WILL_FIRE_dbg_server_request_put,
       WILL_FIRE_dbg_server_response_get,
       WILL_FIRE_debug_hart_csr_mem_server_request_put,
       WILL_FIRE_debug_hart_csr_mem_server_response_get,
       WILL_FIRE_debug_hart_gpr_mem_server_request_put,
       WILL_FIRE_debug_hart_gpr_mem_server_response_get,
       WILL_FIRE_debug_hart_put_other_req_put,
       WILL_FIRE_debug_hart_reset_server_request_put,
       WILL_FIRE_debug_hart_reset_server_response_get,
       WILL_FIRE_debug_hart_server_run_halt_request_put,
       WILL_FIRE_debug_hart_server_run_halt_response_get,
       WILL_FIRE_dma_server_request_put,
       WILL_FIRE_dma_server_response_get,
       WILL_FIRE_dmem_master_hrdata,
       WILL_FIRE_dmem_master_hready,
       WILL_FIRE_dmem_master_hresp,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_imem_c_w_addr$wset_1__VAL_5;
  reg [4 : 0] MUX_rg_state$write_1__VAL_1;
  wire [67 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [32 : 0] MUX_f_csr_rsps$enq_1__VAL_2,
		MUX_f_gpr_rsps$enq_1__VAL_2,
		MUX_imem_c_rg_instr$write_1__VAL_2,
		MUX_imem_c_rg_instr$write_1__VAL_3,
		MUX_imem_c_rg_instr$write_1__VAL_4;
  wire [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2,
		MUX_near_mem$imem_req_1__VAL_1,
		MUX_near_mem$imem_req_1__VAL_2;
  wire [4 : 0] MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_4,
	       MUX_rg_state$write_1__VAL_5,
	       MUX_rg_state$write_1__VAL_6;
  wire [2 : 0] MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_1,
	       MUX_imem_c_rg_state$write_1__VAL_2,
	       MUX_imem_c_rg_state$write_1__VAL_4;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_csr_regfile$mav_csr_write_1__SEL_2,
       MUX_f_run_halt_rsps$enq_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_gpr_regfile$write_rd_1__SEL_4,
       MUX_imem_c_w_addr$wset_1__PSEL_4,
       MUX_imem_c_w_addr$wset_1__SEL_1,
       MUX_imem_c_w_addr$wset_1__SEL_2,
       MUX_imem_c_w_addr$wset_1__SEL_3,
       MUX_imem_c_w_addr$wset_1__SEL_4,
       MUX_imem_c_w_addr$wset_1__SEL_5,
       MUX_imem_c_w_addr$wset_1__SEL_6,
       MUX_imem_c_w_addr$wset_1__SEL_7,
       MUX_near_mem$imem_req_1__SEL_1,
       MUX_rg_halt$write_1__PSEL_1,
       MUX_rg_halt$write_1__SEL_6,
       MUX_rg_pc$write_1__SEL_1,
       MUX_rg_pc$write_1__SEL_2,
       MUX_rg_pc$write_1__SEL_3,
       MUX_rg_pc$write_1__SEL_4,
       MUX_rg_pc$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_stop_req$write_1__SEL_1,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_info$write_1__SEL_2,
       MUX_rg_trap_info$write_1__SEL_3,
       MUX_rg_trap_info$write_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h152461;
  reg [31 : 0] v__h152591;
  reg [31 : 0] v__h152889;
  reg [31 : 0] v__h153645;
  reg [31 : 0] v__h144587;
  reg [31 : 0] v__h145204;
  reg [31 : 0] v__h150875;
  reg [31 : 0] v__h151424;
  reg [31 : 0] v__h152289;
  reg [31 : 0] v__h153883;
  reg [31 : 0] v__h4728;
  reg [31 : 0] v__h4350;
  reg [31 : 0] v__h4344;
  reg [31 : 0] v__h4722;
  reg [31 : 0] v__h144581;
  reg [31 : 0] v__h145198;
  reg [31 : 0] v__h150869;
  reg [31 : 0] v__h151418;
  reg [31 : 0] v__h152283;
  reg [31 : 0] v__h152455;
  reg [31 : 0] v__h152585;
  reg [31 : 0] v__h152883;
  reg [31 : 0] v__h153639;
  reg [31 : 0] v__h153877;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] addr__h2418, x__h145173;
  reg IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_ETC___d1423;
  wire [127 : 0] csr_regfile_read_csr_mcycle__24_MINUS_rg_start_ETC___d1706;
  wire [103 : 0] IF_rg_exec1_inputs_96_BIT_108_97_OR_rg_exec1_i_ETC___d1399;
  wire [63 : 0] _theResult____h151593,
		cpi__h151595,
		cpifrac__h151596,
		delta_CPI_cycles__h151591,
		delta_CPI_instrs___1__h151637,
		delta_CPI_instrs__h151592,
		x__h151594;
  wire [31 : 0] IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515,
		IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_pc_4_ETC___d1220,
		SEXT_rg_exec1_inputs_96_BITS_157_TO_146_059___d1060,
		_theResult___snd__h121208,
		_theResult___snd_fst__h2506,
		_theResult___snd_fst__h2512,
		a__h102290,
		a__h105695,
		a__h109078,
		a__h121193,
		a__h124622,
		a__h127874,
		a__h13055,
		a__h131117,
		a__h134382,
		a__h137623,
		a__h140872,
		a__h16491,
		a__h19925,
		a__h23422,
		a__h26994,
		a__h30588,
		a__h33943,
		a__h37331,
		a__h40887,
		a__h44454,
		a__h47821,
		a__h51226,
		a__h57975,
		a__h61358,
		a__h64858,
		a__h68290,
		a__h71699,
		a__h75140,
		a__h7815,
		a__h78603,
		a__h82019,
		a__h85388,
		a__h88746,
		a__h92154,
		a__h95529,
		a__h98915,
		addr__h118827,
		addr__h118943,
		addr_of_b32___1__h2548,
		addr_of_b32__h2419,
		alu_outputs___1_addr__h119265,
		alu_outputs___1_addr__h119285,
		alu_outputs___1_val2__h118605,
		b__h102291,
		b__h105696,
		b__h109079,
		b__h121194,
		b__h124623,
		b__h127875,
		b__h13056,
		b__h131118,
		b__h134383,
		b__h137624,
		b__h140873,
		b__h16492,
		b__h19926,
		b__h23423,
		b__h26995,
		b__h30589,
		b__h33944,
		b__h37332,
		b__h40888,
		b__h44455,
		b__h47822,
		b__h51227,
		b__h54597,
		b__h57976,
		b__h61359,
		b__h64859,
		b__h68291,
		b__h71700,
		b__h75141,
		b__h7816,
		b__h78604,
		b__h82020,
		b__h85389,
		b__h88747,
		b__h92155,
		b__h95530,
		b__h98916,
		branch_target__h119233,
		imem_c_rg_instr_BITS_31_TO_0__q1,
		instr__h5917,
		next_pc___1__h120508,
		next_pc__h119243,
		next_pc__h120505,
		next_pc__h150032,
		rd_val__h119305,
		rd_val__h119315,
		rd_val__h119324,
		val2__h118595,
		x1_avValue_snd_addr__h119516,
		x1_avValue_snd_addr__h119558,
		x1_avValue_snd_addr__h119565,
		x1_avValue_snd_addr__h119572,
		x1_avValue_snd_val1__h119524,
		x1_avValue_snd_val1__h119531,
		x1_avValue_snd_val1__h119538,
		x1_avValue_snd_val1__h119545,
		x1_avValue_snd_val1__h119559,
		x1_avValue_snd_val1__h119573,
		x1_avValue_snd_val2__h119553,
		x1_avValue_snd_val2__h119560,
		x__h105684,
		x__h120407,
		x__h121160,
		x__h121171,
		x__h121182,
		x__h127863,
		x__h134360,
		x__h134371,
		x__h16480,
		x__h23400,
		x__h23411,
		x__h30577,
		x__h37298,
		x__h37309,
		x__h37320,
		x__h44443,
		x__h51204,
		x__h51215,
		x__h57964,
		x__h5849,
		x__h64814,
		x__h64825,
		x__h64836,
		x__h64847,
		x__h71688,
		x__h7760,
		x__h7771,
		x__h7782,
		x__h7793,
		x__h7804,
		x__h78581,
		x__h78592,
		x__h85377,
		x__h92121,
		x__h92132,
		x__h92143,
		x__h98904,
		y__h105685,
		y__h121161,
		y__h121172,
		y__h121183,
		y__h127864,
		y__h134361,
		y__h134372,
		y__h150256,
		y__h16481,
		y__h23401,
		y__h23412,
		y__h30578,
		y__h37299,
		y__h37310,
		y__h37321,
		y__h44444,
		y__h51205,
		y__h51216,
		y__h57965,
		y__h64815,
		y__h64826,
		y__h64837,
		y__h64848,
		y__h71689,
		y__h7761,
		y__h7772,
		y__h7783,
		y__h7794,
		y__h7805,
		y__h78582,
		y__h78593,
		y__h85378,
		y__h92122,
		y__h92133,
		y__h92144,
		y__h98905;
  wire [20 : 0] SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283,
		rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2;
  wire [19 : 0] imm20__h47838;
  wire [12 : 0] SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390,
		imm13_SB__h119231;
  wire [11 : 0] imm12__h118950,
		imm12__h16510,
		imm12__h44471,
		imm12__h61376,
		imm12__h64874,
		imm12__h68309,
		imm12__h75161,
		imm12__h7835,
		offset__h23435,
		rg_exec1_inputs_BITS_157_TO_146__q3;
  wire [9 : 0] nzimm10__h61374, nzimm10__h64872;
  wire [8 : 0] offset__h37347;
  wire [7 : 0] offset__h7831;
  wire [6 : 0] offset__h16507;
  wire [5 : 0] imm6__h44469;
  wire [4 : 0] IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_3_ETC___d1445,
	       offset_BITS_4_TO_0___h13201,
	       offset_BITS_4_TO_0___h20121,
	       rd__h16512,
	       rs1__h16511,
	       shamt__h118590,
	       x1_avValue_snd_rd__h119578;
  wire [3 : 0] alu_outputs___1_exc_code__h119503,
	       x1_avValue_snd_exc_code__h119555,
	       x1_avValue_snd_exc_code__h119569,
	       x1_avValue_snd_exc_code__h119576;
  wire IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51,
       IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54,
       IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_ETC___d1420,
       IF_rg_exec1_inputs_96_BIT_91_086_THEN_NOT_rg_e_ETC___d1105,
       IF_rg_exec1_inputs_96_BIT_93_082_THEN_NOT_rg_e_ETC___d1107,
       IF_rg_exec1_inputs_96_BIT_94_080_THEN_rg_exec1_ETC___d1108,
       NOT_near_mem_dmem_exc_get_637_BIT_4_638_642_AN_ETC___d1646,
       NOT_rg_csr_permitted_661_662_OR_rg_stop_req_00_ETC___d1663,
       _dand4imem_c_w_addr$EN_wset,
       _dand4rg_halt$EN_write,
       _dand5rg_halt$EN_write,
       _dand6imem_c_w_addr$EN_wset,
       _dand7imem_c_w_addr$EN_wset,
       csr_regfile_RDY_server_reset_response_get__6_A_ETC___d107,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d170,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d317,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d340,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d363,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d444,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d466,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d496,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d515,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d537,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d564,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d599,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d623,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d653,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d678,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d703,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d772,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d796,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d817,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d839,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d862,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d884,
       csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d905,
       imem_c_rg_state_EQ_0_7_OR_IF_imem_c_w_addr_wha_ETC___d69,
       near_mem_RDY_dmem_word32_get__632_AND_rg_stop__ETC___d1633,
       rg_alu_outputs_401_BITS_103_TO_101_406_EQ_0_40_ETC___d1474,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_1_40_ETC___d1495,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_1_40_ETC___d1507,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1472,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1485,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1497,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1509,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_5_41_ETC___d1478,
       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_41_ETC___d1476,
       rg_csr_permitted_661_AND_NOT_rg_stop_req_00_13_ETC___d1675,
       rg_exec1_inputs_96_BITS_63_TO_32_038_EQ_rg_exe_ETC___d1097,
       rg_exec1_inputs_96_BITS_63_TO_32_038_SLT_rg_ex_ETC___d1099,
       rg_exec1_inputs_96_BITS_63_TO_32_038_ULT_rg_ex_ETC___d1101,
       rg_state_8_EQ_4_28_AND_rg_halt_32_733_AND_NOT__ETC___d1735;

  // value method dmem_master_haddr
  assign dmem_master_HADDR = near_mem$dmem_master_HADDR ;

  // value method dmem_master_hburst
  assign dmem_master_HBURST = near_mem$dmem_master_HBURST ;

  // value method dmem_master_hmastlock
  assign dmem_master_HMASTLOCK = near_mem$dmem_master_HMASTLOCK ;

  // value method dmem_master_hprot
  assign dmem_master_HPROT = near_mem$dmem_master_HPROT ;

  // value method dmem_master_hsize
  assign dmem_master_HSIZE = near_mem$dmem_master_HSIZE ;

  // value method dmem_master_htrans
  assign dmem_master_HTRANS = near_mem$dmem_master_HTRANS ;

  // value method dmem_master_hwdata
  assign dmem_master_HWDATA = near_mem$dmem_master_HWDATA ;

  // value method dmem_master_hwrite
  assign dmem_master_HWRITE = near_mem$dmem_master_HWRITE ;

  // action method dmem_master_hrdata
  assign CAN_FIRE_dmem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_dmem_master_hrdata = 1'd1 ;

  // action method dmem_master_hready
  assign CAN_FIRE_dmem_master_hready = 1'd1 ;
  assign WILL_FIRE_dmem_master_hready = 1'd1 ;

  // action method dmem_master_hresp
  assign CAN_FIRE_dmem_master_hresp = 1'd1 ;
  assign WILL_FIRE_dmem_master_hresp = 1'd1 ;

  // action method dbg_server_request_put
  assign RDY_dbg_server_request_put = near_mem$RDY_dbg_server_request_put ;
  assign CAN_FIRE_dbg_server_request_put =
	     near_mem$RDY_dbg_server_request_put ;
  assign WILL_FIRE_dbg_server_request_put = EN_dbg_server_request_put ;

  // actionvalue method dbg_server_response_get
  assign dbg_server_response_get = near_mem$dbg_server_response_get ;
  assign RDY_dbg_server_response_get = near_mem$RDY_dbg_server_response_get ;
  assign CAN_FIRE_dbg_server_response_get =
	     near_mem$RDY_dbg_server_response_get ;
  assign WILL_FIRE_dbg_server_response_get = EN_dbg_server_response_get ;

  // action method dma_server_request_put
  assign RDY_dma_server_request_put = near_mem$RDY_dma_server_request_put ;
  assign CAN_FIRE_dma_server_request_put =
	     near_mem$RDY_dma_server_request_put ;
  assign WILL_FIRE_dma_server_request_put = EN_dma_server_request_put ;

  // actionvalue method dma_server_response_get
  assign dma_server_response_get = near_mem$dma_server_response_get ;
  assign RDY_dma_server_response_get = near_mem$RDY_dma_server_response_get ;
  assign CAN_FIRE_dma_server_response_get =
	     near_mem$RDY_dma_server_response_get ;
  assign WILL_FIRE_dma_server_response_get = EN_dma_server_response_get ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method debug_hart_reset_server_request_put
  assign RDY_debug_hart_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_reset_server_request_put =
	     EN_debug_hart_reset_server_request_put ;

  // actionvalue method debug_hart_reset_server_response_get
  assign debug_hart_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_debug_hart_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_reset_server_response_get =
	     f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_reset_server_response_get =
	     EN_debug_hart_reset_server_response_get ;

  // action method debug_hart_server_run_halt_request_put
  assign RDY_debug_hart_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_server_run_halt_request_put =
	     f_run_halt_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_server_run_halt_request_put =
	     EN_debug_hart_server_run_halt_request_put ;

  // actionvalue method debug_hart_server_run_halt_response_get
  assign debug_hart_server_run_halt_response_get = f_run_halt_rsps$D_OUT ;
  assign RDY_debug_hart_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_server_run_halt_response_get =
	     EN_debug_hart_server_run_halt_response_get ;

  // action method debug_hart_put_other_req_put
  assign RDY_debug_hart_put_other_req_put = 1'd1 ;
  assign CAN_FIRE_debug_hart_put_other_req_put = 1'd1 ;
  assign WILL_FIRE_debug_hart_put_other_req_put =
	     EN_debug_hart_put_other_req_put ;

  // action method debug_hart_gpr_mem_server_request_put
  assign RDY_debug_hart_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_gpr_mem_server_request_put =
	     EN_debug_hart_gpr_mem_server_request_put ;

  // actionvalue method debug_hart_gpr_mem_server_response_get
  assign debug_hart_gpr_mem_server_response_get = f_gpr_rsps$D_OUT ;
  assign RDY_debug_hart_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_gpr_mem_server_response_get =
	     f_gpr_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_gpr_mem_server_response_get =
	     EN_debug_hart_gpr_mem_server_response_get ;

  // action method debug_hart_csr_mem_server_request_put
  assign RDY_debug_hart_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_csr_mem_server_request_put =
	     EN_debug_hart_csr_mem_server_request_put ;

  // actionvalue method debug_hart_csr_mem_server_response_get
  assign debug_hart_csr_mem_server_response_get = f_csr_rsps$D_OUT ;
  assign RDY_debug_hart_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_csr_mem_server_response_get =
	     f_csr_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_csr_mem_server_response_get =
	     EN_debug_hart_csr_mem_server_response_get ;

  // action method set_verbosity
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule addr_map
  mkCore_Map addr_map(.CLK(CLK),
		      .RST_N(RST_N),
		      .m_is_dtcm_addr_addr(addr_map$m_is_dtcm_addr_addr),
		      .m_is_itcm_addr_addr(addr_map$m_is_itcm_addr_addr),
		      .m_itcm_addr_base(),
		      .m_itcm_addr_size(),
		      .m_itcm_addr_lim(),
		      .m_is_itcm_addr(),
		      .m_dtcm_addr_base(),
		      .m_dtcm_addr_size(),
		      .m_dtcm_addr_lim(),
		      .m_is_dtcm_addr(),
		      .m_pc_reset_value(addr_map$m_pc_reset_value),
		      .m_mtvec_reset_value());

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_csr_addr(csr_regfile$access_permitted_csr_addr),
			    .access_permitted_read_not_write(csr_regfile$access_permitted_read_not_write),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .dcsr_break_enters_debug_cur_priv(csr_regfile$dcsr_break_enters_debug_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .write_dcsr_cause_priv_cause(csr_regfile$write_dcsr_cause_priv_cause),
			    .write_dcsr_cause_priv_priv(csr_regfile$write_dcsr_cause_priv_priv),
			    .write_dpc_pc(csr_regfile$write_dpc_pc),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_write_dpc(csr_regfile$EN_write_dpc),
			    .EN_write_dcsr_cause_priv(csr_regfile$EN_write_dcsr_cause_priv),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .mav_csr_write(),
			    .read_mstatus(),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_misa(csr_regfile$read_misa),
			    .read_csr_mtime(),
			    .access_permitted(csr_regfile$access_permitted),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .read_dpc(csr_regfile$read_dpc),
			    .RDY_read_dpc(),
			    .RDY_write_dpc(),
			    .dcsr_break_enters_debug(csr_regfile$dcsr_break_enters_debug),
			    .RDY_dcsr_break_enters_debug(),
			    .read_dcsr_step(csr_regfile$read_dcsr_step),
			    .RDY_read_dcsr_step(),
			    .RDY_debug());

  // submodule f_csr_reqs
  FIFO1 #(.width(32'd45), .guarded(1'd1)) f_csr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_csr_reqs$D_IN),
						     .ENQ(f_csr_reqs$ENQ),
						     .DEQ(f_csr_reqs$DEQ),
						     .CLR(f_csr_reqs$CLR),
						     .D_OUT(f_csr_reqs$D_OUT),
						     .FULL_N(f_csr_reqs$FULL_N),
						     .EMPTY_N(f_csr_reqs$EMPTY_N));

  // submodule f_csr_rsps
  FIFO1 #(.width(32'd33), .guarded(1'd1)) f_csr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_csr_rsps$D_IN),
						     .ENQ(f_csr_rsps$ENQ),
						     .DEQ(f_csr_rsps$DEQ),
						     .CLR(f_csr_rsps$CLR),
						     .D_OUT(f_csr_rsps$D_OUT),
						     .FULL_N(f_csr_rsps$FULL_N),
						     .EMPTY_N(f_csr_rsps$EMPTY_N));

  // submodule f_gpr_reqs
  FIFO1 #(.width(32'd38), .guarded(1'd1)) f_gpr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_gpr_reqs$D_IN),
						     .ENQ(f_gpr_reqs$ENQ),
						     .DEQ(f_gpr_reqs$DEQ),
						     .CLR(f_gpr_reqs$CLR),
						     .D_OUT(f_gpr_reqs$D_OUT),
						     .FULL_N(f_gpr_reqs$FULL_N),
						     .EMPTY_N(f_gpr_reqs$EMPTY_N));

  // submodule f_gpr_rsps
  FIFO1 #(.width(32'd33), .guarded(1'd1)) f_gpr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_gpr_rsps$D_IN),
						     .ENQ(f_gpr_rsps$ENQ),
						     .DEQ(f_gpr_rsps$DEQ),
						     .CLR(f_gpr_rsps$CLR),
						     .D_OUT(f_gpr_rsps$D_OUT),
						     .FULL_N(f_gpr_rsps$FULL_N),
						     .EMPTY_N(f_gpr_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO1 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO1 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_run_halt_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_run_halt_reqs(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_run_halt_reqs$D_IN),
							 .ENQ(f_run_halt_reqs$ENQ),
							 .DEQ(f_run_halt_reqs$DEQ),
							 .CLR(f_run_halt_reqs$CLR),
							 .D_OUT(f_run_halt_reqs$D_OUT),
							 .FULL_N(f_run_halt_reqs$FULL_N),
							 .EMPTY_N(f_run_halt_reqs$EMPTY_N));

  // submodule f_run_halt_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_run_halt_rsps(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_run_halt_rsps$D_IN),
							 .ENQ(f_run_halt_rsps$ENQ),
							 .DEQ(f_run_halt_rsps$DEQ),
							 .CLR(f_run_halt_rsps$CLR),
							 .D_OUT(f_run_halt_rsps$D_OUT),
							 .FULL_N(f_run_halt_rsps$FULL_N),
							 .EMPTY_N(f_run_halt_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule mbox
  mkRISCV_MBox mbox(.CLK(CLK),
		    .RST_N(RST_N),
		    .req_f3(mbox$req_f3),
		    .req_is_OP_not_OP_32(mbox$req_is_OP_not_OP_32),
		    .req_v1(mbox$req_v1),
		    .req_v2(mbox$req_v2),
		    .set_verbosity_verbosity(mbox$set_verbosity_verbosity),
		    .EN_set_verbosity(mbox$EN_set_verbosity),
		    .EN_req_reset(mbox$EN_req_reset),
		    .EN_rsp_reset(mbox$EN_rsp_reset),
		    .EN_req(mbox$EN_req),
		    .RDY_set_verbosity(),
		    .RDY_req_reset(),
		    .RDY_rsp_reset(),
		    .valid(mbox$valid),
		    .word(mbox$word));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dbg_server_request_put(near_mem$dbg_server_request_put),
		      .dma_server_request_put(near_mem$dma_server_request_put),
		      .dmem_master_HRDATA(near_mem$dmem_master_HRDATA),
		      .dmem_master_HREADY(near_mem$dmem_master_HREADY),
		      .dmem_master_HRESP(near_mem$dmem_master_HRESP),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_imem_instr(near_mem$EN_imem_instr),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_dmem_word32_get(near_mem$EN_dmem_word32_get),
		      .EN_dmem_exc_get(near_mem$EN_dmem_exc_get),
		      .EN_dbg_server_request_put(near_mem$EN_dbg_server_request_put),
		      .EN_dbg_server_response_get(near_mem$EN_dbg_server_response_get),
		      .EN_dma_server_request_put(near_mem$EN_dma_server_request_put),
		      .EN_dma_server_response_get(near_mem$EN_dma_server_response_get),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .RDY_imem_req(near_mem$RDY_imem_req),
		      .imem_instr(near_mem$imem_instr),
		      .RDY_imem_instr(near_mem$RDY_imem_instr),
		      .RDY_dmem_req(near_mem$RDY_dmem_req),
		      .dmem_word32_get(near_mem$dmem_word32_get),
		      .RDY_dmem_word32_get(near_mem$RDY_dmem_word32_get),
		      .dmem_exc_get(near_mem$dmem_exc_get),
		      .RDY_dmem_exc_get(near_mem$RDY_dmem_exc_get),
		      .dmem_master_HADDR(near_mem$dmem_master_HADDR),
		      .dmem_master_HBURST(near_mem$dmem_master_HBURST),
		      .dmem_master_HMASTLOCK(near_mem$dmem_master_HMASTLOCK),
		      .dmem_master_HPROT(near_mem$dmem_master_HPROT),
		      .dmem_master_HSIZE(near_mem$dmem_master_HSIZE),
		      .dmem_master_HTRANS(near_mem$dmem_master_HTRANS),
		      .dmem_master_HWDATA(near_mem$dmem_master_HWDATA),
		      .dmem_master_HWRITE(near_mem$dmem_master_HWRITE),
		      .RDY_dbg_server_request_put(near_mem$RDY_dbg_server_request_put),
		      .dbg_server_response_get(near_mem$dbg_server_response_get),
		      .RDY_dbg_server_response_get(near_mem$RDY_dbg_server_response_get),
		      .RDY_dma_server_request_put(near_mem$RDY_dma_server_request_put),
		      .dma_server_response_get(near_mem$dma_server_response_get),
		      .RDY_dma_server_response_get(near_mem$RDY_dma_server_response_get));

  // submodule sbox
  mkLog_Shifter_Box sbox(.CLK(CLK),
			 .RST_N(RST_N),
			 .req_right(sbox$req_right),
			 .req_v1(sbox$req_v1),
			 .req_v2(sbox$req_v2),
			 .EN_server_reset_request_put(sbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(sbox$EN_server_reset_response_get),
			 .EN_req(sbox$EN_req),
			 .RDY_server_reset_request_put(sbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(sbox$RDY_server_reset_response_get),
			 .valid(sbox$valid),
			 .word(sbox$word));

  // rule RL_rl_stop
  assign CAN_FIRE_RL_rl_stop =
	     f_run_halt_rsps$FULL_N &&
	     rg_state_8_EQ_4_28_AND_rg_halt_32_733_AND_NOT__ETC___d1735 ;
  assign WILL_FIRE_RL_rl_stop =
	     CAN_FIRE_RL_rl_stop && !WILL_FIRE_RL_rl_reset_from_RUNNING ;

  // rule RL_rl_debug_run_ignore
  assign CAN_FIRE_RL_rl_debug_run_ignore =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state != 5'd0 &&
	     rg_state != 5'd1 &&
	     rg_state != 5'd2 &&
	     rg_state != 5'd3 ;
  assign WILL_FIRE_RL_rl_debug_run_ignore =
	     CAN_FIRE_RL_rl_debug_run_ignore && !WILL_FIRE_RL_rl_stop &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_exec2
  assign CAN_FIRE_RL_rl_exec2 =
	     IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_ETC___d1423 &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_exec2 = CAN_FIRE_RL_rl_exec2 ;

  // rule RL_rl_LD_completion
  assign CAN_FIRE_RL_rl_LD_completion =
	     near_mem$RDY_dmem_exc_get &&
	     near_mem_RDY_dmem_word32_get__632_AND_rg_stop__ETC___d1633 &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_LD_completion =
	     CAN_FIRE_RL_rl_LD_completion && !EN_dbg_server_response_get ;

  // rule RL_rl_ST_completion
  assign CAN_FIRE_RL_rl_ST_completion =
	     near_mem$RDY_dmem_exc_get &&
	     near_mem_RDY_dmem_word32_get__632_AND_rg_stop__ETC___d1633 &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_ST_completion =
	     CAN_FIRE_RL_rl_ST_completion && !EN_dbg_server_response_get ;

  // rule RL_rl_M_completion
  assign CAN_FIRE_RL_rl_M_completion =
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd11 &&
	     mbox$valid ;
  assign WILL_FIRE_RL_rl_M_completion = CAN_FIRE_RL_rl_M_completion ;

  // rule RL_rl_SH_completion
  assign CAN_FIRE_RL_rl_SH_completion =
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd12 &&
	     sbox$valid ;
  assign WILL_FIRE_RL_rl_SH_completion = CAN_FIRE_RL_rl_SH_completion ;

  // rule RL_rl_CSRR_W_completion
  assign CAN_FIRE_RL_rl_CSRR_W_completion =
	     NOT_rg_csr_permitted_661_662_OR_rg_stop_req_00_ETC___d1663 &&
	     rg_state == 5'd9 ;
  assign WILL_FIRE_RL_rl_CSRR_W_completion =
	     CAN_FIRE_RL_rl_CSRR_W_completion ;

  // rule RL_rl_CSRR_S_or_C_completion
  assign CAN_FIRE_RL_rl_CSRR_S_or_C_completion =
	     NOT_rg_csr_permitted_661_662_OR_rg_stop_req_00_ETC___d1663 &&
	     rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_CSRR_S_or_C_completion =
	     CAN_FIRE_RL_rl_CSRR_S_or_C_completion ;

  // rule RL_rl_restart_trap
  assign CAN_FIRE_RL_rl_restart_trap =
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd14 ;
  assign WILL_FIRE_RL_rl_restart_trap = CAN_FIRE_RL_rl_restart_trap ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd18 &&
	     !f_reset_reqs$EMPTY_N &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_debug_halt
  assign CAN_FIRE_RL_rl_debug_halt =
	     f_run_halt_reqs$EMPTY_N && !f_run_halt_reqs$D_OUT &&
	     rg_state != 5'd0 &&
	     rg_state != 5'd1 &&
	     rg_state != 5'd2 &&
	     rg_state != 5'd3 ;
  assign WILL_FIRE_RL_rl_debug_halt =
	     CAN_FIRE_RL_rl_debug_halt && !WILL_FIRE_RL_rl_stop &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_restart_trap &&
	     !WILL_FIRE_RL_rl_CSRR_S_or_C_completion &&
	     !WILL_FIRE_RL_rl_CSRR_W_completion &&
	     !WILL_FIRE_RL_rl_SH_completion &&
	     !WILL_FIRE_RL_rl_M_completion &&
	     !WILL_FIRE_RL_rl_ST_completion &&
	     !WILL_FIRE_RL_rl_LD_completion &&
	     !WILL_FIRE_RL_rl_exec2 ;

  // rule RL_rl_run
  assign CAN_FIRE_RL_rl_run =
	     imem_c_rg_instr[32] && rg_state == 5'd4 &&
	     !f_reset_reqs$EMPTY_N &&
	     !rg_halt ;
  assign WILL_FIRE_RL_rl_run = CAN_FIRE_RL_rl_run ;

  // rule RL_rl_exec1
  assign CAN_FIRE_RL_rl_exec1 =
	     (rg_exec1_inputs[108] || rg_exec1_inputs[107] ||
	      rg_exec1_inputs[106] ||
	      rg_exec1_inputs[104] ||
	      rg_exec1_inputs[105] ||
	      rg_exec1_inputs[103] ||
	      rg_exec1_inputs[102] ||
	      (rg_exec1_inputs[101] ?
		 near_mem$RDY_dmem_req :
		 !rg_exec1_inputs[100] || near_mem$RDY_dmem_req)) &&
	     rg_state == 5'd5 ;
  assign WILL_FIRE_RL_rl_exec1 =
	     CAN_FIRE_RL_rl_exec1 && !EN_dbg_server_request_put ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap = rg_state == 5'd13 && !rg_halt ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_reset_from_RUNNING
  assign CAN_FIRE_RL_rl_reset_from_RUNNING =
	     rg_state == 5'd4 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_RUNNING =
	     CAN_FIRE_RL_rl_reset_from_RUNNING ;

  // rule RL_rl_trap_BREAK_to_Debug_Mode
  assign CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     f_run_halt_rsps$FULL_N && rg_state == 5'd15 && !rg_halt ;
  assign WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 5'd18 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = CAN_FIRE_RL_rl_reset_from_WFI ;

  // rule RL_rl_take_external_interrupt
  assign CAN_FIRE_RL_rl_take_external_interrupt =
	     csr_regfile$interrupt_pending[4] && rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_take_external_interrupt =
	     CAN_FIRE_RL_rl_take_external_interrupt ;

  // rule RL_rl_restart_external_interrupt
  assign CAN_FIRE_RL_rl_restart_external_interrupt =
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) &&
	     rg_state == 5'd17 ;
  assign WILL_FIRE_RL_rl_restart_external_interrupt =
	     CAN_FIRE_RL_rl_restart_external_interrupt ;

  // rule RL_rl_debug_halt_ignore
  assign CAN_FIRE_RL_rl_debug_halt_ignore =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     !f_run_halt_reqs$D_OUT &&
	     (rg_state == 5'd0 || rg_state == 5'd1 || rg_state == 5'd2 ||
	      rg_state == 5'd3) ;
  assign WILL_FIRE_RL_rl_debug_halt_ignore =
	     CAN_FIRE_RL_rl_debug_halt_ignore ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__6_A_ETC___d107 &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_debug_read_gpr
  assign CAN_FIRE_RL_rl_debug_read_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 5'd3 &&
	     !f_gpr_reqs$D_OUT[37] ;
  assign WILL_FIRE_RL_rl_debug_read_gpr = CAN_FIRE_RL_rl_debug_read_gpr ;

  // rule RL_rl_debug_write_gpr
  assign CAN_FIRE_RL_rl_debug_write_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 5'd3 &&
	     f_gpr_reqs$D_OUT[37] ;
  assign WILL_FIRE_RL_rl_debug_write_gpr = CAN_FIRE_RL_rl_debug_write_gpr ;

  // rule RL_rl_debug_read_csr
  assign CAN_FIRE_RL_rl_debug_read_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 5'd3 &&
	     !f_csr_reqs$D_OUT[44] ;
  assign WILL_FIRE_RL_rl_debug_read_csr = CAN_FIRE_RL_rl_debug_read_csr ;

  // rule RL_rl_debug_run
  assign CAN_FIRE_RL_rl_debug_run =
	     f_run_halt_reqs$EMPTY_N &&
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) &&
	     f_run_halt_rsps$FULL_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state == 5'd3 ;
  assign WILL_FIRE_RL_rl_debug_run =
	     CAN_FIRE_RL_rl_debug_run &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Mode ;

  // rule RL_rl_debug_write_csr
  assign CAN_FIRE_RL_rl_debug_write_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 5'd3 &&
	     f_csr_reqs$D_OUT[44] ;
  assign WILL_FIRE_RL_rl_debug_write_csr =
	     CAN_FIRE_RL_rl_debug_write_csr && !WILL_FIRE_RL_rl_debug_run ;

  // rule RL_rl_reset_from_Debug_Mode
  assign CAN_FIRE_RL_rl_reset_from_Debug_Mode =
	     rg_state == 5'd3 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_Debug_Mode =
	     CAN_FIRE_RL_rl_reset_from_Debug_Mode ;

  // rule RL_imem_c_rl_I32_ODD_RSP
  assign CAN_FIRE_RL_imem_c_rl_I32_ODD_RSP =
	     near_mem$RDY_imem_instr && imem_c_rg_state == 3'd3 ;
  assign WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP =
	     CAN_FIRE_RL_imem_c_rl_I32_ODD_RSP ;

  // rule RL_imem_c_rl_NEW_RSP
  assign CAN_FIRE_RL_imem_c_rl_NEW_RSP =
	     near_mem$RDY_imem_instr && near_mem$RDY_imem_req &&
	     imem_c_rg_state == 3'd2 ;
  assign WILL_FIRE_RL_imem_c_rl_NEW_RSP = CAN_FIRE_RL_imem_c_rl_NEW_RSP ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule RL_imem_c_rl_I16_ODD_RSP
  assign CAN_FIRE_RL_imem_c_rl_I16_ODD_RSP = imem_c_rg_state == 3'd4 ;
  assign WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP =
	     CAN_FIRE_RL_imem_c_rl_I16_ODD_RSP ;

  // rule RL_imem_c_rl_new_req
  assign CAN_FIRE_RL_imem_c_rl_new_req =
	     imem_c_w_addr$whas &&
	     (imem_c_rg_state != 3'd0 &&
	      !IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51 &&
	      IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 &&
	      imem_c_rg_cache_b16[1:0] != 2'b11 ||
	      near_mem$RDY_imem_req) &&
	     (imem_c_rg_state == 3'd0 || imem_c_rg_state == 3'd1) ;
  assign WILL_FIRE_RL_imem_c_rl_new_req = CAN_FIRE_RL_imem_c_rl_new_req ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     sbox$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     rg_state == 5'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted ;
  assign MUX_csr_regfile$mav_csr_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	     rg_exec1_inputs[145:141] != 5'd0 ;
  assign MUX_f_run_halt_rsps$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_debug_halt_ignore || WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_4 =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0) ;
  assign MUX_imem_c_w_addr$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_restart_trap && !rg_stop_req && !rg_step_req ;
  assign MUX_imem_c_w_addr$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req && !rg_step_req ;
  assign MUX_imem_c_w_addr$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_debug_run && !rg_stop_req && !rg_step_req ;
  assign MUX_imem_c_w_addr$wset_1__PSEL_4 =
	     WILL_FIRE_RL_rl_WFI_resume || WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;
  assign MUX_imem_c_w_addr$wset_1__SEL_4 =
	     MUX_imem_c_w_addr$wset_1__PSEL_4 && !rg_stop_req &&
	     !rg_step_req ;
  assign MUX_imem_c_w_addr$wset_1__SEL_5 =
	     WILL_FIRE_RL_rl_exec2 &&
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1509 ;
  assign MUX_imem_c_w_addr$wset_1__SEL_6 =
	     MUX_rg_state$write_1__SEL_2 && !near_mem$dmem_exc_get[4] &&
	     !rg_stop_req &&
	     !rg_step_req ;
  assign MUX_imem_c_w_addr$wset_1__SEL_7 =
	     MUX_rg_state$write_1__SEL_3 && rg_csr_permitted &&
	     !rg_stop_req &&
	     !rg_step_req ;
  assign MUX_near_mem$imem_req_1__SEL_1 =
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP && imem_c_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[22:21] == 2'b11 ;
  assign MUX_rg_halt$write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;
  assign MUX_rg_halt$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_stop || WILL_FIRE_RL_rl_reset_start ;
  assign MUX_rg_pc$write_1__SEL_1 =
	     MUX_rg_state$write_1__SEL_3 && rg_csr_permitted ;
  assign MUX_rg_pc$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req ;
  assign MUX_rg_pc$write_1__SEL_3 =
	     MUX_rg_state$write_1__SEL_2 && !near_mem$dmem_exc_get[4] ;
  assign MUX_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ;
  assign MUX_rg_pc$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_take_external_interrupt || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      (rg_alu_outputs[103:101] == 3'd0 ||
	       rg_alu_outputs[103:101] == 3'd4) ||
	      rg_alu_outputs[111:108] == 4'd3 ||
	      rg_alu_outputs[111:108] == 4'd4 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6 ||
	      rg_alu_outputs[111:108] == 4'd9 ||
	      rg_alu_outputs[111:108] == 4'd10) ;
  assign MUX_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ST_completion || WILL_FIRE_RL_rl_LD_completion ;
  assign MUX_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	     WILL_FIRE_RL_rl_CSRR_W_completion ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_from_RUNNING ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Mode ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_restart_external_interrupt ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;
  assign MUX_rg_stop_req$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_stop_req ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] ;
  assign MUX_rg_trap_info$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 ;
  assign MUX_rg_trap_info$write_1__SEL_3 =
	     MUX_rg_state$write_1__SEL_2 && near_mem$dmem_exc_get[4] ;
  assign MUX_rg_trap_info$write_1__SEL_4 =
	     MUX_rg_state$write_1__SEL_3 && !rg_csr_permitted ;
  assign MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	     (rg_exec1_inputs[75] || rg_exec1_inputs[72]) ?
	       csr_regfile$read_csr[31:0] | rg_alu_outputs[63:32] :
	       csr_regfile$read_csr[31:0] & y__h150256 ;
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_1 =
	     rg_stop_req ? 3'd3 : 3'd4 ;
  assign MUX_f_csr_rsps$enq_1__VAL_2 = { 1'd1, csr_regfile$read_csr[31:0] } ;
  assign MUX_f_gpr_rsps$enq_1__VAL_2 = { 1'd1, gpr_regfile$read_rs1 } ;
  assign MUX_imem_c_rg_instr$write_1__VAL_2 =
	     { 17'd65536, imem_c_rg_cache_b16 } ;
  assign MUX_imem_c_rg_instr$write_1__VAL_3 =
	     (imem_c_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[6:5] == 2'b11) ?
	       { 1'd1, near_mem$imem_instr[36:5] } :
	       ((imem_c_rg_pc[1:0] == 2'b0 &&
		 near_mem$imem_instr[6:5] != 2'b11) ?
		  { 17'd65536, near_mem$imem_instr[20:5] } :
		  ((imem_c_rg_pc[1:0] != 2'b0 &&
		    near_mem$imem_instr[22:21] != 2'b11) ?
		     { 17'd65536, near_mem$imem_instr[36:21] } :
		     33'h0AAAAAAAA)) ;
  assign MUX_imem_c_rg_instr$write_1__VAL_4 =
	     { 1'd1, near_mem$imem_instr[20:5], imem_c_rg_cache_b16 } ;
  assign MUX_imem_c_rg_state$write_1__VAL_2 =
	     (imem_c_rg_state == 3'd0 ||
	      IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51) ?
	       3'd2 :
	       (IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 ?
		  ((imem_c_rg_cache_b16[1:0] == 2'b11) ? 3'd3 : 3'd4) :
		  3'd2) ;
  assign MUX_imem_c_rg_state$write_1__VAL_4 =
	     (imem_c_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[22:21] == 2'b11) ?
	       3'd3 :
	       ((imem_c_rg_pc[1:0] == 2'b0 &&
		 near_mem$imem_instr[6:5] == 2'b11 ||
		 imem_c_rg_pc[1:0] != 2'b0 &&
		 near_mem$imem_instr[22:21] != 2'b11) ?
		  3'd0 :
		  3'd1) ;
  always@(rg_alu_outputs or next_pc__h150032 or csr_regfile$csr_ret_actions)
  begin
    case (rg_alu_outputs[111:108])
      4'd1: MUX_imem_c_w_addr$wset_1__VAL_5 = next_pc__h150032;
      4'd2: MUX_imem_c_w_addr$wset_1__VAL_5 = rg_alu_outputs[95:64];
      4'd8: MUX_imem_c_w_addr$wset_1__VAL_5 = csr_regfile$csr_ret_actions;
      default: MUX_imem_c_w_addr$wset_1__VAL_5 = next_pc__h150032;
    endcase
  end
  assign MUX_near_mem$imem_req_1__VAL_1 =
	     { imem_c_rg_pc[31:2], 2'd0 } + 32'd4 ;
  assign MUX_near_mem$imem_req_1__VAL_2 =
	     (imem_c_rg_state == 3'd0 ||
	      IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51) ?
	       addr_of_b32__h2419 :
	       _theResult___snd_fst__h2506 ;
  always@(rg_alu_outputs or
	  csr_regfile$dcsr_break_enters_debug or
	  IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_3_ETC___d1445)
  begin
    case (rg_alu_outputs[111:108])
      4'd1:
	  MUX_rg_state$write_1__VAL_1 =
	      (rg_alu_outputs[103:101] == 3'd0) ? 5'd4 : 5'd11;
      4'd2, 4'd5, 4'd6, 4'd8: MUX_rg_state$write_1__VAL_1 = 5'd4;
      4'd3, 4'd4:
	  MUX_rg_state$write_1__VAL_1 =
	      IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_3_ETC___d1445;
      4'd9: MUX_rg_state$write_1__VAL_1 = 5'd18;
      default: MUX_rg_state$write_1__VAL_1 =
		   (rg_alu_outputs[107:104] == 4'd3 &&
		    csr_regfile$dcsr_break_enters_debug) ?
		     5'd15 :
		     5'd13;
    endcase
  end
  assign MUX_rg_state$write_1__VAL_2 =
	     near_mem$dmem_exc_get[4] ? 5'd13 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_3 = rg_csr_permitted ? 5'd4 : 5'd13 ;
  assign MUX_rg_state$write_1__VAL_4 = rg_stop_req ? 5'd3 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_5 =
	     imem_c_rg_exc[4] ?
	       5'd13 :
	       (csr_regfile$interrupt_pending[4] ? 5'd16 : 5'd5) ;
  assign MUX_rg_state$write_1__VAL_6 =
	     (rg_exec1_inputs[108] || rg_exec1_inputs[107] ||
	      rg_exec1_inputs[106] ||
	      rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
	       5'd6 :
	       (((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
		 (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
		  (rg_exec1_inputs[151] ? 5'd6 : 5'd12) :
		  ((rg_exec1_inputs[104] || rg_exec1_inputs[105] ||
		    rg_exec1_inputs[103] ||
		    rg_exec1_inputs[102]) ?
		     5'd6 :
		     (rg_exec1_inputs[101] ?
			5'd7 :
			(rg_exec1_inputs[100] ? 5'd8 : 5'd6)))) ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { rg_pc, imem_c_rg_exc[3:0], rg_pc } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { rg_pc, rg_alu_outputs[107:104], x__h145173 } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { rg_pc, near_mem$dmem_exc_get[3:0], rg_alu_outputs[95:64] } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { rg_pc, 4'd2, rg_exec1_inputs[157:126] } ;

  // inlined wires
  assign imem_c_w_addr$whas =
	     WILL_FIRE_RL_rl_restart_trap && !rg_stop_req && !rg_step_req ||
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req && !rg_step_req ||
	     WILL_FIRE_RL_rl_debug_run && !rg_stop_req && !rg_step_req ||
	     _dand4imem_c_w_addr$EN_wset ||
	     WILL_FIRE_RL_rl_exec2 &&
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1509 ||
	     _dand6imem_c_w_addr$EN_wset ||
	     _dand7imem_c_w_addr$EN_wset ||
	     WILL_FIRE_RL_rl_restart_external_interrupt ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       debug_hart_put_other_req_put[1:0] ;
  assign cfg_verbosity$EN =
	     EN_set_verbosity || EN_debug_hart_put_other_req_put ;

  // register imem_c_rg_cache_b16
  assign imem_c_rg_cache_b16$D_IN = near_mem$imem_instr[36:21] ;
  assign imem_c_rg_cache_b16$EN =
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ;

  // register imem_c_rg_exc
  assign imem_c_rg_exc$D_IN =
	     (WILL_FIRE_RL_rl_reset_start ||
	      WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP) ?
	       5'd10 :
	       near_mem$imem_instr[4:0] ;
  assign imem_c_rg_exc$EN =
	     WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ;

  // register imem_c_rg_instr
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP or
	  MUX_imem_c_rg_instr$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_c_rl_NEW_RSP or
	  MUX_imem_c_rg_instr$write_1__VAL_3 or
	  WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP or
	  MUX_imem_c_rg_instr$write_1__VAL_4 or WILL_FIRE_RL_rl_run)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: imem_c_rg_instr$D_IN = 33'h0AAAAAAAA;
    WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP:
	imem_c_rg_instr$D_IN = MUX_imem_c_rg_instr$write_1__VAL_2;
    WILL_FIRE_RL_imem_c_rl_NEW_RSP:
	imem_c_rg_instr$D_IN = MUX_imem_c_rg_instr$write_1__VAL_3;
    WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP:
	imem_c_rg_instr$D_IN = MUX_imem_c_rg_instr$write_1__VAL_4;
    WILL_FIRE_RL_rl_run: imem_c_rg_instr$D_IN = 33'h0AAAAAAAA;
    default: imem_c_rg_instr$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
  endcase
  assign imem_c_rg_instr$EN =
	     WILL_FIRE_RL_rl_run || WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ||
	     WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP ;

  // register imem_c_rg_pc
  assign imem_c_rg_pc$D_IN = addr__h2418 ;
  assign imem_c_rg_pc$EN = CAN_FIRE_RL_imem_c_rl_new_req ;

  // register imem_c_rg_state
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_imem_c_rl_new_req or
	  MUX_imem_c_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP or
	  WILL_FIRE_RL_imem_c_rl_NEW_RSP or
	  MUX_imem_c_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: imem_c_rg_state$D_IN = 3'd0;
    WILL_FIRE_RL_imem_c_rl_new_req:
	imem_c_rg_state$D_IN = MUX_imem_c_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP: imem_c_rg_state$D_IN = 3'd0;
    WILL_FIRE_RL_imem_c_rl_NEW_RSP:
	imem_c_rg_state$D_IN = MUX_imem_c_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP: imem_c_rg_state$D_IN = 3'd1;
    default: imem_c_rg_state$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign imem_c_rg_state$EN =
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ||
	     WILL_FIRE_RL_imem_c_rl_new_req ||
	     WILL_FIRE_RL_imem_c_rl_I16_ODD_RSP ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ;

  // register rg_alu_outputs
  assign rg_alu_outputs$D_IN =
	     { rg_exec1_inputs[108] ?
		 ((!rg_exec1_inputs[94] && !rg_exec1_inputs[93] &&
		   !rg_exec1_inputs[92] &&
		   !rg_exec1_inputs[91] &&
		   !rg_exec1_inputs[90] &&
		   !rg_exec1_inputs[89]) ?
		    4'd10 :
		    (IF_rg_exec1_inputs_96_BIT_94_080_THEN_rg_exec1_ETC___d1108 ?
		       4'd2 :
		       4'd1)) :
		 ((rg_exec1_inputs[107] || rg_exec1_inputs[106]) ?
		    4'd2 :
		    ((rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
		       4'd1 :
		       (((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
			 (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
			  (rg_exec1_inputs[151] ? 4'd10 : 4'd1) :
			  ((rg_exec1_inputs[104] || rg_exec1_inputs[105]) ?
			     (((!rg_exec1_inputs[86] ||
				rg_exec1_inputs[105] &&
				rg_exec1_inputs[156]) &&
			       (!rg_exec1_inputs[86] ||
				!rg_exec1_inputs[105] ||
				!rg_exec1_inputs[156]) &&
			       !rg_exec1_inputs[85] &&
			       !rg_exec1_inputs[84] &&
			       !rg_exec1_inputs[83] &&
			       !rg_exec1_inputs[82] &&
			       !rg_exec1_inputs[81]) ?
				4'd10 :
				4'd1) :
			     ((rg_exec1_inputs[103] || rg_exec1_inputs[102]) ?
				4'd1 :
				((rg_exec1_inputs[101] ||
				  rg_exec1_inputs[100]) ?
				   (rg_exec1_inputs[80] ? 4'd1 : 4'd10) :
				   (rg_exec1_inputs[99] ?
				      (rg_exec1_inputs[78] ?
					 4'd6 :
					 (rg_exec1_inputs[79] ?
					    4'd5 :
					    4'd10)) :
				      (rg_exec1_inputs[98] ?
					 (rg_exec1_inputs[77] ?
					    ((rg_exec1_inputs[137:133] ==
					      5'd0 &&
					      rg_exec1_inputs[145:141] ==
					      5'd0) ?
					       ((rg_exec1_inputs[70] ||
						 rg_exec1_inputs[69]) ?
						  4'd10 :
						  (rg_exec1_inputs[65] ?
						     4'd8 :
						     (rg_exec1_inputs[64] ?
							4'd9 :
							4'd10))) :
					       4'd10) :
					    ((rg_exec1_inputs[76] ||
					      rg_exec1_inputs[73]) ?
					       4'd3 :
					       ((rg_exec1_inputs[75] ||
						 rg_exec1_inputs[72] ||
						 rg_exec1_inputs[74] ||
						 rg_exec1_inputs[71]) ?
						  4'd4 :
						  4'd10))) :
					 4'd10)))))))),
	       x1_avValue_snd_exc_code__h119576,
	       IF_rg_exec1_inputs_96_BIT_108_97_OR_rg_exec1_i_ETC___d1399 } ;
  assign rg_alu_outputs$EN = WILL_FIRE_RL_rl_exec1 ;

  // register rg_csr_permitted
  assign rg_csr_permitted$D_IN = csr_regfile$access_permitted ;
  assign rg_csr_permitted$EN =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd3 ||
	      rg_alu_outputs[111:108] == 4'd4) ;

  // register rg_exec1_inputs
  assign rg_exec1_inputs$D_IN =
	     { x__h5849,
	       imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b11,
	       imem_c_rg_instr_BITS_31_TO_0__q1[15:0],
	       x__h5849[6:0] == 7'b1100011,
	       x__h5849[6:0] == 7'b1101111,
	       x__h5849[6:0] == 7'b1100111,
	       x__h5849[6:0] == 7'b0110011,
	       x__h5849[6:0] == 7'b0010011,
	       x__h5849[6:0] == 7'b0110111,
	       x__h5849[6:0] == 7'b0010111,
	       x__h5849[6:0] == 7'b0000011,
	       x__h5849[6:0] == 7'b0100011,
	       x__h5849[6:0] == 7'b0001111,
	       x__h5849[6:0] == 7'b1110011,
	       x__h5849[31:25] == 7'b0000001,
	       x__h5849[31:25] == 7'b0,
	       x__h5849[31:25] == 7'b0100000,
	       x__h5849[14:12] == 3'b0,
	       x__h5849[14:12] == 3'b001,
	       x__h5849[14:12] == 3'b100,
	       x__h5849[14:12] == 3'b101,
	       x__h5849[14:12] == 3'b110,
	       x__h5849[14:12] == 3'b111,
	       x__h5849[14:12] == 3'b001,
	       x__h5849[14:12] == 3'b101,
	       x__h5849[14:12] == 3'b0,
	       x__h5849[14:12] == 3'b010,
	       x__h5849[14:12] == 3'b011,
	       x__h5849[14:12] == 3'b100,
	       x__h5849[14:12] == 3'b110,
	       x__h5849[14:12] == 3'b111,
	       x__h5849[14:12] == 3'b0 || x__h5849[14:12] == 3'b100 ||
	       x__h5849[14:12] == 3'b001 ||
	       x__h5849[14:12] == 3'b101 ||
	       x__h5849[14:12] == 3'b010,
	       x__h5849[14:12] == 3'b0,
	       x__h5849[14:12] == 3'b001,
	       x__h5849[14:12] == 3'b0,
	       x__h5849[14:12] == 3'b001,
	       x__h5849[14:12] == 3'b010,
	       x__h5849[14:12] == 3'b011,
	       x__h5849[14:12] == 3'b101,
	       x__h5849[14:12] == 3'b110,
	       x__h5849[14:12] == 3'b111,
	       x__h5849[31:20] == 12'b0,
	       x__h5849[31:20] == 12'b000000000001,
	       x__h5849[31:20] == 12'b000000000010,
	       x__h5849[31:20] == 12'b000100000010,
	       x__h5849[31:20] == 12'b001000000010,
	       x__h5849[31:20] == 12'b001100000010,
	       x__h5849[31:20] == 12'b000100000101,
	       gpr_regfile$read_rs1,
	       gpr_regfile$read_rs2 } ;
  assign rg_exec1_inputs$EN =
	     WILL_FIRE_RL_rl_run && !imem_c_rg_exc[4] &&
	     !csr_regfile$interrupt_pending[4] ;

  // register rg_halt
  assign rg_halt$D_IN = !MUX_rg_halt$write_1__SEL_6 ;
  assign rg_halt$EN =
	     MUX_rg_halt$write_1__PSEL_1 && (rg_stop_req || rg_step_req) ||
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req && rg_step_req ||
	     WILL_FIRE_RL_rl_exec2 &&
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1497 ||
	     _dand4rg_halt$EN_write ||
	     _dand5rg_halt$EN_write ||
	     WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_pc
  always@(MUX_rg_pc$write_1__SEL_1 or
	  next_pc__h150032 or
	  MUX_rg_pc$write_1__SEL_2 or
	  addr_map$m_pc_reset_value or
	  MUX_rg_pc$write_1__SEL_3 or
	  MUX_rg_pc$write_1__SEL_4 or
	  MUX_imem_c_w_addr$wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_restart_trap or
	  rg_pc or
	  MUX_rg_pc$write_1__SEL_6 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_debug_run or
	  csr_regfile$read_dpc or MUX_imem_c_w_addr$wset_1__PSEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_pc$write_1__SEL_1: rg_pc$D_IN = next_pc__h150032;
      MUX_rg_pc$write_1__SEL_2: rg_pc$D_IN = addr_map$m_pc_reset_value;
      MUX_rg_pc$write_1__SEL_3: rg_pc$D_IN = next_pc__h150032;
      MUX_rg_pc$write_1__SEL_4: rg_pc$D_IN = MUX_imem_c_w_addr$wset_1__VAL_5;
      WILL_FIRE_RL_rl_restart_trap: rg_pc$D_IN = rg_pc;
      MUX_rg_pc$write_1__SEL_6: rg_pc$D_IN = csr_regfile$csr_trap_actions;
      WILL_FIRE_RL_rl_debug_run: rg_pc$D_IN = csr_regfile$read_dpc;
      MUX_imem_c_w_addr$wset_1__PSEL_4: rg_pc$D_IN = next_pc__h150032;
      default: rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pc$EN =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted ||
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_take_external_interrupt ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN =
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN =
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_state
  always@(MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__VAL_1 or
	  MUX_rg_state$write_1__SEL_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  MUX_rg_state$write_1__SEL_3 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_run or
	  MUX_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_exec1 or
	  MUX_rg_state$write_1__VAL_6 or
	  MUX_rg_state$write_1__SEL_7 or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__SEL_10 or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_take_external_interrupt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state$write_1__SEL_1:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      MUX_rg_state$write_1__SEL_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      MUX_rg_state$write_1__SEL_3:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
      WILL_FIRE_RL_rl_run: rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
      WILL_FIRE_RL_rl_exec1: rg_state$D_IN = MUX_rg_state$write_1__VAL_6;
      MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 5'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 5'd1;
      MUX_rg_state$write_1__SEL_9: rg_state$D_IN = 5'd3;
      MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 5'd4;
      WILL_FIRE_RL_rl_trap: rg_state$D_IN = 5'd14;
      WILL_FIRE_RL_rl_take_external_interrupt: rg_state$D_IN = 5'd17;
      default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      (rg_alu_outputs[103:101] == 3'd0 ||
	       rg_alu_outputs[103:101] == 3'd4) ||
	      rg_alu_outputs[111:108] == 4'd3 ||
	      rg_alu_outputs[111:108] == 4'd4 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6 ||
	      rg_alu_outputs[111:108] == 4'd9 ||
	      rg_alu_outputs[111:108] == 4'd10) ||
	     WILL_FIRE_RL_rl_ST_completion ||
	     WILL_FIRE_RL_rl_LD_completion ||
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	     WILL_FIRE_RL_rl_CSRR_W_completion ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_run ||
	     WILL_FIRE_RL_rl_exec1 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_from_RUNNING ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Mode ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_restart_external_interrupt ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_restart_trap ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_take_external_interrupt ;

  // register rg_step_req
  assign rg_step_req$D_IN = !MUX_rg_halt$write_1__SEL_6 ;
  assign rg_step_req$EN =
	     MUX_rg_halt$write_1__PSEL_1 && !rg_stop_req && !rg_step_req &&
	     csr_regfile$read_dcsr_step ||
	     WILL_FIRE_RL_rl_reset_complete && !rg_stop_req && !rg_step_req &&
	     csr_regfile$read_dcsr_step ||
	     WILL_FIRE_RL_rl_exec2 &&
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1485 ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     NOT_near_mem_dmem_exc_get_637_BIT_4_638_642_AN_ETC___d1646 ||
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted_661_AND_NOT_rg_stop_req_00_13_ETC___d1675 ||
	     WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stop_req
  always@(WILL_FIRE_RL_rl_reset_start or
	  f_reset_reqs$D_OUT or
	  MUX_rg_stop_req$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_stop or WILL_FIRE_RL_rl_debug_halt)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_start: rg_stop_req$D_IN = !f_reset_reqs$D_OUT;
      MUX_rg_stop_req$write_1__SEL_1 || WILL_FIRE_RL_rl_stop:
	  rg_stop_req$D_IN = 1'd0;
      WILL_FIRE_RL_rl_debug_halt: rg_stop_req$D_IN = 1'd1;
      default: rg_stop_req$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_stop_req$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_stop_req ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_debug_halt ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  MUX_rg_trap_info$write_1__SEL_2 or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  MUX_rg_trap_info$write_1__SEL_3 or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  MUX_rg_trap_info$write_1__SEL_4 or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      MUX_rg_trap_info$write_1__SEL_2:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      MUX_rg_trap_info$write_1__SEL_3:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      MUX_rg_trap_info$write_1__SEL_4:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_run && imem_c_rg_exc[4] ||
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd10 ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     near_mem$dmem_exc_get[4] ||
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     !rg_csr_permitted ;

  // submodule addr_map
  assign addr_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign addr_map$m_is_itcm_addr_addr = 32'h0 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_csr_addr = rg_exec1_inputs[157:146] ;
  assign csr_regfile$access_permitted_read_not_write =
	     rg_alu_outputs[111:108] == 4'd4 &&
	     rg_alu_outputs[63:32] == 32'd0 ;
  assign csr_regfile$csr_trap_actions_exc_code =
	     WILL_FIRE_RL_rl_take_external_interrupt ?
	       csr_regfile$interrupt_pending[3:0] :
	       rg_trap_info[35:32] ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     WILL_FIRE_RL_rl_take_external_interrupt ;
  assign csr_regfile$csr_trap_actions_pc =
	     WILL_FIRE_RL_rl_take_external_interrupt ?
	       rg_pc :
	       rg_trap_info[67:36] ;
  assign csr_regfile$csr_trap_actions_xtval =
	     WILL_FIRE_RL_rl_take_external_interrupt ?
	       32'd0 :
	       rg_trap_info[31:0] ;
  assign csr_regfile$dcsr_break_enters_debug_cur_priv = 2'b11 ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     WILL_FIRE_RL_rl_debug_write_csr ?
	       f_csr_reqs$D_OUT[43:32] :
	       rg_exec1_inputs[157:146] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  rg_alu_outputs or
	  MUX_csr_regfile$mav_csr_write_1__SEL_2 or
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 or
	  WILL_FIRE_RL_rl_debug_write_csr or f_csr_reqs$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  csr_regfile$mav_csr_write_word = rg_alu_outputs[63:32];
      MUX_csr_regfile$mav_csr_write_1__SEL_2:
	  csr_regfile$mav_csr_write_word =
	      MUX_csr_regfile$mav_csr_write_2__VAL_2;
      WILL_FIRE_RL_rl_debug_write_csr:
	  csr_regfile$mav_csr_write_word = f_csr_reqs$D_OUT[31:0];
      default: csr_regfile$mav_csr_write_word =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$read_csr_csr_addr =
	     MUX_rg_state$write_1__SEL_3 ?
	       rg_exec1_inputs[157:146] :
	       f_csr_reqs$D_OUT[43:32] ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  always@(WILL_FIRE_RL_rl_stop or
	  MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_1 or
	  WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode or
	  WILL_FIRE_RL_rl_reset_complete)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stop:
	  csr_regfile$write_dcsr_cause_priv_cause =
	      MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_1;
      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd1;
      WILL_FIRE_RL_rl_reset_complete:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd3;
      default: csr_regfile$write_dcsr_cause_priv_cause =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$write_dcsr_cause_priv_priv = 2'b11 ;
  assign csr_regfile$write_dpc_pc = rg_pc ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted ||
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	     rg_exec1_inputs[145:141] != 5'd0 ||
	     WILL_FIRE_RL_rl_debug_write_csr ;
  assign csr_regfile$EN_csr_trap_actions = MUX_rg_pc$write_1__SEL_6 ;
  assign csr_regfile$EN_csr_ret_actions =
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 ;
  assign csr_regfile$EN_csr_minstret_incr =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted ||
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0 ||
	      rg_alu_outputs[111:108] == 4'd8 ||
	      rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_M_completion ;
  assign csr_regfile$EN_write_dpc = MUX_rg_state$write_1__SEL_9 ;
  assign csr_regfile$EN_write_dcsr_cause_priv =
	     WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_csr_reqs
  assign f_csr_reqs$D_IN = debug_hart_csr_mem_server_request_put ;
  assign f_csr_reqs$ENQ = EN_debug_hart_csr_mem_server_request_put ;
  assign f_csr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_reqs$CLR = CAN_FIRE_RL_rl_reset_start ;

  // submodule f_csr_rsps
  assign f_csr_rsps$D_IN =
	     WILL_FIRE_RL_rl_debug_write_csr ?
	       33'h1AAAAAAAA :
	       MUX_f_csr_rsps$enq_1__VAL_2 ;
  assign f_csr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_rsps$DEQ = EN_debug_hart_csr_mem_server_response_get ;
  assign f_csr_rsps$CLR = CAN_FIRE_RL_rl_reset_start ;

  // submodule f_gpr_reqs
  assign f_gpr_reqs$D_IN = debug_hart_gpr_mem_server_request_put ;
  assign f_gpr_reqs$ENQ = EN_debug_hart_gpr_mem_server_request_put ;
  assign f_gpr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_reqs$CLR = CAN_FIRE_RL_rl_reset_start ;

  // submodule f_gpr_rsps
  assign f_gpr_rsps$D_IN =
	     WILL_FIRE_RL_rl_debug_write_gpr ?
	       33'h1AAAAAAAA :
	       MUX_f_gpr_rsps$enq_1__VAL_2 ;
  assign f_gpr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_rsps$DEQ = EN_debug_hart_gpr_mem_server_response_get ;
  assign f_gpr_rsps$CLR = CAN_FIRE_RL_rl_reset_start ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = debug_hart_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_debug_hart_reset_server_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset_start ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = !rg_stop_req ;
  assign f_reset_rsps$ENQ =
	     gpr_regfile$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__6_A_ETC___d107 &&
	     rg_state == 5'd1 ;
  assign f_reset_rsps$DEQ = EN_debug_hart_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_run_halt_reqs
  assign f_run_halt_reqs$D_IN = debug_hart_server_run_halt_request_put ;
  assign f_run_halt_reqs$ENQ = EN_debug_hart_server_run_halt_request_put ;
  assign f_run_halt_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_halt_ignore ||
	     WILL_FIRE_RL_rl_debug_halt ||
	     WILL_FIRE_RL_rl_debug_run_ignore ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign f_run_halt_reqs$CLR = CAN_FIRE_RL_rl_reset_start ;

  // submodule f_run_halt_rsps
  assign f_run_halt_rsps$D_IN = !MUX_f_run_halt_rsps$enq_1__SEL_1 ;
  assign f_run_halt_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_halt_ignore || WILL_FIRE_RL_rl_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_debug_run_ignore ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign f_run_halt_rsps$DEQ = EN_debug_hart_server_run_halt_response_get ;
  assign f_run_halt_rsps$CLR = CAN_FIRE_RL_rl_reset_start ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_rs1 =
	     WILL_FIRE_RL_rl_run ? x__h5849[19:15] : f_gpr_reqs$D_OUT[36:32] ;
  assign gpr_regfile$read_rs2_rs2 = x__h5849[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     WILL_FIRE_RL_rl_debug_write_gpr ?
	       f_gpr_reqs$D_OUT[36:32] :
	       rg_alu_outputs[100:96] ;
  always@(MUX_gpr_regfile$write_rd_1__SEL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  csr_regfile$read_csr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_4 or
	  rg_alu_outputs or
	  WILL_FIRE_RL_rl_M_completion or
	  mbox$word or
	  WILL_FIRE_RL_rl_SH_completion or
	  sbox$word or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or near_mem$dmem_word32_get)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_gpr_regfile$write_rd_1__SEL_1 ||
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  gpr_regfile$write_rd_rd_val = csr_regfile$read_csr[31:0];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd_val = f_gpr_reqs$D_OUT[31:0];
      MUX_gpr_regfile$write_rd_1__SEL_4:
	  gpr_regfile$write_rd_rd_val = rg_alu_outputs[63:32];
      WILL_FIRE_RL_rl_M_completion: gpr_regfile$write_rd_rd_val = mbox$word;
      WILL_FIRE_RL_rl_SH_completion: gpr_regfile$write_rd_rd_val = sbox$word;
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd_val = near_mem$dmem_word32_get;
      default: gpr_regfile$write_rd_rd_val =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted ||
	     WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted ||
	     WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] ||
	     WILL_FIRE_RL_rl_exec2 &&
	     (rg_alu_outputs[111:108] == 4'd2 ||
	      rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs[103:101] == 3'd0) ||
	     WILL_FIRE_RL_rl_M_completion ||
	     WILL_FIRE_RL_rl_SH_completion ||
	     WILL_FIRE_RL_rl_debug_write_gpr ;

  // submodule mbox
  assign mbox$req_f3 = rg_exec1_inputs[140:138] ;
  assign mbox$req_is_OP_not_OP_32 = !rg_exec1_inputs[129] ;
  assign mbox$req_v1 = rg_alu_outputs[63:32] ;
  assign mbox$req_v2 = rg_alu_outputs[31:0] ;
  assign mbox$set_verbosity_verbosity = 4'h0 ;
  assign mbox$EN_set_verbosity = 1'b0 ;
  assign mbox$EN_req_reset = 1'b0 ;
  assign mbox$EN_rsp_reset = 1'b0 ;
  assign mbox$EN_req =
	     WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	     rg_alu_outputs[103:101] == 3'd4 ;

  // submodule near_mem
  assign near_mem$dbg_server_request_put = dbg_server_request_put ;
  assign near_mem$dma_server_request_put = dma_server_request_put ;
  assign near_mem$dmem_master_HRDATA = dmem_master_HRDATA ;
  assign near_mem$dmem_master_HREADY = dmem_master_HREADY ;
  assign near_mem$dmem_master_HRESP = dmem_master_HRESP ;
  assign near_mem$dmem_req_addr =
	     rg_exec1_inputs[101] ? addr__h118827 : addr__h118943 ;
  assign near_mem$dmem_req_f3 = rg_exec1_inputs[140:138] ;
  assign near_mem$dmem_req_op = !rg_exec1_inputs[101] ;
  assign near_mem$dmem_req_store_value = rg_exec1_inputs[31:0] ;
  assign near_mem$imem_req_addr =
	     MUX_near_mem$imem_req_1__SEL_1 ?
	       MUX_near_mem$imem_req_1__VAL_1 :
	       MUX_near_mem$imem_req_1__VAL_2 ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP && imem_c_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[22:21] == 2'b11 ||
	     WILL_FIRE_RL_imem_c_rl_new_req &&
	     imem_c_rg_state_EQ_0_7_OR_IF_imem_c_w_addr_wha_ETC___d69 ;
  assign near_mem$EN_imem_instr =
	     WILL_FIRE_RL_imem_c_rl_I32_ODD_RSP ||
	     WILL_FIRE_RL_imem_c_rl_NEW_RSP ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_exec1 && !rg_exec1_inputs[108] &&
	     !rg_exec1_inputs[107] &&
	     !rg_exec1_inputs[106] &&
	     !rg_exec1_inputs[104] &&
	     !rg_exec1_inputs[105] &&
	     !rg_exec1_inputs[103] &&
	     !rg_exec1_inputs[102] &&
	     (rg_exec1_inputs[101] || rg_exec1_inputs[100]) ;
  assign near_mem$EN_dmem_word32_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_dmem_exc_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_dbg_server_request_put = EN_dbg_server_request_put ;
  assign near_mem$EN_dbg_server_response_get = EN_dbg_server_response_get ;
  assign near_mem$EN_dma_server_request_put = EN_dma_server_request_put ;
  assign near_mem$EN_dma_server_response_get = EN_dma_server_response_get ;

  // submodule sbox
  assign sbox$req_right = !rg_exec1_inputs[88] ;
  assign sbox$req_v1 = rg_exec1_inputs[63:32] ;
  assign sbox$req_v2 = alu_outputs___1_val2__h118605 ;
  assign sbox$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign sbox$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_complete ;
  assign sbox$EN_req =
	     WILL_FIRE_RL_rl_exec1 && !rg_exec1_inputs[108] &&
	     !rg_exec1_inputs[107] &&
	     !rg_exec1_inputs[106] &&
	     (!rg_exec1_inputs[105] || !rg_exec1_inputs[97]) &&
	     (rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
	     (rg_exec1_inputs[88] || rg_exec1_inputs[87]) &&
	     !rg_exec1_inputs[151] ;

  // remaining internal signals
  assign IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51 =
	     addr__h2418 == imem_c_rg_pc ;
  assign IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 =
	     addr__h2418[31:2] == imem_c_rg_pc[31:2] ;
  assign IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_3_ETC___d1445 =
	     (rg_alu_outputs[111:108] == 4'd3) ? 5'd9 : 5'd10 ;
  assign IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_ETC___d1420 =
	     (rg_alu_outputs[111:108] == 4'd8) ?
	       rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	       imem_c_rg_state == 3'd1 :
	       rg_alu_outputs[111:108] != 4'd5 &&
	       rg_alu_outputs[111:108] != 4'd6 ||
	       rg_stop_req ||
	       rg_step_req ||
	       imem_c_rg_state == 3'd0 ||
	       imem_c_rg_state == 3'd1 ;
  assign IF_rg_exec1_inputs_96_BIT_108_97_OR_rg_exec1_i_ETC___d1399 =
	     { (rg_exec1_inputs[108] || rg_exec1_inputs[107] ||
		rg_exec1_inputs[106]) ?
		 3'd0 :
		 ((rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
		    3'd4 :
		    (((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
		      (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
		       3'd3 :
		       ((rg_exec1_inputs[104] || rg_exec1_inputs[105] ||
			 rg_exec1_inputs[103] ||
			 rg_exec1_inputs[102]) ?
			  3'd0 :
			  (rg_exec1_inputs[101] ?
			     3'd1 :
			     (rg_exec1_inputs[100] ? 3'd2 : 3'd0))))),
	       x1_avValue_snd_rd__h119578,
	       x__h120407,
	       x1_avValue_snd_val1__h119573,
	       x1_avValue_snd_val2__h119560 } ;
  assign IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515 =
	     rg_exec1_inputs[125] ?
	       rg_exec1_inputs[157:126] :
	       { 16'd0, rg_exec1_inputs[124:109] } ;
  assign IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_pc_4_ETC___d1220 =
	     rg_exec1_inputs[125] ? next_pc__h120505 : next_pc___1__h120508 ;
  assign IF_rg_exec1_inputs_96_BIT_91_086_THEN_NOT_rg_e_ETC___d1105 =
	     rg_exec1_inputs[91] ?
	       !rg_exec1_inputs_96_BITS_63_TO_32_038_SLT_rg_ex_ETC___d1099 :
	       (rg_exec1_inputs[90] ?
		  rg_exec1_inputs_96_BITS_63_TO_32_038_ULT_rg_ex_ETC___d1101 :
		  rg_exec1_inputs[89] &&
		  !rg_exec1_inputs_96_BITS_63_TO_32_038_ULT_rg_ex_ETC___d1101) ;
  assign IF_rg_exec1_inputs_96_BIT_93_082_THEN_NOT_rg_e_ETC___d1107 =
	     rg_exec1_inputs[93] ?
	       !rg_exec1_inputs_96_BITS_63_TO_32_038_EQ_rg_exe_ETC___d1097 :
	       (rg_exec1_inputs[92] ?
		  rg_exec1_inputs_96_BITS_63_TO_32_038_SLT_rg_ex_ETC___d1099 :
		  IF_rg_exec1_inputs_96_BIT_91_086_THEN_NOT_rg_e_ETC___d1105) ;
  assign IF_rg_exec1_inputs_96_BIT_94_080_THEN_rg_exec1_ETC___d1108 =
	     rg_exec1_inputs[94] ?
	       rg_exec1_inputs_96_BITS_63_TO_32_038_EQ_rg_exe_ETC___d1097 :
	       IF_rg_exec1_inputs_96_BIT_93_082_THEN_NOT_rg_e_ETC___d1107 ;
  assign NOT_near_mem_dmem_exc_get_637_BIT_4_638_642_AN_ETC___d1646 =
	     !near_mem$dmem_exc_get[4] && !rg_stop_req && !rg_step_req &&
	     csr_regfile$read_dcsr_step ;
  assign NOT_rg_csr_permitted_661_662_OR_rg_stop_req_00_ETC___d1663 =
	     !rg_csr_permitted || rg_stop_req || rg_step_req ||
	     imem_c_rg_state == 3'd0 ||
	     imem_c_rg_state == 3'd1 ;
  assign SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283 =
	     { {9{offset__h23435[11]}}, offset__h23435 } ;
  assign SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390 =
	     { {4{offset__h37347[8]}}, offset__h37347 } ;
  assign SEXT_rg_exec1_inputs_96_BITS_157_TO_146_059___d1060 =
	     { {20{rg_exec1_inputs_BITS_157_TO_146__q3[11]}},
	       rg_exec1_inputs_BITS_157_TO_146__q3 } ;
  assign _dand4imem_c_w_addr$EN_wset =
	     (WILL_FIRE_RL_rl_WFI_resume || WILL_FIRE_RL_rl_SH_completion ||
	      WILL_FIRE_RL_rl_M_completion) &&
	     !rg_stop_req &&
	     !rg_step_req ;
  assign _dand4rg_halt$EN_write =
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] &&
	     (rg_stop_req || rg_step_req) ;
  assign _dand5rg_halt$EN_write =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted &&
	     (rg_stop_req || rg_step_req) ;
  assign _dand6imem_c_w_addr$EN_wset =
	     (WILL_FIRE_RL_rl_ST_completion ||
	      WILL_FIRE_RL_rl_LD_completion) &&
	     !near_mem$dmem_exc_get[4] &&
	     !rg_stop_req &&
	     !rg_step_req ;
  assign _dand7imem_c_w_addr$EN_wset =
	     (WILL_FIRE_RL_rl_CSRR_S_or_C_completion ||
	      WILL_FIRE_RL_rl_CSRR_W_completion) &&
	     rg_csr_permitted &&
	     !rg_stop_req &&
	     !rg_step_req ;
  assign _theResult____h151593 =
	     (delta_CPI_instrs__h151592 == 64'd0) ?
	       delta_CPI_instrs___1__h151637 :
	       delta_CPI_instrs__h151592 ;
  assign _theResult___snd__h121208 =
	     rg_exec1_inputs[104] ?
	       SEXT_rg_exec1_inputs_96_BITS_157_TO_146_059___d1060 :
	       rg_exec1_inputs[31:0] ;
  assign _theResult___snd_fst__h2506 =
	     IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 ?
	       _theResult___snd_fst__h2512 :
	       addr_of_b32__h2419 ;
  assign _theResult___snd_fst__h2512 =
	     (imem_c_rg_cache_b16[1:0] == 2'b11) ?
	       addr_of_b32___1__h2548 :
	       addr_of_b32__h2419 ;
  assign a__h102290 =
	     { 7'b0,
	       rd__h16512,
	       rs1__h16511,
	       3'b0,
	       rs1__h16511,
	       7'b0111011 } ;
  assign a__h105695 =
	     { 7'b0100000,
	       rd__h16512,
	       rs1__h16511,
	       3'b0,
	       rs1__h16511,
	       7'b0111011 } ;
  assign a__h109078 =
	     { 12'b000000000001,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b1110011 } ;
  assign a__h121193 = rg_exec1_inputs[63:32] + _theResult___snd__h121208 ;
  assign a__h124622 = rg_exec1_inputs[63:32] - _theResult___snd__h121208 ;
  assign a__h127874 =
	     ((rg_exec1_inputs[63:32] ^ 32'h80000000) <
	      (_theResult___snd__h121208 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign a__h13055 =
	     { 4'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[8:7],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h13201,
	       7'b0100011 } ;
  assign a__h131117 =
	     (rg_exec1_inputs[63:32] < _theResult___snd__h121208) ?
	       32'd1 :
	       32'd0 ;
  assign a__h134382 = rg_exec1_inputs[63:32] ^ _theResult___snd__h121208 ;
  assign a__h137623 = rg_exec1_inputs[63:32] | _theResult___snd__h121208 ;
  assign a__h140872 = rg_exec1_inputs[63:32] & _theResult___snd__h121208 ;
  assign a__h16491 =
	     { imm12__h16510, rs1__h16511, 3'b010, rd__h16512, 7'b0000011 } ;
  assign a__h19925 =
	     { 5'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       rd__h16512,
	       rs1__h16511,
	       3'b010,
	       offset_BITS_4_TO_0___h20121,
	       7'b0100011 } ;
  assign a__h23422 =
	     { SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[20],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[10:1],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[11],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[19:12],
	       12'd111 } ;
  assign a__h26994 =
	     { SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[20],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[10:1],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[11],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d283[19:12],
	       12'd239 } ;
  assign a__h30588 =
	     { 12'd0, imem_c_rg_instr_BITS_31_TO_0__q1[11:7], 15'd103 } ;
  assign a__h33943 =
	     { 12'd0, imem_c_rg_instr_BITS_31_TO_0__q1[11:7], 15'd231 } ;
  assign a__h37331 =
	     { SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[12],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[10:5],
	       5'd0,
	       rs1__h16511,
	       3'b0,
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[4:1],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[11],
	       7'b1100011 } ;
  assign a__h40887 =
	     { SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[12],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[10:5],
	       5'd0,
	       rs1__h16511,
	       3'b001,
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[4:1],
	       SEXT_IF_imem_c_rg_instr_26_BIT_32_27_THEN_imem_ETC___d390[11],
	       7'b1100011 } ;
  assign a__h44454 =
	     { imm12__h44471,
	       8'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h47821 =
	     { imm20__h47838,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0110111 } ;
  assign a__h51226 =
	     { imm12__h44471,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h57975 =
	     { imm12__h44471,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0011011 } ;
  assign a__h61358 =
	     { imm12__h61376,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h64858 = { imm12__h64874, 8'd16, rd__h16512, 7'b0010011 } ;
  assign a__h68290 =
	     { imm12__h68309,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b001,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0010011 } ;
  assign a__h71699 =
	     { imm12__h68309, rs1__h16511, 3'b101, rs1__h16511, 7'b0010011 } ;
  assign a__h75140 =
	     { imm12__h75161, rs1__h16511, 3'b101, rs1__h16511, 7'b0010011 } ;
  assign a__h7815 =
	     { imm12__h7835,
	       8'd18,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0000011 } ;
  assign a__h78603 =
	     { imm12__h44471, rs1__h16511, 3'b111, rs1__h16511, 7'b0010011 } ;
  assign a__h82019 =
	     { 7'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2],
	       8'd0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0110011 } ;
  assign a__h85388 =
	     { 7'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       3'b0,
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:7],
	       7'b0110011 } ;
  assign a__h88746 =
	     { 7'b0,
	       rd__h16512,
	       rs1__h16511,
	       3'b111,
	       rs1__h16511,
	       7'b0110011 } ;
  assign a__h92154 =
	     { 7'b0,
	       rd__h16512,
	       rs1__h16511,
	       3'b110,
	       rs1__h16511,
	       7'b0110011 } ;
  assign a__h95529 =
	     { 7'b0,
	       rd__h16512,
	       rs1__h16511,
	       3'b100,
	       rs1__h16511,
	       7'b0110011 } ;
  assign a__h98915 =
	     { 7'b0100000,
	       rd__h16512,
	       rs1__h16511,
	       3'b0,
	       rs1__h16511,
	       7'b0110011 } ;
  assign addr__h118827 =
	     rg_exec1_inputs[63:32] +
	     SEXT_rg_exec1_inputs_96_BITS_157_TO_146_059___d1060 ;
  assign addr__h118943 = x1_avValue_snd_addr__h119516 ;
  assign addr_of_b32___1__h2548 = addr_of_b32__h2419 + 32'd4 ;
  assign addr_of_b32__h2419 = { addr__h2418[31:2], 2'd0 } ;
  assign alu_outputs___1_addr__h119265 =
	     rg_pc +
	     { {11{rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2[20]}},
	       rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2 } ;
  assign alu_outputs___1_addr__h119285 = { addr__h118827[31:1], 1'd0 } ;
  assign alu_outputs___1_exc_code__h119503 =
	     rg_exec1_inputs[77] ?
	       ((rg_exec1_inputs[137:133] == 5'd0 &&
		 rg_exec1_inputs[145:141] == 5'd0) ?
		  (rg_exec1_inputs[70] ?
		     4'd11 :
		     (rg_exec1_inputs[69] ? 4'd3 : 4'd2)) :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val2__h118605 =
	     val2__h118595 | { 24'd0, rg_exec1_inputs[156], 7'b0 } ;
  assign b__h102291 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d862 &&
		 (csr_regfile$read_misa[27:26] == 2'd2 ||
		  csr_regfile$read_misa[27:26] == 2'd3)}} ;
  assign b__h105696 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d884 &&
		 (csr_regfile$read_misa[27:26] == 2'd2 ||
		  csr_regfile$read_misa[27:26] == 2'd3)}} ;
  assign b__h109079 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d905 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] == 5'd0}} ;
  assign b__h121194 =
	     {32{rg_exec1_inputs[86] &&
		 (!rg_exec1_inputs[105] || !rg_exec1_inputs[156])}} ;
  assign b__h124623 =
	     {32{rg_exec1_inputs[86] && rg_exec1_inputs[105] &&
		 rg_exec1_inputs[156]}} ;
  assign b__h127875 = {32{rg_exec1_inputs[85]}} ;
  assign b__h13056 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b110}} ;
  assign b__h131118 = {32{rg_exec1_inputs[84]}} ;
  assign b__h134383 = {32{rg_exec1_inputs[83]}} ;
  assign b__h137624 = {32{rg_exec1_inputs[82]}} ;
  assign b__h140873 = {32{rg_exec1_inputs[81]}} ;
  assign b__h16492 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b0 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b010}} ;
  assign b__h19926 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b0 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b110}} ;
  assign b__h23423 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b101}} ;
  assign b__h26995 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d317}} ;
  assign b__h30589 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d340 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] == 5'd0}} ;
  assign b__h33944 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d363 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] == 5'd0}} ;
  assign b__h37332 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b110}} ;
  assign b__h40888 =
	     {32{csr_regfile$read_misa[2] &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b111}} ;
  assign b__h44455 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d444}} ;
  assign b__h47822 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d466 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd2 &&
		 imm6__h44469 != 6'd0}} ;
  assign b__h51227 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d496 &&
		 imm6__h44469 != 6'd0}} ;
  assign b__h54597 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d515 &&
		 imm6__h44469 == 6'd0}} ;
  assign b__h57976 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d537 &&
		 (csr_regfile$read_misa[27:26] == 2'd2 ||
		  csr_regfile$read_misa[27:26] == 2'd3)}} ;
  assign b__h61359 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d564 &&
		 nzimm10__h61374 != 10'd0}} ;
  assign b__h64859 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d599}} ;
  assign b__h68291 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d623 &&
		 imm6__h44469 != 6'd0 &&
		 (csr_regfile$read_misa[27:26] != 2'd1 ||
		  !imem_c_rg_instr_BITS_31_TO_0__q1[12])}} ;
  assign b__h71700 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d653 &&
		 imm6__h44469 != 6'd0 &&
		 (csr_regfile$read_misa[27:26] != 2'd1 ||
		  !imem_c_rg_instr_BITS_31_TO_0__q1[12])}} ;
  assign b__h75141 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d678 &&
		 imm6__h44469 != 6'd0 &&
		 (csr_regfile$read_misa[27:26] != 2'd1 ||
		  !imem_c_rg_instr_BITS_31_TO_0__q1[12])}} ;
  assign b__h7816 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d170}} ;
  assign b__h78604 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d703}} ;
  assign b__h82020 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d340 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] != 5'd0}} ;
  assign b__h85389 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d363 &&
		 imem_c_rg_instr_BITS_31_TO_0__q1[6:2] != 5'd0}} ;
  assign b__h88747 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d772}} ;
  assign b__h92155 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d796}} ;
  assign b__h95530 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d817}} ;
  assign b__h98916 =
	     {32{csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d839}} ;
  assign branch_target__h119233 =
	     rg_pc + { {19{imm13_SB__h119231[12]}}, imm13_SB__h119231 } ;
  assign cpi__h151595 = x__h151594 / 64'd10 ;
  assign cpifrac__h151596 = x__h151594 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_response_get__6_A_ETC___d107 =
	     csr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     sbox$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N &&
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) ;
  assign csr_regfile_read_csr_mcycle__24_MINUS_rg_start_ETC___d1706 =
	     delta_CPI_cycles__h151591 * 64'd10 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d170 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b010 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d317 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b001 &&
	     csr_regfile$read_misa[27:26] == 2'd1 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d340 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:12] == 4'b1000 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d363 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:12] == 4'b1001 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d444 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b010 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d466 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d496 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d515 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] == 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d537 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b001 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d564 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] == 5'd2 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d599 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     nzimm10__h64872 != 10'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d623 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b0 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d653 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b100 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:10] == 2'b0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d678 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b100 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:10] == 2'b01 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d703 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:13] == 3'b100 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:10] == 2'b10 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d772 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b11 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d796 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b10 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d817 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b01 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d839 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100011 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d862 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100111 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b01 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d884 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b01 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:10] == 6'b100111 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[6:5] == 2'b0 ;
  assign csr_regfile_read_misa__61_BIT_2_62_AND_IF_imem_ETC___d905 =
	     csr_regfile$read_misa[2] &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b10 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[15:12] == 4'b1001 &&
	     imem_c_rg_instr_BITS_31_TO_0__q1[11:7] == 5'd0 ;
  assign delta_CPI_cycles__h151591 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h151637 = delta_CPI_instrs__h151592 + 64'd1 ;
  assign delta_CPI_instrs__h151592 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign imem_c_rg_instr_BITS_31_TO_0__q1 = imem_c_rg_instr[31:0] ;
  assign imem_c_rg_state_EQ_0_7_OR_IF_imem_c_w_addr_wha_ETC___d69 =
	     imem_c_rg_state == 3'd0 ||
	     IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d51 ||
	     !IF_imem_c_w_addr_whas__6_THEN_imem_c_w_addr_wg_ETC___d54 ||
	     imem_c_rg_cache_b16[1:0] == 2'b11 ;
  assign imm12__h118950 =
	     { rg_exec1_inputs[157:151], rg_exec1_inputs[137:133] } ;
  assign imm12__h16510 = { 5'd0, offset__h16507 } ;
  assign imm12__h44471 = { {6{imm6__h44469[5]}}, imm6__h44469 } ;
  assign imm12__h61376 = { {2{nzimm10__h61374[9]}}, nzimm10__h61374 } ;
  assign imm12__h64874 = { 2'd0, nzimm10__h64872 } ;
  assign imm12__h68309 =
	     (csr_regfile$read_misa[27:26] == 2'd1) ?
	       { 7'b0, imem_c_rg_instr_BITS_31_TO_0__q1[6:2] } :
	       { 6'b0, imm6__h44469 } ;
  assign imm12__h75161 =
	     (csr_regfile$read_misa[27:26] == 2'd1) ?
	       { 7'b0100000, imem_c_rg_instr_BITS_31_TO_0__q1[6:2] } :
	       { 6'b010000, imm6__h44469 } ;
  assign imm12__h7835 = { 4'd0, offset__h7831 } ;
  assign imm13_SB__h119231 =
	     { rg_exec1_inputs[157],
	       rg_exec1_inputs[133],
	       rg_exec1_inputs[156:151],
	       rg_exec1_inputs[137:134],
	       1'b0 } ;
  assign imm20__h47838 = { {14{imm6__h44469[5]}}, imm6__h44469 } ;
  assign imm6__h44469 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:2] } ;
  assign instr__h5917 = x__h7760 | y__h7761 ;
  assign near_mem_RDY_dmem_word32_get__632_AND_rg_stop__ETC___d1633 =
	     near_mem$RDY_dmem_word32_get &&
	     (rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1) ;
  assign next_pc___1__h120508 = rg_pc + 32'd2 ;
  assign next_pc__h119243 =
	     IF_rg_exec1_inputs_96_BIT_94_080_THEN_rg_exec1_ETC___d1108 ?
	       branch_target__h119233 :
	       IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_pc_4_ETC___d1220 ;
  assign next_pc__h120505 = rg_pc + 32'd4 ;
  assign next_pc__h150032 = rg_pc + (rg_exec1_inputs[125] ? 32'd4 : 32'd2) ;
  assign nzimm10__h61374 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[4:3],
	       imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       4'b0 } ;
  assign nzimm10__h64872 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[10:7],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12:11],
	       imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h13201 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h20121 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[11:10],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       2'b0 } ;
  assign offset__h16507 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12:10],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       2'b0 } ;
  assign offset__h23435 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[8],
	       imem_c_rg_instr_BITS_31_TO_0__q1[10:9],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6],
	       imem_c_rg_instr_BITS_31_TO_0__q1[7],
	       imem_c_rg_instr_BITS_31_TO_0__q1[2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[11],
	       imem_c_rg_instr_BITS_31_TO_0__q1[5:3],
	       1'b0 } ;
  assign offset__h37347 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:5],
	       imem_c_rg_instr_BITS_31_TO_0__q1[2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[11:10],
	       imem_c_rg_instr_BITS_31_TO_0__q1[4:3],
	       1'b0 } ;
  assign offset__h7831 =
	     { imem_c_rg_instr_BITS_31_TO_0__q1[3:2],
	       imem_c_rg_instr_BITS_31_TO_0__q1[12],
	       imem_c_rg_instr_BITS_31_TO_0__q1[6:4],
	       2'b0 } ;
  assign rd__h16512 = { 2'b01, imem_c_rg_instr_BITS_31_TO_0__q1[4:2] } ;
  assign rd_val__h119305 = x__h121160 | y__h121161 ;
  assign rd_val__h119315 = { rg_exec1_inputs[157:138], 12'h0 } ;
  assign rd_val__h119324 = rg_pc + rd_val__h119315 ;
  assign rg_alu_outputs_401_BITS_103_TO_101_406_EQ_0_40_ETC___d1474 =
	     rg_alu_outputs[103:101] == 3'd0 && !rg_stop_req &&
	     !rg_step_req &&
	     csr_regfile$read_dcsr_step ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_1_40_ETC___d1495 =
	     rg_alu_outputs[111:108] == 4'd1 &&
	     rg_alu_outputs[103:101] == 3'd0 &&
	     (rg_stop_req || rg_step_req) ||
	     rg_alu_outputs[111:108] == 4'd8 &&
	     (rg_stop_req || rg_step_req) ||
	     (rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) &&
	     (rg_stop_req || rg_step_req) ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_1_40_ETC___d1507 =
	     rg_alu_outputs[111:108] == 4'd1 &&
	     rg_alu_outputs[103:101] == 3'd0 &&
	     !rg_stop_req &&
	     !rg_step_req ||
	     rg_alu_outputs[111:108] == 4'd8 && !rg_stop_req &&
	     !rg_step_req ||
	     (rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) &&
	     !rg_stop_req &&
	     !rg_step_req ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1472 =
	     rg_alu_outputs[111:108] == 4'd2 && !rg_stop_req &&
	     !rg_step_req &&
	     csr_regfile$read_dcsr_step ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1485 =
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1472 ||
	     rg_alu_outputs[111:108] != 4'd2 &&
	     (rg_alu_outputs[111:108] == 4'd1 &&
	      rg_alu_outputs_401_BITS_103_TO_101_406_EQ_0_40_ETC___d1474 ||
	      rg_alu_outputs[111:108] != 4'd1 &&
	      rg_alu_outputs[111:108] != 4'd3 &&
	      rg_alu_outputs[111:108] != 4'd4 &&
	      (rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_41_ETC___d1476 ||
	       rg_alu_outputs[111:108] != 4'd8 &&
	       rg_alu_outputs_401_BITS_111_TO_108_402_EQ_5_41_ETC___d1478)) ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1497 =
	     rg_alu_outputs[111:108] == 4'd2 &&
	     (rg_stop_req || rg_step_req) ||
	     rg_alu_outputs[111:108] != 4'd2 &&
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_1_40_ETC___d1495 ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1509 =
	     rg_alu_outputs[111:108] == 4'd2 && !rg_stop_req &&
	     !rg_step_req ||
	     rg_alu_outputs[111:108] != 4'd2 &&
	     rg_alu_outputs_401_BITS_111_TO_108_402_EQ_1_40_ETC___d1507 ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_5_41_ETC___d1478 =
	     (rg_alu_outputs[111:108] == 4'd5 ||
	      rg_alu_outputs[111:108] == 4'd6) &&
	     !rg_stop_req &&
	     !rg_step_req &&
	     csr_regfile$read_dcsr_step ;
  assign rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_41_ETC___d1476 =
	     rg_alu_outputs[111:108] == 4'd8 && !rg_stop_req &&
	     !rg_step_req &&
	     csr_regfile$read_dcsr_step ;
  assign rg_csr_permitted_661_AND_NOT_rg_stop_req_00_13_ETC___d1675 =
	     rg_csr_permitted && !rg_stop_req && !rg_step_req &&
	     csr_regfile$read_dcsr_step ;
  assign rg_exec1_inputs_96_BITS_63_TO_32_038_EQ_rg_exe_ETC___d1097 =
	     rg_exec1_inputs[63:32] == rg_exec1_inputs[31:0] ;
  assign rg_exec1_inputs_96_BITS_63_TO_32_038_SLT_rg_ex_ETC___d1099 =
	     (rg_exec1_inputs[63:32] ^ 32'h80000000) <
	     (rg_exec1_inputs[31:0] ^ 32'h80000000) ;
  assign rg_exec1_inputs_96_BITS_63_TO_32_038_ULT_rg_ex_ETC___d1101 =
	     rg_exec1_inputs[63:32] < rg_exec1_inputs[31:0] ;
  assign rg_exec1_inputs_BITS_157_TO_146__q3 = rg_exec1_inputs[157:146] ;
  assign rg_exec1_inputs_BIT_157_CONCAT_rg_exec1_inputs_ETC__q2 =
	     { rg_exec1_inputs[157],
	       rg_exec1_inputs[145:138],
	       rg_exec1_inputs[146],
	       rg_exec1_inputs[156:147],
	       1'b0 } ;
  assign rg_state_8_EQ_4_28_AND_rg_halt_32_733_AND_NOT__ETC___d1735 =
	     rg_state == 5'd4 && rg_halt &&
	     !csr_regfile$interrupt_pending[4] &&
	     (rg_stop_req || rg_step_req) ;
  assign rs1__h16511 = { 2'b01, imem_c_rg_instr_BITS_31_TO_0__q1[9:7] } ;
  assign shamt__h118590 =
	     rg_exec1_inputs[104] ?
	       rg_exec1_inputs[150:146] :
	       rg_exec1_inputs[4:0] ;
  assign val2__h118595 = { 27'd0, shamt__h118590 } ;
  assign x1_avValue_snd_addr__h119516 =
	     rg_exec1_inputs[63:32] +
	     { {20{imm12__h118950[11]}}, imm12__h118950 } ;
  assign x1_avValue_snd_addr__h119558 =
	     rg_exec1_inputs[101] ?
	       addr__h118827 :
	       x1_avValue_snd_addr__h119516 ;
  assign x1_avValue_snd_addr__h119565 =
	     rg_exec1_inputs[106] ?
	       alu_outputs___1_addr__h119285 :
	       x1_avValue_snd_addr__h119558 ;
  assign x1_avValue_snd_addr__h119572 =
	     rg_exec1_inputs[107] ?
	       alu_outputs___1_addr__h119265 :
	       x1_avValue_snd_addr__h119565 ;
  assign x1_avValue_snd_exc_code__h119555 =
	     (rg_exec1_inputs[104] || rg_exec1_inputs[105] ||
	      rg_exec1_inputs[103] ||
	      rg_exec1_inputs[102] ||
	      rg_exec1_inputs[101] ||
	      rg_exec1_inputs[100] ||
	      rg_exec1_inputs[99]) ?
	       4'd2 :
	       (rg_exec1_inputs[98] ?
		  alu_outputs___1_exc_code__h119503 :
		  4'd2) ;
  assign x1_avValue_snd_exc_code__h119569 =
	     (rg_exec1_inputs[107] || rg_exec1_inputs[106]) ?
	       4'd0 :
	       x1_avValue_snd_exc_code__h119555 ;
  assign x1_avValue_snd_exc_code__h119576 =
	     rg_exec1_inputs[108] ? 4'd2 : x1_avValue_snd_exc_code__h119569 ;
  assign x1_avValue_snd_rd__h119578 =
	     rg_exec1_inputs[108] ? 5'd0 : rg_exec1_inputs[137:133] ;
  assign x1_avValue_snd_val1__h119524 =
	     rg_exec1_inputs[140] ?
	       { 27'd0, rg_exec1_inputs[145:141] } :
	       rg_exec1_inputs[63:32] ;
  assign x1_avValue_snd_val1__h119531 =
	     rg_exec1_inputs[102] ?
	       rd_val__h119324 :
	       x1_avValue_snd_val1__h119524 ;
  assign x1_avValue_snd_val1__h119538 =
	     rg_exec1_inputs[103] ?
	       rd_val__h119315 :
	       x1_avValue_snd_val1__h119531 ;
  assign x1_avValue_snd_val1__h119545 =
	     (rg_exec1_inputs[104] || rg_exec1_inputs[105]) ?
	       rd_val__h119305 :
	       x1_avValue_snd_val1__h119538 ;
  assign x1_avValue_snd_val1__h119559 =
	     (rg_exec1_inputs[105] && rg_exec1_inputs[97] ||
	      (rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
	      (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
	       rg_exec1_inputs[63:32] :
	       x1_avValue_snd_val1__h119545 ;
  assign x1_avValue_snd_val1__h119573 =
	     (rg_exec1_inputs[107] || rg_exec1_inputs[106]) ?
	       IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_pc_4_ETC___d1220 :
	       x1_avValue_snd_val1__h119559 ;
  assign x1_avValue_snd_val2__h119553 =
	     ((rg_exec1_inputs[104] || rg_exec1_inputs[105]) &&
	      (rg_exec1_inputs[88] || rg_exec1_inputs[87])) ?
	       alu_outputs___1_val2__h118605 :
	       rg_exec1_inputs[31:0] ;
  assign x1_avValue_snd_val2__h119560 =
	     (rg_exec1_inputs[105] && rg_exec1_inputs[97]) ?
	       rg_exec1_inputs[31:0] :
	       x1_avValue_snd_val2__h119553 ;
  assign x__h105684 = a__h105695 & b__h105696 ;
  assign x__h120407 =
	     rg_exec1_inputs[108] ?
	       next_pc__h119243 :
	       x1_avValue_snd_addr__h119572 ;
  assign x__h121160 = x__h121171 | y__h121172 ;
  assign x__h121171 = x__h121182 | y__h121183 ;
  assign x__h121182 = a__h121193 & b__h121194 ;
  assign x__h127863 = a__h127874 & b__h127875 ;
  assign x__h134360 = x__h134371 | y__h134372 ;
  assign x__h134371 = a__h134382 & b__h134383 ;
  assign x__h151594 =
	     csr_regfile_read_csr_mcycle__24_MINUS_rg_start_ETC___d1706[63:0] /
	     _theResult____h151593 ;
  assign x__h16480 = a__h16491 & b__h16492 ;
  assign x__h23400 = x__h23411 | y__h23412 ;
  assign x__h23411 = a__h23422 & b__h23423 ;
  assign x__h30577 = a__h30588 & b__h30589 ;
  assign x__h37298 = x__h37309 | y__h37310 ;
  assign x__h37309 = x__h37320 | y__h37321 ;
  assign x__h37320 = a__h37331 & b__h37332 ;
  assign x__h44443 = a__h44454 & b__h44455 ;
  assign x__h51204 = x__h51215 | y__h51216 ;
  assign x__h51215 = a__h51226 & b__h51227 ;
  assign x__h57964 = a__h57975 & b__h57976 ;
  assign x__h5849 =
	     (imem_c_rg_instr_BITS_31_TO_0__q1[1:0] == 2'b11) ?
	       imem_c_rg_instr[31:0] :
	       instr__h5917 ;
  assign x__h64814 = x__h64825 | y__h64826 ;
  assign x__h64825 = x__h64836 | y__h64837 ;
  assign x__h64836 = x__h64847 | y__h64848 ;
  assign x__h64847 = a__h64858 & b__h64859 ;
  assign x__h71688 = a__h71699 & b__h71700 ;
  assign x__h7760 = x__h7771 | y__h7772 ;
  assign x__h7771 = x__h7782 | y__h7783 ;
  assign x__h7782 = x__h7793 | y__h7794 ;
  assign x__h7793 = x__h7804 | y__h7805 ;
  assign x__h7804 = a__h7815 & b__h7816 ;
  assign x__h78581 = x__h78592 | y__h78593 ;
  assign x__h78592 = a__h78603 & b__h78604 ;
  assign x__h85377 = a__h85388 & b__h85389 ;
  assign x__h92121 = x__h92132 | y__h92133 ;
  assign x__h92132 = x__h92143 | y__h92144 ;
  assign x__h92143 = a__h92154 & b__h92155 ;
  assign x__h98904 = a__h98915 & b__h98916 ;
  assign y__h105685 = a__h109078 & b__h109079 ;
  assign y__h121161 = x__h134360 | y__h134361 ;
  assign y__h121172 = x__h127863 | y__h127864 ;
  assign y__h121183 = a__h124622 & b__h124623 ;
  assign y__h127864 = a__h131117 & b__h131118 ;
  assign y__h134361 = a__h140872 & b__h140873 ;
  assign y__h134372 = a__h137623 & b__h137624 ;
  assign y__h150256 = ~rg_alu_outputs[63:32] ;
  assign y__h16481 = a__h19925 & b__h19926 ;
  assign y__h23401 = x__h30577 | y__h30578 ;
  assign y__h23412 = a__h26994 & b__h26995 ;
  assign y__h30578 = a__h33943 & b__h33944 ;
  assign y__h37299 = x__h51204 | y__h51205 ;
  assign y__h37310 = x__h44443 | y__h44444 ;
  assign y__h37321 = a__h40887 & b__h40888 ;
  assign y__h44444 = a__h47821 & b__h47822 ;
  assign y__h51205 = x__h57964 | y__h57965 ;
  assign y__h51216 = a__h51226 & b__h54597 ;
  assign y__h57965 = a__h61358 & b__h61359 ;
  assign y__h64815 = x__h92121 | y__h92122 ;
  assign y__h64826 = x__h78581 | y__h78582 ;
  assign y__h64837 = x__h71688 | y__h71689 ;
  assign y__h64848 = a__h68290 & b__h68291 ;
  assign y__h71689 = a__h75140 & b__h75141 ;
  assign y__h7761 = x__h64814 | y__h64815 ;
  assign y__h7772 = x__h37298 | y__h37299 ;
  assign y__h7783 = x__h23400 | y__h23401 ;
  assign y__h7794 = x__h16480 | y__h16481 ;
  assign y__h7805 = a__h13055 & b__h13056 ;
  assign y__h78582 = x__h85377 | y__h85378 ;
  assign y__h78593 = a__h82019 & b__h82020 ;
  assign y__h85378 = a__h88746 & b__h88747 ;
  assign y__h92122 = x__h105684 | y__h105685 ;
  assign y__h92133 = x__h98904 | y__h98905 ;
  assign y__h92144 = a__h95529 & b__h95530 ;
  assign y__h98905 = a__h102290 & b__h102291 ;
  always@(rg_alu_outputs or rg_exec1_inputs or rg_pc)
  begin
    case (rg_alu_outputs[107:104])
      4'd0: x__h145173 = rg_alu_outputs[95:64];
      4'd2: x__h145173 = rg_exec1_inputs[157:126];
      4'd3: x__h145173 = rg_pc;
      default: x__h145173 = 32'd0;
    endcase
  end
  always@(rg_alu_outputs or
	  IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_ETC___d1420 or
	  rg_stop_req or rg_step_req or imem_c_rg_state)
  begin
    case (rg_alu_outputs[111:108])
      4'd1:
	  IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_ETC___d1423 =
	      rg_alu_outputs[103:101] != 3'd0 || rg_stop_req || rg_step_req ||
	      imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1;
      4'd2:
	  IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_ETC___d1423 =
	      rg_stop_req || rg_step_req || imem_c_rg_state == 3'd0 ||
	      imem_c_rg_state == 3'd1;
      default: IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_ETC___d1423 =
		   rg_alu_outputs[111:108] == 4'd3 ||
		   rg_alu_outputs[111:108] == 4'd4 ||
		   IF_rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_ETC___d1420;
    endcase
  end
  always@(MUX_imem_c_w_addr$wset_1__SEL_1 or
	  WILL_FIRE_RL_rl_restart_external_interrupt or
	  rg_pc or
	  MUX_imem_c_w_addr$wset_1__SEL_2 or
	  addr_map$m_pc_reset_value or
	  MUX_imem_c_w_addr$wset_1__SEL_3 or
	  csr_regfile$read_dpc or
	  MUX_imem_c_w_addr$wset_1__SEL_4 or
	  next_pc__h150032 or
	  MUX_imem_c_w_addr$wset_1__SEL_5 or
	  MUX_imem_c_w_addr$wset_1__VAL_5 or
	  MUX_imem_c_w_addr$wset_1__SEL_6 or MUX_imem_c_w_addr$wset_1__SEL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_w_addr$wset_1__SEL_1 ||
      WILL_FIRE_RL_rl_restart_external_interrupt:
	  addr__h2418 = rg_pc;
      MUX_imem_c_w_addr$wset_1__SEL_2:
	  addr__h2418 = addr_map$m_pc_reset_value;
      MUX_imem_c_w_addr$wset_1__SEL_3: addr__h2418 = csr_regfile$read_dpc;
      MUX_imem_c_w_addr$wset_1__SEL_4: addr__h2418 = next_pc__h150032;
      MUX_imem_c_w_addr$wset_1__SEL_5:
	  addr__h2418 = MUX_imem_c_w_addr$wset_1__VAL_5;
      MUX_imem_c_w_addr$wset_1__SEL_6: addr__h2418 = next_pc__h150032;
      MUX_imem_c_w_addr$wset_1__SEL_7: addr__h2418 = next_pc__h150032;
      default: addr__h2418 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 2'd0;
	imem_c_rg_exc <= `BSV_ASSIGNMENT_DELAY 5'd10;
	imem_c_rg_instr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	imem_c_rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_csr_permitted <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_step_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stop_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_c_rg_exc$EN)
	  imem_c_rg_exc <= `BSV_ASSIGNMENT_DELAY imem_c_rg_exc$D_IN;
	if (imem_c_rg_instr$EN)
	  imem_c_rg_instr <= `BSV_ASSIGNMENT_DELAY imem_c_rg_instr$D_IN;
	if (imem_c_rg_state$EN)
	  imem_c_rg_state <= `BSV_ASSIGNMENT_DELAY imem_c_rg_state$D_IN;
	if (rg_csr_permitted$EN)
	  rg_csr_permitted <= `BSV_ASSIGNMENT_DELAY rg_csr_permitted$D_IN;
	if (rg_halt$EN) rg_halt <= `BSV_ASSIGNMENT_DELAY rg_halt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_step_req$EN)
	  rg_step_req <= `BSV_ASSIGNMENT_DELAY rg_step_req$D_IN;
	if (rg_stop_req$EN)
	  rg_stop_req <= `BSV_ASSIGNMENT_DELAY rg_stop_req$D_IN;
      end
    if (imem_c_rg_cache_b16$EN)
      imem_c_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_c_rg_cache_b16$D_IN;
    if (imem_c_rg_pc$EN)
      imem_c_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_c_rg_pc$D_IN;
    if (rg_alu_outputs$EN)
      rg_alu_outputs <= `BSV_ASSIGNMENT_DELAY rg_alu_outputs$D_IN;
    if (rg_exec1_inputs$EN)
      rg_exec1_inputs <= `BSV_ASSIGNMENT_DELAY rg_exec1_inputs$D_IN;
    if (rg_pc$EN) rg_pc <= `BSV_ASSIGNMENT_DELAY rg_pc$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 2'h2;
    imem_c_rg_cache_b16 = 16'hAAAA;
    imem_c_rg_exc = 5'h0A;
    imem_c_rg_instr = 33'h0AAAAAAAA;
    imem_c_rg_pc = 32'hAAAAAAAA;
    imem_c_rg_state = 3'h2;
    rg_alu_outputs = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_csr_permitted = 1'h0;
    rg_exec1_inputs = 158'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_halt = 1'h0;
    rg_pc = 32'hAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_step_req = 1'h0;
    rg_stop_req = 1'h0;
    rg_trap_info = 68'hAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && rg_stop_req)
	begin
	  v__h152461 = $stime;
	  #0;
	end
    v__h152455 = v__h152461 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && rg_stop_req)
	$display("%0d:[D]:%m.rl_stop: Stop for debugger. PC = 0x%08h",
		 v__h152455,
		 rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && rg_stop_req) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && rg_stop_req)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h151595,
		 cpifrac__h151596,
		 delta_CPI_cycles__h151591,
		 _theResult____h151593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && !rg_stop_req)
	begin
	  v__h152591 = $stime;
	  #0;
	end
    v__h152585 = v__h152591 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && !rg_stop_req)
	$display("%0d:[D]:%m.rl_stop: Stop after single-step. PC = 0x%08h",
		 v__h152585,
		 rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop && !rg_stop_req) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop)
	begin
	  v__h152889 = $stime;
	  #0;
	end
    v__h152883 = v__h152889 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop)
	$display("%0d:[D]:%m.rl_stop: (next) PC: 0x%0h", v__h152883, rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stop) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_ignore)
	begin
	  v__h153645 = $stime;
	  #0;
	end
    v__h153639 = v__h153645 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_ignore)
	$display("%0d: CPU.debug_run_ignore: ignoring 'run' command (CPU is not in Debug Mode)",
		 v__h153639);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_ignore) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2 &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 &&
	  rg_alu_outputs_401_BITS_111_TO_108_402_EQ_2_40_ETC___d1472)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd2)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0 &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs_401_BITS_103_TO_101_406_EQ_0_40_ETC___d1474)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd0)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	begin
	  v__h144587 = $stime;
	  #0;
	end
    v__h144581 = v__h144587 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$display("%06d:[E]:%m.rl_run: Unrecognized op_stage2", v__h144581);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("ALU_Outputs { ", "control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[107:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "op_stage2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] == 3'd3)
	$write("OP_Stage2_SH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4 &&
	  rg_alu_outputs[103:101] != 3'd1 &&
	  rg_alu_outputs[103:101] != 3'd2 &&
	  rg_alu_outputs[103:101] != 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "val1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write(", ", "val2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("'h%h", rg_alu_outputs[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd1 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd4)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 csr_regfile$csr_ret_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8 &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 csr_regfile$csr_ret_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 &&
	  rg_alu_outputs_401_BITS_111_TO_108_402_EQ_8_41_ETC___d1476)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd8)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6) &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs_401_BITS_111_TO_108_402_EQ_5_41_ETC___d1478)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  (rg_alu_outputs[111:108] == 4'd5 ||
	   rg_alu_outputs[111:108] == 4'd6))
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	begin
	  v__h145204 = $stime;
	  #0;
	end
    v__h145198 = v__h145204 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$display("%06d:[E].%m.rl_run: unrecognized 'control' in alu_outputs",
		 v__h145198);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("ALU_Outputs { ", "control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[111:108] != 4'd0 &&
	  rg_alu_outputs[111:108] != 4'd7)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[107:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "op_stage2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] == 3'd3)
	$write("OP_Stage2_SH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10 &&
	  rg_alu_outputs[103:101] != 3'd0 &&
	  rg_alu_outputs[103:101] != 3'd1 &&
	  rg_alu_outputs[103:101] != 3'd2 &&
	  rg_alu_outputs[103:101] != 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "val1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write(", ", "val2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("'h%h", rg_alu_outputs[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec2 && rg_alu_outputs[111:108] != 4'd2 &&
	  rg_alu_outputs[111:108] != 4'd1 &&
	  rg_alu_outputs[111:108] != 4'd3 &&
	  rg_alu_outputs[111:108] != 4'd4 &&
	  rg_alu_outputs[111:108] != 4'd8 &&
	  rg_alu_outputs[111:108] != 4'd5 &&
	  rg_alu_outputs[111:108] != 4'd6 &&
	  rg_alu_outputs[111:108] != 4'd9 &&
	  rg_alu_outputs[111:108] != 4'd10)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4] &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion &&
	  NOT_near_mem_dmem_exc_get_637_BIT_4_638_642_AN_ETC___d1646)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_LD_completion && !near_mem$dmem_exc_get[4])
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4] &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion &&
	  NOT_near_mem_dmem_exc_get_637_BIT_4_638_642_AN_ETC___d1646)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ST_completion && !near_mem$dmem_exc_get[4])
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && !rg_stop_req && rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion && !rg_stop_req && !rg_step_req &&
	  csr_regfile$read_dcsr_step)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_M_completion)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && !rg_stop_req && rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion && !rg_stop_req && !rg_step_req &&
	  csr_regfile$read_dcsr_step)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_SH_completion)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion &&
	  rg_csr_permitted_661_AND_NOT_rg_stop_req_00_13_ETC___d1675)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_W_completion && rg_csr_permitted)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted &&
	  !rg_stop_req &&
	  rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion &&
	  rg_csr_permitted_661_AND_NOT_rg_stop_req_00_13_ETC___d1675)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_CSRR_S_or_C_completion && rg_csr_permitted)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_trap && rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_trap && !rg_stop_req && rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_restart_trap && !rg_stop_req && !rg_step_req &&
	  csr_regfile$read_dcsr_step)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && !rg_stop_req && rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 next_pc__h150032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && !rg_stop_req && !rg_step_req &&
	  csr_regfile$read_dcsr_step)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume)
	$display("instret:%06d  PC:0x%08h  (instr:0x%08h)",
		 csr_regfile$read_csr_minstret,
		 rg_pc,
		 IF_rg_exec1_inputs_96_BIT_125_217_THEN_rg_exec_ETC___d1515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap)
	begin
	  v__h150875 = $stime;
	  #0;
	end
    v__h150869 = v__h150875 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap)
	$display("%0d:[D]:%m.rl_trap: epc 0x%0h  instr 0x%08h  exc_code %0d  tval 0x%0d ",
		 v__h150869,
		 rg_trap_info[67:36],
		 rg_exec1_inputs[157:126],
		 rg_trap_info[35:32],
		 rg_trap_info[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap)
	$display("    new_pc (=mtvec) 0x%0h", csr_regfile$csr_trap_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	begin
	  v__h151424 = $stime;
	  #0;
	end
    v__h151418 = v__h151424 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("%0d: CPU.rl_trap_BREAK_to_Debug_Mode: PC 0x%08h instr 0x%08h",
		 v__h151418,
		 rg_pc,
		 rg_exec1_inputs[157:126]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h151595,
		 cpifrac__h151596,
		 delta_CPI_cycles__h151591,
		 _theResult____h151593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_take_external_interrupt)
	begin
	  v__h152289 = $stime;
	  #0;
	end
    v__h152283 = v__h152289 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_take_external_interrupt)
	$display("%0d:[D]:%m.rl_take_external_interrupt; epc 0x%0h, pc 0x%0h",
		 v__h152283,
		 rg_pc,
		 csr_regfile$csr_trap_actions);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_take_external_interrupt) $fflush(32'h80000001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_ignore)
	begin
	  v__h153883 = $stime;
	  #0;
	end
    v__h153877 = v__h153883 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_ignore)
	$display("%0d: CPU.rl_debug_halt_ignore: ignoring 'halt' (CPU already halted)",
		 v__h153877);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete)
	begin
	  v__h4728 = $stime;
	  #0;
	end
    v__h4722 = v__h4728 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete)
	$display("%06d:[D]:%m.rl_reset_complete", v__h4722);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_stop_req)
	$display("    CPU entering DEBUG_MODE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_stop_req && rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 addr_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_stop_req && !rg_step_req &&
	  csr_regfile$read_dcsr_step)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_stop_req)
	$display("    fa_restart: RUNNING with PC = 0x%0h",
		 addr_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run && rg_stop_req)
	$display("    CPU.fa_start_ifetch: halting due to stop_req: PC = 0x%08h",
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run && !rg_stop_req && rg_step_req)
	$display(" CPU.fa_start_ifetch: halting due to step req: PC = 0x%08h",
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run && !rg_stop_req && !rg_step_req &&
	  csr_regfile$read_dcsr_step)
	$display("    CPU.fa_start_ifetch: dcsr.step=1; will stop at next fetch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run)
	$display("    fa_restart: RUNNING with PC = 0x%0h",
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_imem_c_rl_NEW_RSP && WILL_FIRE_RL_rl_exec1)
	$display("Error: \"../src_Core/CPU/CPU.bsv\", line 1590, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_imem_c_rl_NEW_RSP] and\n  [RL_rl_exec1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_exec1 && WILL_FIRE_RL_imem_c_rl_new_req)
	$display("Error: \"../src_Core/CPU/CPU.bsv\", line 1591, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_exec1] and\n  [RL_imem_c_rl_new_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Low Footprint Core v1.3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Simple FSM CPU, i.e., not pipelined");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2018-2022 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	begin
	  v__h4350 = $stime;
	  #0;
	end
    v__h4344 = v__h4350 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("%06d:[D]:%m.rl_reset_start", v__h4344);
  end
  // synopsys translate_on
endmodule  // mkCPU

