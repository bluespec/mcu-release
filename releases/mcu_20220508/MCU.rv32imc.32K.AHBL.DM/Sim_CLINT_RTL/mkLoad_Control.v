//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// toFlash_awvalid                O     1 reg
// toFlash_awaddr                 O    32 reg
// toFlash_awlen                  O     8 reg
// toFlash_awsize                 O     3 reg
// toFlash_awburst                O     2 reg
// toFlash_awlock                 O     1 reg
// toFlash_awcache                O     4 reg
// toFlash_awprot                 O     3 reg
// toFlash_awqos                  O     4 reg
// toFlash_awregion               O     4 reg
// toFlash_wvalid                 O     1 reg
// toFlash_wdata                  O    32 reg
// toFlash_wstrb                  O     4 reg
// toFlash_wlast                  O     1 reg
// toFlash_bready                 O     1 reg
// toFlash_arvalid                O     1 reg
// toFlash_araddr                 O    32 reg
// toFlash_arlen                  O     8 reg
// toFlash_arsize                 O     3 reg
// toFlash_arburst                O     2 reg
// toFlash_arlock                 O     1 reg
// toFlash_arcache                O     4 reg
// toFlash_arprot                 O     3 reg
// toFlash_arqos                  O     4 reg
// toFlash_arregion               O     4 reg
// toFlash_rready                 O     1 reg
// cpu_ifc_toFabric_awvalid       O     1 reg
// cpu_ifc_toFabric_awid          O     4 reg
// cpu_ifc_toFabric_awaddr        O    32 reg
// cpu_ifc_toFabric_awlen         O     8 reg
// cpu_ifc_toFabric_awsize        O     3 reg
// cpu_ifc_toFabric_awburst       O     2 reg
// cpu_ifc_toFabric_awlock        O     1 reg
// cpu_ifc_toFabric_awcache       O     4 reg
// cpu_ifc_toFabric_awprot        O     3 reg
// cpu_ifc_toFabric_awqos         O     4 reg
// cpu_ifc_toFabric_awregion      O     4 reg
// cpu_ifc_toFabric_wvalid        O     1 reg
// cpu_ifc_toFabric_wdata         O    32 reg
// cpu_ifc_toFabric_wstrb         O     4 reg
// cpu_ifc_toFabric_wlast         O     1 reg
// cpu_ifc_toFabric_bready        O     1 reg
// cpu_ifc_toFabric_arvalid       O     1 reg
// cpu_ifc_toFabric_arid          O     4 reg
// cpu_ifc_toFabric_araddr        O    32 reg
// cpu_ifc_toFabric_arlen         O     8 reg
// cpu_ifc_toFabric_arsize        O     3 reg
// cpu_ifc_toFabric_arburst       O     2 reg
// cpu_ifc_toFabric_arlock        O     1 reg
// cpu_ifc_toFabric_arcache       O     4 reg
// cpu_ifc_toFabric_arprot        O     3 reg
// cpu_ifc_toFabric_arqos         O     4 reg
// cpu_ifc_toFabric_arregion      O     4 reg
// cpu_ifc_toFabric_rready        O     1 reg
// cpu_ifc_cpu_halt               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// toFlash_awready                I     1
// toFlash_wready                 I     1
// toFlash_bvalid                 I     1
// toFlash_bresp                  I     2 reg
// toFlash_arready                I     1
// toFlash_rvalid                 I     1
// toFlash_rdata                  I    32 reg
// toFlash_rresp                  I     2 reg
// toFlash_rlast                  I     1 reg
// cpu_ifc_toFabric_awready       I     1
// cpu_ifc_toFabric_wready        I     1
// cpu_ifc_toFabric_bvalid        I     1
// cpu_ifc_toFabric_bid           I     4 reg
// cpu_ifc_toFabric_bresp         I     2 reg
// cpu_ifc_toFabric_arready       I     1
// cpu_ifc_toFabric_rvalid        I     1
// cpu_ifc_toFabric_rid           I     4 reg
// cpu_ifc_toFabric_rdata         I    32 reg
// cpu_ifc_toFabric_rresp         I     2 reg
// cpu_ifc_toFabric_rlast         I     1 reg
// cpu_ifc_reset_done_x           I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkLoad_Control(CLK,
		      RST_N,

		      toFlash_awvalid,

		      toFlash_awaddr,

		      toFlash_awlen,

		      toFlash_awsize,

		      toFlash_awburst,

		      toFlash_awlock,

		      toFlash_awcache,

		      toFlash_awprot,

		      toFlash_awqos,

		      toFlash_awregion,

		      toFlash_awready,

		      toFlash_wvalid,

		      toFlash_wdata,

		      toFlash_wstrb,

		      toFlash_wlast,

		      toFlash_wready,

		      toFlash_bvalid,
		      toFlash_bresp,

		      toFlash_bready,

		      toFlash_arvalid,

		      toFlash_araddr,

		      toFlash_arlen,

		      toFlash_arsize,

		      toFlash_arburst,

		      toFlash_arlock,

		      toFlash_arcache,

		      toFlash_arprot,

		      toFlash_arqos,

		      toFlash_arregion,

		      toFlash_arready,

		      toFlash_rvalid,
		      toFlash_rdata,
		      toFlash_rresp,
		      toFlash_rlast,

		      toFlash_rready,

		      cpu_ifc_toFabric_awvalid,

		      cpu_ifc_toFabric_awid,

		      cpu_ifc_toFabric_awaddr,

		      cpu_ifc_toFabric_awlen,

		      cpu_ifc_toFabric_awsize,

		      cpu_ifc_toFabric_awburst,

		      cpu_ifc_toFabric_awlock,

		      cpu_ifc_toFabric_awcache,

		      cpu_ifc_toFabric_awprot,

		      cpu_ifc_toFabric_awqos,

		      cpu_ifc_toFabric_awregion,

		      cpu_ifc_toFabric_awready,

		      cpu_ifc_toFabric_wvalid,

		      cpu_ifc_toFabric_wdata,

		      cpu_ifc_toFabric_wstrb,

		      cpu_ifc_toFabric_wlast,

		      cpu_ifc_toFabric_wready,

		      cpu_ifc_toFabric_bvalid,
		      cpu_ifc_toFabric_bid,
		      cpu_ifc_toFabric_bresp,

		      cpu_ifc_toFabric_bready,

		      cpu_ifc_toFabric_arvalid,

		      cpu_ifc_toFabric_arid,

		      cpu_ifc_toFabric_araddr,

		      cpu_ifc_toFabric_arlen,

		      cpu_ifc_toFabric_arsize,

		      cpu_ifc_toFabric_arburst,

		      cpu_ifc_toFabric_arlock,

		      cpu_ifc_toFabric_arcache,

		      cpu_ifc_toFabric_arprot,

		      cpu_ifc_toFabric_arqos,

		      cpu_ifc_toFabric_arregion,

		      cpu_ifc_toFabric_arready,

		      cpu_ifc_toFabric_rvalid,
		      cpu_ifc_toFabric_rid,
		      cpu_ifc_toFabric_rdata,
		      cpu_ifc_toFabric_rresp,
		      cpu_ifc_toFabric_rlast,

		      cpu_ifc_toFabric_rready,

		      cpu_ifc_cpu_halt,

		      cpu_ifc_reset_done_x);
  input  CLK;
  input  RST_N;

  // value method toFlash_m_awvalid
  output toFlash_awvalid;

  // value method toFlash_m_awid

  // value method toFlash_m_awaddr
  output [31 : 0] toFlash_awaddr;

  // value method toFlash_m_awlen
  output [7 : 0] toFlash_awlen;

  // value method toFlash_m_awsize
  output [2 : 0] toFlash_awsize;

  // value method toFlash_m_awburst
  output [1 : 0] toFlash_awburst;

  // value method toFlash_m_awlock
  output toFlash_awlock;

  // value method toFlash_m_awcache
  output [3 : 0] toFlash_awcache;

  // value method toFlash_m_awprot
  output [2 : 0] toFlash_awprot;

  // value method toFlash_m_awqos
  output [3 : 0] toFlash_awqos;

  // value method toFlash_m_awregion
  output [3 : 0] toFlash_awregion;

  // value method toFlash_m_awuser

  // action method toFlash_m_awready
  input  toFlash_awready;

  // value method toFlash_m_wvalid
  output toFlash_wvalid;

  // value method toFlash_m_wdata
  output [31 : 0] toFlash_wdata;

  // value method toFlash_m_wstrb
  output [3 : 0] toFlash_wstrb;

  // value method toFlash_m_wlast
  output toFlash_wlast;

  // value method toFlash_m_wuser

  // action method toFlash_m_wready
  input  toFlash_wready;

  // action method toFlash_m_bvalid
  input  toFlash_bvalid;
  input  [1 : 0] toFlash_bresp;

  // value method toFlash_m_bready
  output toFlash_bready;

  // value method toFlash_m_arvalid
  output toFlash_arvalid;

  // value method toFlash_m_arid

  // value method toFlash_m_araddr
  output [31 : 0] toFlash_araddr;

  // value method toFlash_m_arlen
  output [7 : 0] toFlash_arlen;

  // value method toFlash_m_arsize
  output [2 : 0] toFlash_arsize;

  // value method toFlash_m_arburst
  output [1 : 0] toFlash_arburst;

  // value method toFlash_m_arlock
  output toFlash_arlock;

  // value method toFlash_m_arcache
  output [3 : 0] toFlash_arcache;

  // value method toFlash_m_arprot
  output [2 : 0] toFlash_arprot;

  // value method toFlash_m_arqos
  output [3 : 0] toFlash_arqos;

  // value method toFlash_m_arregion
  output [3 : 0] toFlash_arregion;

  // value method toFlash_m_aruser

  // action method toFlash_m_arready
  input  toFlash_arready;

  // action method toFlash_m_rvalid
  input  toFlash_rvalid;
  input  [31 : 0] toFlash_rdata;
  input  [1 : 0] toFlash_rresp;
  input  toFlash_rlast;

  // value method toFlash_m_rready
  output toFlash_rready;

  // value method cpu_ifc_toFabric_m_awvalid
  output cpu_ifc_toFabric_awvalid;

  // value method cpu_ifc_toFabric_m_awid
  output [3 : 0] cpu_ifc_toFabric_awid;

  // value method cpu_ifc_toFabric_m_awaddr
  output [31 : 0] cpu_ifc_toFabric_awaddr;

  // value method cpu_ifc_toFabric_m_awlen
  output [7 : 0] cpu_ifc_toFabric_awlen;

  // value method cpu_ifc_toFabric_m_awsize
  output [2 : 0] cpu_ifc_toFabric_awsize;

  // value method cpu_ifc_toFabric_m_awburst
  output [1 : 0] cpu_ifc_toFabric_awburst;

  // value method cpu_ifc_toFabric_m_awlock
  output cpu_ifc_toFabric_awlock;

  // value method cpu_ifc_toFabric_m_awcache
  output [3 : 0] cpu_ifc_toFabric_awcache;

  // value method cpu_ifc_toFabric_m_awprot
  output [2 : 0] cpu_ifc_toFabric_awprot;

  // value method cpu_ifc_toFabric_m_awqos
  output [3 : 0] cpu_ifc_toFabric_awqos;

  // value method cpu_ifc_toFabric_m_awregion
  output [3 : 0] cpu_ifc_toFabric_awregion;

  // value method cpu_ifc_toFabric_m_awuser

  // action method cpu_ifc_toFabric_m_awready
  input  cpu_ifc_toFabric_awready;

  // value method cpu_ifc_toFabric_m_wvalid
  output cpu_ifc_toFabric_wvalid;

  // value method cpu_ifc_toFabric_m_wdata
  output [31 : 0] cpu_ifc_toFabric_wdata;

  // value method cpu_ifc_toFabric_m_wstrb
  output [3 : 0] cpu_ifc_toFabric_wstrb;

  // value method cpu_ifc_toFabric_m_wlast
  output cpu_ifc_toFabric_wlast;

  // value method cpu_ifc_toFabric_m_wuser

  // action method cpu_ifc_toFabric_m_wready
  input  cpu_ifc_toFabric_wready;

  // action method cpu_ifc_toFabric_m_bvalid
  input  cpu_ifc_toFabric_bvalid;
  input  [3 : 0] cpu_ifc_toFabric_bid;
  input  [1 : 0] cpu_ifc_toFabric_bresp;

  // value method cpu_ifc_toFabric_m_bready
  output cpu_ifc_toFabric_bready;

  // value method cpu_ifc_toFabric_m_arvalid
  output cpu_ifc_toFabric_arvalid;

  // value method cpu_ifc_toFabric_m_arid
  output [3 : 0] cpu_ifc_toFabric_arid;

  // value method cpu_ifc_toFabric_m_araddr
  output [31 : 0] cpu_ifc_toFabric_araddr;

  // value method cpu_ifc_toFabric_m_arlen
  output [7 : 0] cpu_ifc_toFabric_arlen;

  // value method cpu_ifc_toFabric_m_arsize
  output [2 : 0] cpu_ifc_toFabric_arsize;

  // value method cpu_ifc_toFabric_m_arburst
  output [1 : 0] cpu_ifc_toFabric_arburst;

  // value method cpu_ifc_toFabric_m_arlock
  output cpu_ifc_toFabric_arlock;

  // value method cpu_ifc_toFabric_m_arcache
  output [3 : 0] cpu_ifc_toFabric_arcache;

  // value method cpu_ifc_toFabric_m_arprot
  output [2 : 0] cpu_ifc_toFabric_arprot;

  // value method cpu_ifc_toFabric_m_arqos
  output [3 : 0] cpu_ifc_toFabric_arqos;

  // value method cpu_ifc_toFabric_m_arregion
  output [3 : 0] cpu_ifc_toFabric_arregion;

  // value method cpu_ifc_toFabric_m_aruser

  // action method cpu_ifc_toFabric_m_arready
  input  cpu_ifc_toFabric_arready;

  // action method cpu_ifc_toFabric_m_rvalid
  input  cpu_ifc_toFabric_rvalid;
  input  [3 : 0] cpu_ifc_toFabric_rid;
  input  [31 : 0] cpu_ifc_toFabric_rdata;
  input  [1 : 0] cpu_ifc_toFabric_rresp;
  input  cpu_ifc_toFabric_rlast;

  // value method cpu_ifc_toFabric_m_rready
  output cpu_ifc_toFabric_rready;

  // value method cpu_ifc_cpu_halt
  output cpu_ifc_cpu_halt;

  // action method cpu_ifc_reset_done
  input  cpu_ifc_reset_done_x;

  // signals for module outputs
  wire [31 : 0] cpu_ifc_toFabric_araddr,
		cpu_ifc_toFabric_awaddr,
		cpu_ifc_toFabric_wdata,
		toFlash_araddr,
		toFlash_awaddr,
		toFlash_wdata;
  wire [7 : 0] cpu_ifc_toFabric_arlen,
	       cpu_ifc_toFabric_awlen,
	       toFlash_arlen,
	       toFlash_awlen;
  wire [3 : 0] cpu_ifc_toFabric_arcache,
	       cpu_ifc_toFabric_arid,
	       cpu_ifc_toFabric_arqos,
	       cpu_ifc_toFabric_arregion,
	       cpu_ifc_toFabric_awcache,
	       cpu_ifc_toFabric_awid,
	       cpu_ifc_toFabric_awqos,
	       cpu_ifc_toFabric_awregion,
	       cpu_ifc_toFabric_wstrb,
	       toFlash_arcache,
	       toFlash_arqos,
	       toFlash_arregion,
	       toFlash_awcache,
	       toFlash_awqos,
	       toFlash_awregion,
	       toFlash_wstrb;
  wire [2 : 0] cpu_ifc_toFabric_arprot,
	       cpu_ifc_toFabric_arsize,
	       cpu_ifc_toFabric_awprot,
	       cpu_ifc_toFabric_awsize,
	       toFlash_arprot,
	       toFlash_arsize,
	       toFlash_awprot,
	       toFlash_awsize;
  wire [1 : 0] cpu_ifc_toFabric_arburst,
	       cpu_ifc_toFabric_awburst,
	       toFlash_arburst,
	       toFlash_awburst;
  wire cpu_ifc_cpu_halt,
       cpu_ifc_toFabric_arlock,
       cpu_ifc_toFabric_arvalid,
       cpu_ifc_toFabric_awlock,
       cpu_ifc_toFabric_awvalid,
       cpu_ifc_toFabric_bready,
       cpu_ifc_toFabric_rready,
       cpu_ifc_toFabric_wlast,
       cpu_ifc_toFabric_wvalid,
       toFlash_arlock,
       toFlash_arvalid,
       toFlash_awlock,
       toFlash_awvalid,
       toFlash_bready,
       toFlash_rready,
       toFlash_wlast,
       toFlash_wvalid;

  // inlined wires
  wire par_blocks_1_start_wire$whas,
       par_blocks_1_state_set_pw$whas,
       par_blocks_2_start_wire$whas,
       par_blocks_2_state_set_pw$whas,
       par_blocks_start_wire$whas,
       par_blocks_state_set_pw$whas,
       par_running$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register cpy_cnt
  reg [31 : 0] cpy_cnt;
  wire [31 : 0] cpy_cnt$D_IN;
  wire cpy_cnt$EN;

  // register dcpy_cnt
  reg [31 : 0] dcpy_cnt;
  wire [31 : 0] dcpy_cnt$D_IN;
  wire dcpy_cnt$EN;

  // register par_blocks_1_start_reg
  reg par_blocks_1_start_reg;
  wire par_blocks_1_start_reg$D_IN, par_blocks_1_start_reg$EN;

  // register par_blocks_1_state_can_overlap
  reg par_blocks_1_state_can_overlap;
  wire par_blocks_1_state_can_overlap$D_IN, par_blocks_1_state_can_overlap$EN;

  // register par_blocks_1_state_fired
  reg par_blocks_1_state_fired;
  wire par_blocks_1_state_fired$D_IN, par_blocks_1_state_fired$EN;

  // register par_blocks_1_state_mkFSMstate
  reg [2 : 0] par_blocks_1_state_mkFSMstate;
  reg [2 : 0] par_blocks_1_state_mkFSMstate$D_IN;
  wire par_blocks_1_state_mkFSMstate$EN;

  // register par_blocks_2_start_reg
  reg par_blocks_2_start_reg;
  wire par_blocks_2_start_reg$D_IN, par_blocks_2_start_reg$EN;

  // register par_blocks_2_state_can_overlap
  reg par_blocks_2_state_can_overlap;
  wire par_blocks_2_state_can_overlap$D_IN, par_blocks_2_state_can_overlap$EN;

  // register par_blocks_2_state_fired
  reg par_blocks_2_state_fired;
  wire par_blocks_2_state_fired$D_IN, par_blocks_2_state_fired$EN;

  // register par_blocks_2_state_mkFSMstate
  reg [1 : 0] par_blocks_2_state_mkFSMstate;
  wire [1 : 0] par_blocks_2_state_mkFSMstate$D_IN;
  wire par_blocks_2_state_mkFSMstate$EN;

  // register par_blocks_start_reg
  reg par_blocks_start_reg;
  wire par_blocks_start_reg$D_IN, par_blocks_start_reg$EN;

  // register par_blocks_state_can_overlap
  reg par_blocks_state_can_overlap;
  wire par_blocks_state_can_overlap$D_IN, par_blocks_state_can_overlap$EN;

  // register par_blocks_state_fired
  reg par_blocks_state_fired;
  wire par_blocks_state_fired$D_IN, par_blocks_state_fired$EN;

  // register par_blocks_state_mkFSMstate
  reg [1 : 0] par_blocks_state_mkFSMstate;
  wire [1 : 0] par_blocks_state_mkFSMstate$D_IN;
  wire par_blocks_state_mkFSMstate$EN;

  // register req_cnt
  reg [31 : 0] req_cnt;
  wire [31 : 0] req_cnt$D_IN;
  wire req_cnt$EN;

  // register rg_cpu_halt
  reg rg_cpu_halt;
  wire rg_cpu_halt$D_IN, rg_cpu_halt$EN;

  // register rg_offset
  reg [31 : 0] rg_offset;
  wire [31 : 0] rg_offset$D_IN;
  wire rg_offset$EN;

  // register rg_reset_done
  reg rg_reset_done;
  wire rg_reset_done$D_IN, rg_reset_done$EN;

  // register rsp_cnt
  reg [31 : 0] rsp_cnt;
  wire [31 : 0] rsp_cnt$D_IN;
  wire rsp_cnt$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // register wrt_cnt
  reg [31 : 0] wrt_cnt;
  reg [31 : 0] wrt_cnt$D_IN;
  wire wrt_cnt$EN;

  // ports of submodule addr_map
  wire [31 : 0] addr_map$m_dtcm_addr_base,
		addr_map$m_dtcm_addr_lim,
		addr_map$m_dtcm_addr_size,
		addr_map$m_is_dtcm_addr_addr,
		addr_map$m_is_itcm_addr_addr,
		addr_map$m_itcm_addr_base,
		addr_map$m_itcm_addr_lim,
		addr_map$m_itcm_addr_size;

  // ports of submodule fabricXactor_f_rd_addr
  wire [64 : 0] fabricXactor_f_rd_addr$D_IN, fabricXactor_f_rd_addr$D_OUT;
  wire fabricXactor_f_rd_addr$CLR,
       fabricXactor_f_rd_addr$DEQ,
       fabricXactor_f_rd_addr$EMPTY_N,
       fabricXactor_f_rd_addr$ENQ;

  // ports of submodule fabricXactor_f_rd_data
  wire [38 : 0] fabricXactor_f_rd_data$D_IN;
  wire fabricXactor_f_rd_data$CLR,
       fabricXactor_f_rd_data$DEQ,
       fabricXactor_f_rd_data$ENQ,
       fabricXactor_f_rd_data$FULL_N;

  // ports of submodule fabricXactor_f_wr_addr
  wire [64 : 0] fabricXactor_f_wr_addr$D_IN, fabricXactor_f_wr_addr$D_OUT;
  wire fabricXactor_f_wr_addr$CLR,
       fabricXactor_f_wr_addr$DEQ,
       fabricXactor_f_wr_addr$EMPTY_N,
       fabricXactor_f_wr_addr$ENQ,
       fabricXactor_f_wr_addr$FULL_N;

  // ports of submodule fabricXactor_f_wr_data
  reg [36 : 0] fabricXactor_f_wr_data$D_IN;
  wire [36 : 0] fabricXactor_f_wr_data$D_OUT;
  wire fabricXactor_f_wr_data$CLR,
       fabricXactor_f_wr_data$DEQ,
       fabricXactor_f_wr_data$EMPTY_N,
       fabricXactor_f_wr_data$ENQ,
       fabricXactor_f_wr_data$FULL_N;

  // ports of submodule fabricXactor_f_wr_resp
  wire [5 : 0] fabricXactor_f_wr_resp$D_IN;
  wire fabricXactor_f_wr_resp$CLR,
       fabricXactor_f_wr_resp$DEQ,
       fabricXactor_f_wr_resp$EMPTY_N,
       fabricXactor_f_wr_resp$ENQ,
       fabricXactor_f_wr_resp$FULL_N;

  // ports of submodule flashXactor_f_rd_addr
  wire [60 : 0] flashXactor_f_rd_addr$D_IN, flashXactor_f_rd_addr$D_OUT;
  wire flashXactor_f_rd_addr$CLR,
       flashXactor_f_rd_addr$DEQ,
       flashXactor_f_rd_addr$EMPTY_N,
       flashXactor_f_rd_addr$ENQ,
       flashXactor_f_rd_addr$FULL_N;

  // ports of submodule flashXactor_f_rd_data
  wire [34 : 0] flashXactor_f_rd_data$D_IN, flashXactor_f_rd_data$D_OUT;
  wire flashXactor_f_rd_data$CLR,
       flashXactor_f_rd_data$DEQ,
       flashXactor_f_rd_data$EMPTY_N,
       flashXactor_f_rd_data$ENQ,
       flashXactor_f_rd_data$FULL_N;

  // ports of submodule flashXactor_f_wr_addr
  wire [60 : 0] flashXactor_f_wr_addr$D_IN, flashXactor_f_wr_addr$D_OUT;
  wire flashXactor_f_wr_addr$CLR,
       flashXactor_f_wr_addr$DEQ,
       flashXactor_f_wr_addr$EMPTY_N,
       flashXactor_f_wr_addr$ENQ;

  // ports of submodule flashXactor_f_wr_data
  wire [36 : 0] flashXactor_f_wr_data$D_IN, flashXactor_f_wr_data$D_OUT;
  wire flashXactor_f_wr_data$CLR,
       flashXactor_f_wr_data$DEQ,
       flashXactor_f_wr_data$EMPTY_N,
       flashXactor_f_wr_data$ENQ;

  // ports of submodule flashXactor_f_wr_resp
  wire [1 : 0] flashXactor_f_wr_resp$D_IN;
  wire flashXactor_f_wr_resp$CLR,
       flashXactor_f_wr_resp$DEQ,
       flashXactor_f_wr_resp$ENQ,
       flashXactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_action_l104c16,
       CAN_FIRE_RL_action_l106c10,
       CAN_FIRE_RL_action_l115c16,
       CAN_FIRE_RL_action_l116c10,
       CAN_FIRE_RL_action_l124c19,
       CAN_FIRE_RL_action_l139c19,
       CAN_FIRE_RL_action_l168c19,
       CAN_FIRE_RL_action_l188c26,
       CAN_FIRE_RL_action_l191c19,
       CAN_FIRE_RL_action_l216c19,
       CAN_FIRE_RL_action_l222c22,
       CAN_FIRE_RL_action_l223c10,
       CAN_FIRE_RL_actionpar_run_l120c10,
       CAN_FIRE_RL_actionpar_start_l120c10,
       CAN_FIRE_RL_auto_finish,
       CAN_FIRE_RL_auto_start,
       CAN_FIRE_RL_fsm_start,
       CAN_FIRE_RL_idle_l103c7,
       CAN_FIRE_RL_idle_l123c16,
       CAN_FIRE_RL_idle_l123c16_1,
       CAN_FIRE_RL_idle_l136c13,
       CAN_FIRE_RL_idle_l136c13_1,
       CAN_FIRE_RL_idle_l212c16,
       CAN_FIRE_RL_idle_l212c16_1,
       CAN_FIRE_RL_par_blocks_1_restart,
       CAN_FIRE_RL_par_blocks_1_start_reg__dreg_update,
       CAN_FIRE_RL_par_blocks_1_state_every,
       CAN_FIRE_RL_par_blocks_1_state_fired__dreg_update,
       CAN_FIRE_RL_par_blocks_1_state_handle_abort,
       CAN_FIRE_RL_par_blocks_2_restart,
       CAN_FIRE_RL_par_blocks_2_start_reg__dreg_update,
       CAN_FIRE_RL_par_blocks_2_state_every,
       CAN_FIRE_RL_par_blocks_2_state_fired__dreg_update,
       CAN_FIRE_RL_par_blocks_2_state_handle_abort,
       CAN_FIRE_RL_par_blocks_restart,
       CAN_FIRE_RL_par_blocks_start_reg__dreg_update,
       CAN_FIRE_RL_par_blocks_state_every,
       CAN_FIRE_RL_par_blocks_state_fired__dreg_update,
       CAN_FIRE_RL_par_blocks_state_handle_abort,
       CAN_FIRE_RL_restart,
       CAN_FIRE_RL_start_reg__dreg_update,
       CAN_FIRE_RL_state_every,
       CAN_FIRE_RL_state_fired__dreg_update,
       CAN_FIRE_RL_state_handle_abort,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_22,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_24,
       CAN_FIRE___me_check_25,
       CAN_FIRE___me_check_26,
       CAN_FIRE___me_check_27,
       CAN_FIRE___me_check_31,
       CAN_FIRE_cpu_ifc_reset_done,
       CAN_FIRE_cpu_ifc_toFabric_m_arready,
       CAN_FIRE_cpu_ifc_toFabric_m_awready,
       CAN_FIRE_cpu_ifc_toFabric_m_bvalid,
       CAN_FIRE_cpu_ifc_toFabric_m_rvalid,
       CAN_FIRE_cpu_ifc_toFabric_m_wready,
       CAN_FIRE_toFlash_m_arready,
       CAN_FIRE_toFlash_m_awready,
       CAN_FIRE_toFlash_m_bvalid,
       CAN_FIRE_toFlash_m_rvalid,
       CAN_FIRE_toFlash_m_wready,
       WILL_FIRE_RL_action_l104c16,
       WILL_FIRE_RL_action_l106c10,
       WILL_FIRE_RL_action_l115c16,
       WILL_FIRE_RL_action_l116c10,
       WILL_FIRE_RL_action_l124c19,
       WILL_FIRE_RL_action_l139c19,
       WILL_FIRE_RL_action_l168c19,
       WILL_FIRE_RL_action_l188c26,
       WILL_FIRE_RL_action_l191c19,
       WILL_FIRE_RL_action_l216c19,
       WILL_FIRE_RL_action_l222c22,
       WILL_FIRE_RL_action_l223c10,
       WILL_FIRE_RL_actionpar_run_l120c10,
       WILL_FIRE_RL_actionpar_start_l120c10,
       WILL_FIRE_RL_auto_finish,
       WILL_FIRE_RL_auto_start,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l103c7,
       WILL_FIRE_RL_idle_l123c16,
       WILL_FIRE_RL_idle_l123c16_1,
       WILL_FIRE_RL_idle_l136c13,
       WILL_FIRE_RL_idle_l136c13_1,
       WILL_FIRE_RL_idle_l212c16,
       WILL_FIRE_RL_idle_l212c16_1,
       WILL_FIRE_RL_par_blocks_1_restart,
       WILL_FIRE_RL_par_blocks_1_start_reg__dreg_update,
       WILL_FIRE_RL_par_blocks_1_state_every,
       WILL_FIRE_RL_par_blocks_1_state_fired__dreg_update,
       WILL_FIRE_RL_par_blocks_1_state_handle_abort,
       WILL_FIRE_RL_par_blocks_2_restart,
       WILL_FIRE_RL_par_blocks_2_start_reg__dreg_update,
       WILL_FIRE_RL_par_blocks_2_state_every,
       WILL_FIRE_RL_par_blocks_2_state_fired__dreg_update,
       WILL_FIRE_RL_par_blocks_2_state_handle_abort,
       WILL_FIRE_RL_par_blocks_restart,
       WILL_FIRE_RL_par_blocks_start_reg__dreg_update,
       WILL_FIRE_RL_par_blocks_state_every,
       WILL_FIRE_RL_par_blocks_state_fired__dreg_update,
       WILL_FIRE_RL_par_blocks_state_handle_abort,
       WILL_FIRE_RL_restart,
       WILL_FIRE_RL_start_reg__dreg_update,
       WILL_FIRE_RL_state_every,
       WILL_FIRE_RL_state_fired__dreg_update,
       WILL_FIRE_RL_state_handle_abort,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_22,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_24,
       WILL_FIRE___me_check_25,
       WILL_FIRE___me_check_26,
       WILL_FIRE___me_check_27,
       WILL_FIRE___me_check_31,
       WILL_FIRE_cpu_ifc_reset_done,
       WILL_FIRE_cpu_ifc_toFabric_m_arready,
       WILL_FIRE_cpu_ifc_toFabric_m_awready,
       WILL_FIRE_cpu_ifc_toFabric_m_bvalid,
       WILL_FIRE_cpu_ifc_toFabric_m_rvalid,
       WILL_FIRE_cpu_ifc_toFabric_m_wready,
       WILL_FIRE_toFlash_m_arready,
       WILL_FIRE_toFlash_m_awready,
       WILL_FIRE_toFlash_m_bvalid,
       WILL_FIRE_toFlash_m_rvalid,
       WILL_FIRE_toFlash_m_wready;

  // inputs to muxes for submodule ports
  wire [64 : 0] MUX_fabricXactor_f_wr_addr$enq_1__VAL_1,
		MUX_fabricXactor_f_wr_addr$enq_1__VAL_2;
  wire [36 : 0] MUX_fabricXactor_f_wr_data$enq_1__VAL_1,
		MUX_fabricXactor_f_wr_data$enq_1__VAL_2,
		MUX_fabricXactor_f_wr_data$enq_1__VAL_3;
  wire [31 : 0] MUX_cpy_cnt$write_1__VAL_1,
		MUX_dcpy_cnt$write_1__VAL_1,
		MUX_req_cnt$write_1__VAL_1,
		MUX_rsp_cnt$write_1__VAL_1,
		MUX_wrt_cnt$write_1__VAL_1;
  wire MUX_fabricXactor_f_wr_addr$enq_1__PSEL_1,
       MUX_fabricXactor_f_wr_addr$enq_1__SEL_1,
       MUX_fabricXactor_f_wr_addr$enq_1__SEL_2,
       MUX_fabricXactor_f_wr_data$enq_1__SEL_1,
       MUX_fabricXactor_f_wr_data$enq_1__SEL_2,
       MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1,
       MUX_par_blocks_2_state_mkFSMstate$write_1__SEL_1,
       MUX_par_blocks_state_mkFSMstate$write_1__SEL_1,
       MUX_wrt_cnt$write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] addr__h69379,
		addr__h71015,
		dtcm_size_words__h1358,
		itcm_size_words__h1357;
  wire NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d366,
       NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d397,
       NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d414,
       NOT_cpy_cnt_42_ULT_0x40_88_16_AND_NOT_cpy_cnt__ETC___d248,
       NOT_cpy_cnt_42_ULT_0x40_88_16_AND_cpy_cnt_42_U_ETC___d232,
       NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d393,
       NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d425,
       NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d225,
       NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d243,
       NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d318,
       abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d434,
       addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253,
       addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176,
       cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179,
       cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146,
       cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d162,
       cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d298,
       cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d343,
       cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d317,
       cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d338,
       cpy_cnt_42_ULT_0x40___d188,
       dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256,
       dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151,
       flashXactor_f_rd_data_i_notEmpty__72_AND_NOT_a_ETC___d186,
       par_running_whas__39_AND_par_running_wget__40__ETC___d206,
       req_cnt_71_ULT_0x40_72_AND_par_blocks_abort_wh_ETC___d334,
       req_cnt_71_ULT_0x40___d272,
       rsp_cnt_53_EQ_wrt_cnt_54___d155;

  // value method toFlash_m_awvalid
  assign toFlash_awvalid = flashXactor_f_wr_addr$EMPTY_N ;

  // value method toFlash_m_awaddr
  assign toFlash_awaddr = flashXactor_f_wr_addr$D_OUT[60:29] ;

  // value method toFlash_m_awlen
  assign toFlash_awlen = flashXactor_f_wr_addr$D_OUT[28:21] ;

  // value method toFlash_m_awsize
  assign toFlash_awsize = flashXactor_f_wr_addr$D_OUT[20:18] ;

  // value method toFlash_m_awburst
  assign toFlash_awburst = flashXactor_f_wr_addr$D_OUT[17:16] ;

  // value method toFlash_m_awlock
  assign toFlash_awlock = flashXactor_f_wr_addr$D_OUT[15] ;

  // value method toFlash_m_awcache
  assign toFlash_awcache = flashXactor_f_wr_addr$D_OUT[14:11] ;

  // value method toFlash_m_awprot
  assign toFlash_awprot = flashXactor_f_wr_addr$D_OUT[10:8] ;

  // value method toFlash_m_awqos
  assign toFlash_awqos = flashXactor_f_wr_addr$D_OUT[7:4] ;

  // value method toFlash_m_awregion
  assign toFlash_awregion = flashXactor_f_wr_addr$D_OUT[3:0] ;

  // action method toFlash_m_awready
  assign CAN_FIRE_toFlash_m_awready = 1'd1 ;
  assign WILL_FIRE_toFlash_m_awready = 1'd1 ;

  // value method toFlash_m_wvalid
  assign toFlash_wvalid = flashXactor_f_wr_data$EMPTY_N ;

  // value method toFlash_m_wdata
  assign toFlash_wdata = flashXactor_f_wr_data$D_OUT[36:5] ;

  // value method toFlash_m_wstrb
  assign toFlash_wstrb = flashXactor_f_wr_data$D_OUT[4:1] ;

  // value method toFlash_m_wlast
  assign toFlash_wlast = flashXactor_f_wr_data$D_OUT[0] ;

  // action method toFlash_m_wready
  assign CAN_FIRE_toFlash_m_wready = 1'd1 ;
  assign WILL_FIRE_toFlash_m_wready = 1'd1 ;

  // action method toFlash_m_bvalid
  assign CAN_FIRE_toFlash_m_bvalid = 1'd1 ;
  assign WILL_FIRE_toFlash_m_bvalid = 1'd1 ;

  // value method toFlash_m_bready
  assign toFlash_bready = flashXactor_f_wr_resp$FULL_N ;

  // value method toFlash_m_arvalid
  assign toFlash_arvalid = flashXactor_f_rd_addr$EMPTY_N ;

  // value method toFlash_m_araddr
  assign toFlash_araddr = flashXactor_f_rd_addr$D_OUT[60:29] ;

  // value method toFlash_m_arlen
  assign toFlash_arlen = flashXactor_f_rd_addr$D_OUT[28:21] ;

  // value method toFlash_m_arsize
  assign toFlash_arsize = flashXactor_f_rd_addr$D_OUT[20:18] ;

  // value method toFlash_m_arburst
  assign toFlash_arburst = flashXactor_f_rd_addr$D_OUT[17:16] ;

  // value method toFlash_m_arlock
  assign toFlash_arlock = flashXactor_f_rd_addr$D_OUT[15] ;

  // value method toFlash_m_arcache
  assign toFlash_arcache = flashXactor_f_rd_addr$D_OUT[14:11] ;

  // value method toFlash_m_arprot
  assign toFlash_arprot = flashXactor_f_rd_addr$D_OUT[10:8] ;

  // value method toFlash_m_arqos
  assign toFlash_arqos = flashXactor_f_rd_addr$D_OUT[7:4] ;

  // value method toFlash_m_arregion
  assign toFlash_arregion = flashXactor_f_rd_addr$D_OUT[3:0] ;

  // action method toFlash_m_arready
  assign CAN_FIRE_toFlash_m_arready = 1'd1 ;
  assign WILL_FIRE_toFlash_m_arready = 1'd1 ;

  // action method toFlash_m_rvalid
  assign CAN_FIRE_toFlash_m_rvalid = 1'd1 ;
  assign WILL_FIRE_toFlash_m_rvalid = 1'd1 ;

  // value method toFlash_m_rready
  assign toFlash_rready = flashXactor_f_rd_data$FULL_N ;

  // value method cpu_ifc_toFabric_m_awvalid
  assign cpu_ifc_toFabric_awvalid = fabricXactor_f_wr_addr$EMPTY_N ;

  // value method cpu_ifc_toFabric_m_awid
  assign cpu_ifc_toFabric_awid = fabricXactor_f_wr_addr$D_OUT[64:61] ;

  // value method cpu_ifc_toFabric_m_awaddr
  assign cpu_ifc_toFabric_awaddr = fabricXactor_f_wr_addr$D_OUT[60:29] ;

  // value method cpu_ifc_toFabric_m_awlen
  assign cpu_ifc_toFabric_awlen = fabricXactor_f_wr_addr$D_OUT[28:21] ;

  // value method cpu_ifc_toFabric_m_awsize
  assign cpu_ifc_toFabric_awsize = fabricXactor_f_wr_addr$D_OUT[20:18] ;

  // value method cpu_ifc_toFabric_m_awburst
  assign cpu_ifc_toFabric_awburst = fabricXactor_f_wr_addr$D_OUT[17:16] ;

  // value method cpu_ifc_toFabric_m_awlock
  assign cpu_ifc_toFabric_awlock = fabricXactor_f_wr_addr$D_OUT[15] ;

  // value method cpu_ifc_toFabric_m_awcache
  assign cpu_ifc_toFabric_awcache = fabricXactor_f_wr_addr$D_OUT[14:11] ;

  // value method cpu_ifc_toFabric_m_awprot
  assign cpu_ifc_toFabric_awprot = fabricXactor_f_wr_addr$D_OUT[10:8] ;

  // value method cpu_ifc_toFabric_m_awqos
  assign cpu_ifc_toFabric_awqos = fabricXactor_f_wr_addr$D_OUT[7:4] ;

  // value method cpu_ifc_toFabric_m_awregion
  assign cpu_ifc_toFabric_awregion = fabricXactor_f_wr_addr$D_OUT[3:0] ;

  // action method cpu_ifc_toFabric_m_awready
  assign CAN_FIRE_cpu_ifc_toFabric_m_awready = 1'd1 ;
  assign WILL_FIRE_cpu_ifc_toFabric_m_awready = 1'd1 ;

  // value method cpu_ifc_toFabric_m_wvalid
  assign cpu_ifc_toFabric_wvalid = fabricXactor_f_wr_data$EMPTY_N ;

  // value method cpu_ifc_toFabric_m_wdata
  assign cpu_ifc_toFabric_wdata = fabricXactor_f_wr_data$D_OUT[36:5] ;

  // value method cpu_ifc_toFabric_m_wstrb
  assign cpu_ifc_toFabric_wstrb = fabricXactor_f_wr_data$D_OUT[4:1] ;

  // value method cpu_ifc_toFabric_m_wlast
  assign cpu_ifc_toFabric_wlast = fabricXactor_f_wr_data$D_OUT[0] ;

  // action method cpu_ifc_toFabric_m_wready
  assign CAN_FIRE_cpu_ifc_toFabric_m_wready = 1'd1 ;
  assign WILL_FIRE_cpu_ifc_toFabric_m_wready = 1'd1 ;

  // action method cpu_ifc_toFabric_m_bvalid
  assign CAN_FIRE_cpu_ifc_toFabric_m_bvalid = 1'd1 ;
  assign WILL_FIRE_cpu_ifc_toFabric_m_bvalid = 1'd1 ;

  // value method cpu_ifc_toFabric_m_bready
  assign cpu_ifc_toFabric_bready = fabricXactor_f_wr_resp$FULL_N ;

  // value method cpu_ifc_toFabric_m_arvalid
  assign cpu_ifc_toFabric_arvalid = fabricXactor_f_rd_addr$EMPTY_N ;

  // value method cpu_ifc_toFabric_m_arid
  assign cpu_ifc_toFabric_arid = fabricXactor_f_rd_addr$D_OUT[64:61] ;

  // value method cpu_ifc_toFabric_m_araddr
  assign cpu_ifc_toFabric_araddr = fabricXactor_f_rd_addr$D_OUT[60:29] ;

  // value method cpu_ifc_toFabric_m_arlen
  assign cpu_ifc_toFabric_arlen = fabricXactor_f_rd_addr$D_OUT[28:21] ;

  // value method cpu_ifc_toFabric_m_arsize
  assign cpu_ifc_toFabric_arsize = fabricXactor_f_rd_addr$D_OUT[20:18] ;

  // value method cpu_ifc_toFabric_m_arburst
  assign cpu_ifc_toFabric_arburst = fabricXactor_f_rd_addr$D_OUT[17:16] ;

  // value method cpu_ifc_toFabric_m_arlock
  assign cpu_ifc_toFabric_arlock = fabricXactor_f_rd_addr$D_OUT[15] ;

  // value method cpu_ifc_toFabric_m_arcache
  assign cpu_ifc_toFabric_arcache = fabricXactor_f_rd_addr$D_OUT[14:11] ;

  // value method cpu_ifc_toFabric_m_arprot
  assign cpu_ifc_toFabric_arprot = fabricXactor_f_rd_addr$D_OUT[10:8] ;

  // value method cpu_ifc_toFabric_m_arqos
  assign cpu_ifc_toFabric_arqos = fabricXactor_f_rd_addr$D_OUT[7:4] ;

  // value method cpu_ifc_toFabric_m_arregion
  assign cpu_ifc_toFabric_arregion = fabricXactor_f_rd_addr$D_OUT[3:0] ;

  // action method cpu_ifc_toFabric_m_arready
  assign CAN_FIRE_cpu_ifc_toFabric_m_arready = 1'd1 ;
  assign WILL_FIRE_cpu_ifc_toFabric_m_arready = 1'd1 ;

  // action method cpu_ifc_toFabric_m_rvalid
  assign CAN_FIRE_cpu_ifc_toFabric_m_rvalid = 1'd1 ;
  assign WILL_FIRE_cpu_ifc_toFabric_m_rvalid = 1'd1 ;

  // value method cpu_ifc_toFabric_m_rready
  assign cpu_ifc_toFabric_rready = fabricXactor_f_rd_data$FULL_N ;

  // value method cpu_ifc_cpu_halt
  assign cpu_ifc_cpu_halt = rg_cpu_halt ;

  // action method cpu_ifc_reset_done
  assign CAN_FIRE_cpu_ifc_reset_done = 1'd1 ;
  assign WILL_FIRE_cpu_ifc_reset_done = 1'd1 ;

  // submodule addr_map
  mkCore_Map addr_map(.CLK(CLK),
		      .RST_N(RST_N),
		      .m_is_dtcm_addr_addr(addr_map$m_is_dtcm_addr_addr),
		      .m_is_itcm_addr_addr(addr_map$m_is_itcm_addr_addr),
		      .m_itcm_addr_base(addr_map$m_itcm_addr_base),
		      .m_itcm_addr_size(addr_map$m_itcm_addr_size),
		      .m_itcm_addr_lim(addr_map$m_itcm_addr_lim),
		      .m_is_itcm_addr(),
		      .m_dtcm_addr_base(addr_map$m_dtcm_addr_base),
		      .m_dtcm_addr_size(addr_map$m_dtcm_addr_size),
		      .m_dtcm_addr_lim(addr_map$m_dtcm_addr_lim),
		      .m_is_dtcm_addr(),
		      .m_pc_reset_value(),
		      .m_mtvec_reset_value());

  // submodule fabricXactor_f_rd_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) fabricXactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fabricXactor_f_rd_addr$D_IN),
								 .ENQ(fabricXactor_f_rd_addr$ENQ),
								 .DEQ(fabricXactor_f_rd_addr$DEQ),
								 .CLR(fabricXactor_f_rd_addr$CLR),
								 .D_OUT(fabricXactor_f_rd_addr$D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fabricXactor_f_rd_addr$EMPTY_N));

  // submodule fabricXactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) fabricXactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fabricXactor_f_rd_data$D_IN),
								 .ENQ(fabricXactor_f_rd_data$ENQ),
								 .DEQ(fabricXactor_f_rd_data$DEQ),
								 .CLR(fabricXactor_f_rd_data$CLR),
								 .D_OUT(),
								 .FULL_N(fabricXactor_f_rd_data$FULL_N),
								 .EMPTY_N());

  // submodule fabricXactor_f_wr_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) fabricXactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fabricXactor_f_wr_addr$D_IN),
								 .ENQ(fabricXactor_f_wr_addr$ENQ),
								 .DEQ(fabricXactor_f_wr_addr$DEQ),
								 .CLR(fabricXactor_f_wr_addr$CLR),
								 .D_OUT(fabricXactor_f_wr_addr$D_OUT),
								 .FULL_N(fabricXactor_f_wr_addr$FULL_N),
								 .EMPTY_N(fabricXactor_f_wr_addr$EMPTY_N));

  // submodule fabricXactor_f_wr_data
  FIFO2 #(.width(32'd37), .guarded(1'd1)) fabricXactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fabricXactor_f_wr_data$D_IN),
								 .ENQ(fabricXactor_f_wr_data$ENQ),
								 .DEQ(fabricXactor_f_wr_data$DEQ),
								 .CLR(fabricXactor_f_wr_data$CLR),
								 .D_OUT(fabricXactor_f_wr_data$D_OUT),
								 .FULL_N(fabricXactor_f_wr_data$FULL_N),
								 .EMPTY_N(fabricXactor_f_wr_data$EMPTY_N));

  // submodule fabricXactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) fabricXactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fabricXactor_f_wr_resp$D_IN),
								.ENQ(fabricXactor_f_wr_resp$ENQ),
								.DEQ(fabricXactor_f_wr_resp$DEQ),
								.CLR(fabricXactor_f_wr_resp$CLR),
								.D_OUT(),
								.FULL_N(fabricXactor_f_wr_resp$FULL_N),
								.EMPTY_N(fabricXactor_f_wr_resp$EMPTY_N));

  // submodule flashXactor_f_rd_addr
  FIFO2 #(.width(32'd61), .guarded(1'd1)) flashXactor_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(flashXactor_f_rd_addr$D_IN),
								.ENQ(flashXactor_f_rd_addr$ENQ),
								.DEQ(flashXactor_f_rd_addr$DEQ),
								.CLR(flashXactor_f_rd_addr$CLR),
								.D_OUT(flashXactor_f_rd_addr$D_OUT),
								.FULL_N(flashXactor_f_rd_addr$FULL_N),
								.EMPTY_N(flashXactor_f_rd_addr$EMPTY_N));

  // submodule flashXactor_f_rd_data
  FIFO2 #(.width(32'd35), .guarded(1'd1)) flashXactor_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(flashXactor_f_rd_data$D_IN),
								.ENQ(flashXactor_f_rd_data$ENQ),
								.DEQ(flashXactor_f_rd_data$DEQ),
								.CLR(flashXactor_f_rd_data$CLR),
								.D_OUT(flashXactor_f_rd_data$D_OUT),
								.FULL_N(flashXactor_f_rd_data$FULL_N),
								.EMPTY_N(flashXactor_f_rd_data$EMPTY_N));

  // submodule flashXactor_f_wr_addr
  FIFO2 #(.width(32'd61), .guarded(1'd1)) flashXactor_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(flashXactor_f_wr_addr$D_IN),
								.ENQ(flashXactor_f_wr_addr$ENQ),
								.DEQ(flashXactor_f_wr_addr$DEQ),
								.CLR(flashXactor_f_wr_addr$CLR),
								.D_OUT(flashXactor_f_wr_addr$D_OUT),
								.FULL_N(),
								.EMPTY_N(flashXactor_f_wr_addr$EMPTY_N));

  // submodule flashXactor_f_wr_data
  FIFO2 #(.width(32'd37), .guarded(1'd1)) flashXactor_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(flashXactor_f_wr_data$D_IN),
								.ENQ(flashXactor_f_wr_data$ENQ),
								.DEQ(flashXactor_f_wr_data$DEQ),
								.CLR(flashXactor_f_wr_data$CLR),
								.D_OUT(flashXactor_f_wr_data$D_OUT),
								.FULL_N(),
								.EMPTY_N(flashXactor_f_wr_data$EMPTY_N));

  // submodule flashXactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) flashXactor_f_wr_resp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(flashXactor_f_wr_resp$D_IN),
							       .ENQ(flashXactor_f_wr_resp$ENQ),
							       .DEQ(flashXactor_f_wr_resp$DEQ),
							       .CLR(flashXactor_f_wr_resp$CLR),
							       .D_OUT(),
							       .FULL_N(flashXactor_f_wr_resp$FULL_N),
							       .EMPTY_N());

  // rule RL_restart
  assign CAN_FIRE_RL_restart = start_reg_1 && !state_fired ;
  assign WILL_FIRE_RL_restart = CAN_FIRE_RL_restart ;

  // rule RL_action_l115c16
  assign CAN_FIRE_RL_action_l115c16 =
	     !rg_reset_done && state_mkFSMstate == 4'd2 ;
  assign WILL_FIRE_RL_action_l115c16 = CAN_FIRE_RL_action_l115c16 ;

  // rule RL_action_l116c10
  assign CAN_FIRE_RL_action_l116c10 =
	     rg_reset_done && state_mkFSMstate == 4'd3 ;
  assign WILL_FIRE_RL_action_l116c10 = CAN_FIRE_RL_action_l116c10 ;

  // rule RL_actionpar_start_l120c10
  assign CAN_FIRE_RL_actionpar_start_l120c10 =
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d298 &&
	     (!par_blocks_2_start_reg || par_blocks_2_state_fired) &&
	     cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d338 &&
	     state_mkFSMstate == 4'd4 ;
  assign WILL_FIRE_RL_actionpar_start_l120c10 =
	     CAN_FIRE_RL_actionpar_start_l120c10 ;

  // rule RL_action_l222c22
  assign CAN_FIRE_RL_action_l222c22 =
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d343 &&
	     req_cnt_71_ULT_0x40_72_AND_par_blocks_abort_wh_ETC___d334 &&
	     (!par_blocks_start_reg || par_blocks_state_fired) &&
	     (state_mkFSMstate == 4'd5 || state_mkFSMstate == 4'd6) ;
  assign WILL_FIRE_RL_action_l222c22 = CAN_FIRE_RL_action_l222c22 ;

  // rule RL_action_l223c10
  assign CAN_FIRE_RL_action_l223c10 = state_mkFSMstate == 4'd8 ;
  assign WILL_FIRE_RL_action_l223c10 = CAN_FIRE_RL_action_l223c10 ;

  // rule __me_check_31
  assign CAN_FIRE___me_check_31 = 1'b1 ;
  assign WILL_FIRE___me_check_31 = 1'b1 ;

  // rule RL_actionpar_run_l120c10
  assign CAN_FIRE_RL_actionpar_run_l120c10 =
	     NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d414 &&
	     (state_mkFSMstate == 4'd5 || state_mkFSMstate == 4'd6) ;
  assign WILL_FIRE_RL_actionpar_run_l120c10 =
	     CAN_FIRE_RL_actionpar_run_l120c10 ;

  // rule RL_idle_l212c16_1
  assign CAN_FIRE_RL_idle_l212c16_1 =
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     rsp_cnt_53_EQ_wrt_cnt_54___d155 &&
	     par_blocks_2_state_mkFSMstate == 2'd1 ;
  assign WILL_FIRE_RL_idle_l212c16_1 = CAN_FIRE_RL_idle_l212c16_1 ;

  // rule RL_idle_l123c16_1
  assign CAN_FIRE_RL_idle_l123c16_1 =
	     !req_cnt_71_ULT_0x40___d272 &&
	     par_blocks_state_mkFSMstate == 2'd1 ;
  assign WILL_FIRE_RL_idle_l123c16_1 = CAN_FIRE_RL_idle_l123c16_1 ;

  // rule RL_fsm_start
  assign CAN_FIRE_RL_fsm_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d434 &&
	     start_reg ;
  assign WILL_FIRE_RL_fsm_start = CAN_FIRE_RL_fsm_start ;

  // rule RL_action_l104c16
  assign CAN_FIRE_RL_action_l104c16 =
	     rg_reset_done && start_wire$whas &&
	     (state_mkFSMstate == 4'd0 || state_mkFSMstate == 4'd10) ;
  assign WILL_FIRE_RL_action_l104c16 = CAN_FIRE_RL_action_l104c16 ;

  // rule RL_idle_l103c7
  assign CAN_FIRE_RL_idle_l103c7 =
	     !start_wire$whas && state_mkFSMstate == 4'd10 ;
  assign WILL_FIRE_RL_idle_l103c7 = CAN_FIRE_RL_idle_l103c7 ;

  // rule RL_auto_start
  assign CAN_FIRE_RL_auto_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d434 &&
	     !start_reg &&
	     !running ;
  assign WILL_FIRE_RL_auto_start = CAN_FIRE_RL_auto_start ;

  // rule RL_auto_finish
  assign CAN_FIRE_RL_auto_finish =
	     running &&
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d434 &&
	     !start_reg ;
  assign WILL_FIRE_RL_auto_finish = CAN_FIRE_RL_auto_finish ;

  // rule RL_start_reg__dreg_update
  assign CAN_FIRE_RL_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_start_reg__dreg_update = 1'd1 ;

  // rule RL_state_handle_abort
  assign CAN_FIRE_RL_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_state_handle_abort = 1'b0 ;

  // rule RL_par_blocks_restart
  assign CAN_FIRE_RL_par_blocks_restart =
	     par_blocks_start_reg && !par_blocks_state_fired ;
  assign WILL_FIRE_RL_par_blocks_restart = CAN_FIRE_RL_par_blocks_restart ;

  // rule RL_action_l124c19
  assign CAN_FIRE_RL_action_l124c19 =
	     flashXactor_f_rd_addr$FULL_N && par_running$whas &&
	     (req_cnt_71_ULT_0x40___d272 && par_blocks_start_wire$whas &&
	      par_blocks_state_mkFSMstate == 2'd0 ||
	      req_cnt_71_ULT_0x40___d272 &&
	      par_blocks_state_mkFSMstate == 2'd1) ;
  assign WILL_FIRE_RL_action_l124c19 = CAN_FIRE_RL_action_l124c19 ;

  // rule RL_idle_l123c16
  assign CAN_FIRE_RL_idle_l123c16 =
	     !req_cnt_71_ULT_0x40___d272 && par_blocks_start_wire$whas &&
	     par_blocks_state_mkFSMstate == 2'd0 ;
  assign WILL_FIRE_RL_idle_l123c16 = CAN_FIRE_RL_idle_l123c16 ;

  // rule RL_par_blocks_start_reg__dreg_update
  assign CAN_FIRE_RL_par_blocks_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_start_reg__dreg_update = 1'd1 ;

  // rule RL_par_blocks_state_handle_abort
  assign CAN_FIRE_RL_par_blocks_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_state_handle_abort = 1'b0 ;

  // rule RL_par_blocks_state_every
  assign CAN_FIRE_RL_par_blocks_state_every = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_state_every = 1'd1 ;

  // rule RL_par_blocks_state_fired__dreg_update
  assign CAN_FIRE_RL_par_blocks_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_state_fired__dreg_update = 1'd1 ;

  // rule RL_par_blocks_1_restart
  assign CAN_FIRE_RL_par_blocks_1_restart =
	     par_blocks_1_start_reg && !par_blocks_1_state_fired ;
  assign WILL_FIRE_RL_par_blocks_1_restart =
	     CAN_FIRE_RL_par_blocks_1_restart ;

  // rule RL_action_l188c26
  assign CAN_FIRE_RL_action_l188c26 =
	     par_running$whas &&
	     NOT_cpy_cnt_42_ULT_0x40_88_16_AND_NOT_cpy_cnt__ETC___d248 ;
  assign WILL_FIRE_RL_action_l188c26 = CAN_FIRE_RL_action_l188c26 ;

  // rule RL_idle_l136c13
  assign CAN_FIRE_RL_idle_l136c13 =
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d425 &&
	     par_blocks_1_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_idle_l136c13 = CAN_FIRE_RL_idle_l136c13 ;

  // rule RL_idle_l136c13_1
  assign CAN_FIRE_RL_idle_l136c13_1 =
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d425 &&
	     par_blocks_1_state_mkFSMstate == 3'd4 ;
  assign WILL_FIRE_RL_idle_l136c13_1 = CAN_FIRE_RL_idle_l136c13_1 ;

  // rule RL_par_blocks_1_start_reg__dreg_update
  assign CAN_FIRE_RL_par_blocks_1_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_start_reg__dreg_update = 1'd1 ;

  // rule RL_par_blocks_1_state_handle_abort
  assign CAN_FIRE_RL_par_blocks_1_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_1_state_handle_abort = 1'b0 ;

  // rule RL_par_blocks_2_restart
  assign CAN_FIRE_RL_par_blocks_2_restart =
	     par_blocks_2_start_reg && !par_blocks_2_state_fired ;
  assign WILL_FIRE_RL_par_blocks_2_restart =
	     CAN_FIRE_RL_par_blocks_2_restart ;

  // rule RL_action_l216c19
  assign CAN_FIRE_RL_action_l216c19 =
	     fabricXactor_f_wr_resp$EMPTY_N && par_running$whas &&
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d162 ||
	      (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	       dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	       !rsp_cnt_53_EQ_wrt_cnt_54___d155) &&
	      par_blocks_2_state_mkFSMstate == 2'd1) ;
  assign WILL_FIRE_RL_action_l216c19 = CAN_FIRE_RL_action_l216c19 ;

  // rule RL_action_l168c19
  assign CAN_FIRE_RL_action_l168c19 =
	     (!addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 ||
	      !cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ||
	      fabricXactor_f_wr_addr$FULL_N &&
	      fabricXactor_f_wr_data$FULL_N) &&
	     par_running$whas &&
	     NOT_cpy_cnt_42_ULT_0x40_88_16_AND_cpy_cnt_42_U_ETC___d232 ;
  assign WILL_FIRE_RL_action_l168c19 = CAN_FIRE_RL_action_l168c19 ;

  // rule RL_action_l191c19
  assign CAN_FIRE_RL_action_l191c19 =
	     (!addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253 ||
	      !dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256 ||
	      fabricXactor_f_wr_addr$FULL_N &&
	      fabricXactor_f_wr_data$FULL_N) &&
	     par_running$whas &&
	     dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     (par_blocks_1_state_mkFSMstate == 3'd3 ||
	      par_blocks_1_state_mkFSMstate == 3'd4) ;
  assign WILL_FIRE_RL_action_l191c19 = CAN_FIRE_RL_action_l191c19 ;

  // rule __me_check_26
  assign CAN_FIRE___me_check_26 = 1'b1 ;
  assign WILL_FIRE___me_check_26 = 1'b1 ;

  // rule __me_check_27
  assign CAN_FIRE___me_check_27 = 1'b1 ;
  assign WILL_FIRE___me_check_27 = 1'b1 ;

  // rule RL_idle_l212c16
  assign CAN_FIRE_RL_idle_l212c16 =
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     rsp_cnt_53_EQ_wrt_cnt_54___d155 &&
	     par_blocks_2_start_wire$whas &&
	     par_blocks_2_state_mkFSMstate == 2'd0 ;
  assign WILL_FIRE_RL_idle_l212c16 = CAN_FIRE_RL_idle_l212c16 ;

  // rule RL_action_l106c10
  assign CAN_FIRE_RL_action_l106c10 = state_mkFSMstate == 4'd1 ;
  assign WILL_FIRE_RL_action_l106c10 = CAN_FIRE_RL_action_l106c10 ;

  // rule RL_action_l139c19
  assign CAN_FIRE_RL_action_l139c19 =
	     flashXactor_f_rd_data_i_notEmpty__72_AND_NOT_a_ETC___d186 &&
	     par_running_whas__39_AND_par_running_wget__40__ETC___d206 ;
  assign WILL_FIRE_RL_action_l139c19 = CAN_FIRE_RL_action_l139c19 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule __me_check_22
  assign CAN_FIRE___me_check_22 = 1'b1 ;
  assign WILL_FIRE___me_check_22 = 1'b1 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule __me_check_25
  assign CAN_FIRE___me_check_25 = 1'b1 ;
  assign WILL_FIRE___me_check_25 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule RL_state_every
  assign CAN_FIRE_RL_state_every = 1'd1 ;
  assign WILL_FIRE_RL_state_every = 1'd1 ;

  // rule RL_state_fired__dreg_update
  assign CAN_FIRE_RL_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_state_fired__dreg_update = 1'd1 ;

  // rule RL_par_blocks_1_state_every
  assign CAN_FIRE_RL_par_blocks_1_state_every = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_state_every = 1'd1 ;

  // rule RL_par_blocks_1_state_fired__dreg_update
  assign CAN_FIRE_RL_par_blocks_1_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_state_fired__dreg_update = 1'd1 ;

  // rule RL_par_blocks_2_start_reg__dreg_update
  assign CAN_FIRE_RL_par_blocks_2_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_2_start_reg__dreg_update = 1'd1 ;

  // rule RL_par_blocks_2_state_handle_abort
  assign CAN_FIRE_RL_par_blocks_2_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_2_state_handle_abort = 1'b0 ;

  // rule RL_par_blocks_2_state_every
  assign CAN_FIRE_RL_par_blocks_2_state_every = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_2_state_every = 1'd1 ;

  // rule RL_par_blocks_2_state_fired__dreg_update
  assign CAN_FIRE_RL_par_blocks_2_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_2_state_fired__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_fabricXactor_f_wr_addr$enq_1__PSEL_1 =
	     WILL_FIRE_RL_action_l168c19 || WILL_FIRE_RL_action_l139c19 ;
  assign MUX_fabricXactor_f_wr_addr$enq_1__SEL_1 =
	     MUX_fabricXactor_f_wr_addr$enq_1__PSEL_1 &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ;
  assign MUX_fabricXactor_f_wr_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_action_l191c19 &&
	     addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253 &&
	     dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256 ;
  assign MUX_fabricXactor_f_wr_data$enq_1__SEL_1 =
	     WILL_FIRE_RL_action_l139c19 &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ;
  assign MUX_fabricXactor_f_wr_data$enq_1__SEL_2 =
	     WILL_FIRE_RL_action_l168c19 &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ;
  assign MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l136c13_1 || WILL_FIRE_RL_idle_l136c13 ;
  assign MUX_par_blocks_2_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l212c16_1 || WILL_FIRE_RL_idle_l212c16 ;
  assign MUX_par_blocks_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l123c16_1 || WILL_FIRE_RL_idle_l123c16 ;
  assign MUX_wrt_cnt$write_1__SEL_1 =
	     MUX_fabricXactor_f_wr_addr$enq_1__PSEL_1 &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ;
  assign MUX_cpy_cnt$write_1__VAL_1 = cpy_cnt + 32'd4 ;
  assign MUX_dcpy_cnt$write_1__VAL_1 = dcpy_cnt + 32'd4 ;
  assign MUX_fabricXactor_f_wr_addr$enq_1__VAL_1 =
	     { 4'd0, addr__h69379, 29'd589824 } ;
  assign MUX_fabricXactor_f_wr_addr$enq_1__VAL_2 =
	     { 4'd0, addr__h71015, 29'd589824 } ;
  assign MUX_fabricXactor_f_wr_data$enq_1__VAL_1 =
	     { flashXactor_f_rd_data$D_OUT[34:3], 5'd31 } ;
  assign MUX_fabricXactor_f_wr_data$enq_1__VAL_2 = { addr__h69379, 5'd31 } ;
  assign MUX_fabricXactor_f_wr_data$enq_1__VAL_3 = { addr__h71015, 5'd31 } ;
  assign MUX_req_cnt$write_1__VAL_1 = req_cnt + 32'd4 ;
  assign MUX_rsp_cnt$write_1__VAL_1 = rsp_cnt + 32'd1 ;
  assign MUX_wrt_cnt$write_1__VAL_1 = wrt_cnt + 32'd1 ;

  // inlined wires
  assign start_wire$whas = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_restart ;
  assign par_running$whas =
	     WILL_FIRE_RL_actionpar_run_l120c10 ||
	     WILL_FIRE_RL_actionpar_start_l120c10 ;
  assign par_blocks_start_wire$whas =
	     WILL_FIRE_RL_par_blocks_restart ||
	     WILL_FIRE_RL_actionpar_start_l120c10 ;
  assign par_blocks_1_start_wire$whas =
	     WILL_FIRE_RL_par_blocks_1_restart ||
	     WILL_FIRE_RL_actionpar_start_l120c10 ;
  assign par_blocks_2_start_wire$whas =
	     WILL_FIRE_RL_par_blocks_2_restart ||
	     WILL_FIRE_RL_actionpar_start_l120c10 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l103c7 || WILL_FIRE_RL_actionpar_run_l120c10 ||
	     WILL_FIRE_RL_action_l223c10 ||
	     WILL_FIRE_RL_action_l222c22 ||
	     WILL_FIRE_RL_actionpar_start_l120c10 ||
	     WILL_FIRE_RL_action_l116c10 ||
	     WILL_FIRE_RL_action_l115c16 ||
	     WILL_FIRE_RL_action_l106c10 ||
	     WILL_FIRE_RL_action_l104c16 ;
  assign par_blocks_state_set_pw$whas =
	     WILL_FIRE_RL_idle_l123c16_1 || WILL_FIRE_RL_idle_l123c16 ||
	     WILL_FIRE_RL_action_l124c19 ;
  assign par_blocks_1_state_set_pw$whas =
	     WILL_FIRE_RL_idle_l136c13_1 || WILL_FIRE_RL_idle_l136c13 ||
	     WILL_FIRE_RL_action_l191c19 ||
	     WILL_FIRE_RL_action_l188c26 ||
	     WILL_FIRE_RL_action_l168c19 ||
	     WILL_FIRE_RL_action_l139c19 ;
  assign par_blocks_2_state_set_pw$whas =
	     WILL_FIRE_RL_idle_l212c16_1 || WILL_FIRE_RL_idle_l212c16 ||
	     WILL_FIRE_RL_action_l216c19 ;

  // register cpy_cnt
  assign cpy_cnt$D_IN =
	     MUX_fabricXactor_f_wr_addr$enq_1__PSEL_1 ?
	       MUX_cpy_cnt$write_1__VAL_1 :
	       32'd0 ;
  assign cpy_cnt$EN =
	     WILL_FIRE_RL_action_l168c19 || WILL_FIRE_RL_action_l139c19 ||
	     WILL_FIRE_RL_action_l106c10 ;

  // register dcpy_cnt
  assign dcpy_cnt$D_IN =
	     WILL_FIRE_RL_action_l191c19 ?
	       MUX_dcpy_cnt$write_1__VAL_1 :
	       32'd0 ;
  assign dcpy_cnt$EN =
	     WILL_FIRE_RL_action_l191c19 || WILL_FIRE_RL_action_l106c10 ;

  // register par_blocks_1_start_reg
  assign par_blocks_1_start_reg$D_IN = par_blocks_1_start_wire$whas ;
  assign par_blocks_1_start_reg$EN = 1'd1 ;

  // register par_blocks_1_state_can_overlap
  assign par_blocks_1_state_can_overlap$D_IN =
	     par_blocks_1_state_set_pw$whas ||
	     par_blocks_1_state_can_overlap ;
  assign par_blocks_1_state_can_overlap$EN = 1'd1 ;

  // register par_blocks_1_state_fired
  assign par_blocks_1_state_fired$D_IN = par_blocks_1_state_set_pw$whas ;
  assign par_blocks_1_state_fired$EN = 1'd1 ;

  // register par_blocks_1_state_mkFSMstate
  always@(MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l139c19 or
	  WILL_FIRE_RL_action_l168c19 or
	  WILL_FIRE_RL_action_l188c26 or WILL_FIRE_RL_action_l191c19)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1:
	  par_blocks_1_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l139c19: par_blocks_1_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_action_l168c19: par_blocks_1_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l188c26: par_blocks_1_state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_action_l191c19: par_blocks_1_state_mkFSMstate$D_IN = 3'd4;
      default: par_blocks_1_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign par_blocks_1_state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l136c13_1 || WILL_FIRE_RL_idle_l136c13 ||
	     WILL_FIRE_RL_action_l139c19 ||
	     WILL_FIRE_RL_action_l168c19 ||
	     WILL_FIRE_RL_action_l188c26 ||
	     WILL_FIRE_RL_action_l191c19 ;

  // register par_blocks_2_start_reg
  assign par_blocks_2_start_reg$D_IN = par_blocks_2_start_wire$whas ;
  assign par_blocks_2_start_reg$EN = 1'd1 ;

  // register par_blocks_2_state_can_overlap
  assign par_blocks_2_state_can_overlap$D_IN =
	     par_blocks_2_state_set_pw$whas ||
	     par_blocks_2_state_can_overlap ;
  assign par_blocks_2_state_can_overlap$EN = 1'd1 ;

  // register par_blocks_2_state_fired
  assign par_blocks_2_state_fired$D_IN = par_blocks_2_state_set_pw$whas ;
  assign par_blocks_2_state_fired$EN = 1'd1 ;

  // register par_blocks_2_state_mkFSMstate
  assign par_blocks_2_state_mkFSMstate$D_IN =
	     MUX_par_blocks_2_state_mkFSMstate$write_1__SEL_1 ? 2'd0 : 2'd1 ;
  assign par_blocks_2_state_mkFSMstate$EN = par_blocks_2_state_set_pw$whas ;

  // register par_blocks_start_reg
  assign par_blocks_start_reg$D_IN = par_blocks_start_wire$whas ;
  assign par_blocks_start_reg$EN = 1'd1 ;

  // register par_blocks_state_can_overlap
  assign par_blocks_state_can_overlap$D_IN =
	     par_blocks_state_set_pw$whas || par_blocks_state_can_overlap ;
  assign par_blocks_state_can_overlap$EN = 1'd1 ;

  // register par_blocks_state_fired
  assign par_blocks_state_fired$D_IN = par_blocks_state_set_pw$whas ;
  assign par_blocks_state_fired$EN = 1'd1 ;

  // register par_blocks_state_mkFSMstate
  assign par_blocks_state_mkFSMstate$D_IN =
	     MUX_par_blocks_state_mkFSMstate$write_1__SEL_1 ? 2'd0 : 2'd1 ;
  assign par_blocks_state_mkFSMstate$EN = par_blocks_state_set_pw$whas ;

  // register req_cnt
  assign req_cnt$D_IN =
	     WILL_FIRE_RL_action_l124c19 ?
	       MUX_req_cnt$write_1__VAL_1 :
	       32'd0 ;
  assign req_cnt$EN =
	     WILL_FIRE_RL_action_l124c19 || WILL_FIRE_RL_action_l106c10 ;

  // register rg_cpu_halt
  assign rg_cpu_halt$D_IN = !WILL_FIRE_RL_action_l222c22 ;
  assign rg_cpu_halt$EN =
	     WILL_FIRE_RL_action_l222c22 || WILL_FIRE_RL_action_l106c10 ;

  // register rg_offset
  assign rg_offset$D_IN = 32'hC8000000 ;
  assign rg_offset$EN = CAN_FIRE_RL_action_l188c26 ;

  // register rg_reset_done
  assign rg_reset_done$D_IN = cpu_ifc_reset_done_x ;
  assign rg_reset_done$EN = 1'd1 ;

  // register rsp_cnt
  assign rsp_cnt$D_IN =
	     WILL_FIRE_RL_action_l216c19 ?
	       MUX_rsp_cnt$write_1__VAL_1 :
	       32'd0 ;
  assign rsp_cnt$EN =
	     WILL_FIRE_RL_action_l216c19 || WILL_FIRE_RL_action_l106c10 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = CAN_FIRE_RL_auto_start ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_auto_start ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l103c7 or
	  WILL_FIRE_RL_action_l104c16 or
	  WILL_FIRE_RL_action_l106c10 or
	  WILL_FIRE_RL_action_l115c16 or
	  WILL_FIRE_RL_action_l116c10 or
	  WILL_FIRE_RL_actionpar_start_l120c10 or
	  WILL_FIRE_RL_actionpar_run_l120c10 or
	  WILL_FIRE_RL_action_l222c22 or WILL_FIRE_RL_action_l223c10)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l103c7: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l104c16: state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_action_l106c10: state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_action_l115c16: state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_action_l116c10: state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_actionpar_start_l120c10: state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_actionpar_run_l120c10: state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_action_l222c22: state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_action_l223c10: state_mkFSMstate$D_IN = 4'd9;
      default: state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l103c7 || WILL_FIRE_RL_action_l104c16 ||
	     WILL_FIRE_RL_action_l106c10 ||
	     WILL_FIRE_RL_action_l115c16 ||
	     WILL_FIRE_RL_action_l116c10 ||
	     WILL_FIRE_RL_actionpar_start_l120c10 ||
	     WILL_FIRE_RL_actionpar_run_l120c10 ||
	     WILL_FIRE_RL_action_l222c22 ||
	     WILL_FIRE_RL_action_l223c10 ;

  // register wrt_cnt
  always@(MUX_wrt_cnt$write_1__SEL_1 or
	  MUX_wrt_cnt$write_1__VAL_1 or
	  MUX_fabricXactor_f_wr_addr$enq_1__SEL_2 or
	  WILL_FIRE_RL_action_l106c10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wrt_cnt$write_1__SEL_1: wrt_cnt$D_IN = MUX_wrt_cnt$write_1__VAL_1;
      MUX_fabricXactor_f_wr_addr$enq_1__SEL_2:
	  wrt_cnt$D_IN = MUX_wrt_cnt$write_1__VAL_1;
      WILL_FIRE_RL_action_l106c10: wrt_cnt$D_IN = 32'd0;
      default: wrt_cnt$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wrt_cnt$EN =
	     (WILL_FIRE_RL_action_l168c19 || WILL_FIRE_RL_action_l139c19) &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ||
	     WILL_FIRE_RL_action_l191c19 &&
	     addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253 &&
	     dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256 ||
	     WILL_FIRE_RL_action_l106c10 ;

  // submodule addr_map
  assign addr_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign addr_map$m_is_itcm_addr_addr = 32'h0 ;

  // submodule fabricXactor_f_rd_addr
  assign fabricXactor_f_rd_addr$D_IN = 65'h0 ;
  assign fabricXactor_f_rd_addr$ENQ = 1'b0 ;
  assign fabricXactor_f_rd_addr$DEQ =
	     fabricXactor_f_rd_addr$EMPTY_N && cpu_ifc_toFabric_arready ;
  assign fabricXactor_f_rd_addr$CLR = 1'b0 ;

  // submodule fabricXactor_f_rd_data
  assign fabricXactor_f_rd_data$D_IN =
	     { cpu_ifc_toFabric_rid,
	       cpu_ifc_toFabric_rdata,
	       cpu_ifc_toFabric_rresp,
	       cpu_ifc_toFabric_rlast } ;
  assign fabricXactor_f_rd_data$ENQ =
	     cpu_ifc_toFabric_rvalid && fabricXactor_f_rd_data$FULL_N ;
  assign fabricXactor_f_rd_data$DEQ = 1'b0 ;
  assign fabricXactor_f_rd_data$CLR = 1'b0 ;

  // submodule fabricXactor_f_wr_addr
  assign fabricXactor_f_wr_addr$D_IN =
	     MUX_fabricXactor_f_wr_addr$enq_1__SEL_1 ?
	       MUX_fabricXactor_f_wr_addr$enq_1__VAL_1 :
	       MUX_fabricXactor_f_wr_addr$enq_1__VAL_2 ;
  assign fabricXactor_f_wr_addr$ENQ =
	     (WILL_FIRE_RL_action_l168c19 || WILL_FIRE_RL_action_l139c19) &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ||
	     WILL_FIRE_RL_action_l191c19 &&
	     addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253 &&
	     dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256 ;
  assign fabricXactor_f_wr_addr$DEQ =
	     fabricXactor_f_wr_addr$EMPTY_N && cpu_ifc_toFabric_awready ;
  assign fabricXactor_f_wr_addr$CLR = 1'b0 ;

  // submodule fabricXactor_f_wr_data
  always@(MUX_fabricXactor_f_wr_data$enq_1__SEL_1 or
	  MUX_fabricXactor_f_wr_data$enq_1__VAL_1 or
	  MUX_fabricXactor_f_wr_data$enq_1__SEL_2 or
	  MUX_fabricXactor_f_wr_data$enq_1__VAL_2 or
	  MUX_fabricXactor_f_wr_addr$enq_1__SEL_2 or
	  MUX_fabricXactor_f_wr_data$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fabricXactor_f_wr_data$enq_1__SEL_1:
	  fabricXactor_f_wr_data$D_IN =
	      MUX_fabricXactor_f_wr_data$enq_1__VAL_1;
      MUX_fabricXactor_f_wr_data$enq_1__SEL_2:
	  fabricXactor_f_wr_data$D_IN =
	      MUX_fabricXactor_f_wr_data$enq_1__VAL_2;
      MUX_fabricXactor_f_wr_addr$enq_1__SEL_2:
	  fabricXactor_f_wr_data$D_IN =
	      MUX_fabricXactor_f_wr_data$enq_1__VAL_3;
      default: fabricXactor_f_wr_data$D_IN =
		   37'h0AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fabricXactor_f_wr_data$ENQ =
	     WILL_FIRE_RL_action_l139c19 &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ||
	     WILL_FIRE_RL_action_l168c19 &&
	     addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 &&
	     cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ||
	     WILL_FIRE_RL_action_l191c19 &&
	     addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253 &&
	     dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256 ;
  assign fabricXactor_f_wr_data$DEQ =
	     fabricXactor_f_wr_data$EMPTY_N && cpu_ifc_toFabric_wready ;
  assign fabricXactor_f_wr_data$CLR = 1'b0 ;

  // submodule fabricXactor_f_wr_resp
  assign fabricXactor_f_wr_resp$D_IN =
	     { cpu_ifc_toFabric_bid, cpu_ifc_toFabric_bresp } ;
  assign fabricXactor_f_wr_resp$ENQ =
	     cpu_ifc_toFabric_bvalid && fabricXactor_f_wr_resp$FULL_N ;
  assign fabricXactor_f_wr_resp$DEQ = CAN_FIRE_RL_action_l216c19 ;
  assign fabricXactor_f_wr_resp$CLR = 1'b0 ;

  // submodule flashXactor_f_rd_addr
  assign flashXactor_f_rd_addr$D_IN = { req_cnt, 29'd589824 } ;
  assign flashXactor_f_rd_addr$ENQ = CAN_FIRE_RL_action_l124c19 ;
  assign flashXactor_f_rd_addr$DEQ =
	     flashXactor_f_rd_addr$EMPTY_N && toFlash_arready ;
  assign flashXactor_f_rd_addr$CLR = 1'b0 ;

  // submodule flashXactor_f_rd_data
  assign flashXactor_f_rd_data$D_IN =
	     { toFlash_rdata, toFlash_rresp, toFlash_rlast } ;
  assign flashXactor_f_rd_data$ENQ =
	     toFlash_rvalid && flashXactor_f_rd_data$FULL_N ;
  assign flashXactor_f_rd_data$DEQ = CAN_FIRE_RL_action_l139c19 ;
  assign flashXactor_f_rd_data$CLR = 1'b0 ;

  // submodule flashXactor_f_wr_addr
  assign flashXactor_f_wr_addr$D_IN = 61'h0 ;
  assign flashXactor_f_wr_addr$ENQ = 1'b0 ;
  assign flashXactor_f_wr_addr$DEQ =
	     flashXactor_f_wr_addr$EMPTY_N && toFlash_awready ;
  assign flashXactor_f_wr_addr$CLR = 1'b0 ;

  // submodule flashXactor_f_wr_data
  assign flashXactor_f_wr_data$D_IN = 37'h0 ;
  assign flashXactor_f_wr_data$ENQ = 1'b0 ;
  assign flashXactor_f_wr_data$DEQ =
	     flashXactor_f_wr_data$EMPTY_N && toFlash_wready ;
  assign flashXactor_f_wr_data$CLR = 1'b0 ;

  // submodule flashXactor_f_wr_resp
  assign flashXactor_f_wr_resp$D_IN = toFlash_bresp ;
  assign flashXactor_f_wr_resp$ENQ =
	     toFlash_bvalid && flashXactor_f_wr_resp$FULL_N ;
  assign flashXactor_f_wr_resp$DEQ = 1'b0 ;
  assign flashXactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d366 =
	     (!cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	      !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	      rsp_cnt_53_EQ_wrt_cnt_54___d155 ||
	      par_blocks_2_state_mkFSMstate != 2'd0) &&
	     (!cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	      !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	      rsp_cnt_53_EQ_wrt_cnt_54___d155 ||
	      par_blocks_2_state_mkFSMstate != 2'd3) &&
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !rsp_cnt_53_EQ_wrt_cnt_54___d155 ||
	      par_blocks_2_state_mkFSMstate != 2'd0) &&
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !rsp_cnt_53_EQ_wrt_cnt_54___d155 ||
	      par_blocks_2_state_mkFSMstate != 2'd1) &&
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !rsp_cnt_53_EQ_wrt_cnt_54___d155 ||
	      par_blocks_2_state_mkFSMstate != 2'd3) ;
  assign NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d397 =
	     NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d366 ||
	     par_blocks_2_start_reg && !par_blocks_2_state_fired ||
	     NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d393 &&
	     (dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      cpy_cnt_42_ULT_0x40___d188 ||
	      cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      par_blocks_1_state_mkFSMstate != 3'd4) ||
	     par_blocks_1_start_reg && !par_blocks_1_state_fired ;
  assign NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d414 =
	     NOT_cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_ad_ETC___d397 ||
	     (!req_cnt_71_ULT_0x40___d272 ||
	      par_blocks_state_mkFSMstate != 2'd0) &&
	     (!req_cnt_71_ULT_0x40___d272 ||
	      par_blocks_state_mkFSMstate != 2'd3) &&
	     (req_cnt_71_ULT_0x40___d272 ||
	      par_blocks_state_mkFSMstate != 2'd0) &&
	     (req_cnt_71_ULT_0x40___d272 ||
	      par_blocks_state_mkFSMstate != 2'd1) &&
	     (req_cnt_71_ULT_0x40___d272 ||
	      par_blocks_state_mkFSMstate != 2'd3) ||
	     par_blocks_start_reg && !par_blocks_state_fired ;
  assign NOT_cpy_cnt_42_ULT_0x40_88_16_AND_NOT_cpy_cnt__ETC___d248 =
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_start_wire$whas &&
	     par_blocks_1_state_mkFSMstate == 3'd0 ||
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd1 ||
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd2 ||
	     NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d243 &&
	     par_blocks_1_state_mkFSMstate == 3'd3 ||
	     NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d243 &&
	     par_blocks_1_state_mkFSMstate == 3'd4 ;
  assign NOT_cpy_cnt_42_ULT_0x40_88_16_AND_cpy_cnt_42_U_ETC___d232 =
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_start_wire$whas &&
	     par_blocks_1_state_mkFSMstate == 3'd0 ||
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd1 ||
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd2 ||
	     NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d225 &&
	     par_blocks_1_state_mkFSMstate == 3'd3 ||
	     NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d225 &&
	     par_blocks_1_state_mkFSMstate == 3'd4 ;
  assign NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d393 =
	     (!cpy_cnt_42_ULT_0x40___d188 ||
	      par_blocks_1_state_mkFSMstate != 3'd0) &&
	     (dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !cpy_cnt_42_ULT_0x40___d188 ||
	      par_blocks_1_state_mkFSMstate != 3'd3) &&
	     (dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !cpy_cnt_42_ULT_0x40___d188 ||
	      par_blocks_1_state_mkFSMstate != 3'd4) &&
	     (cpy_cnt_42_ULT_0x40___d188 ||
	      !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      par_blocks_1_state_mkFSMstate != 3'd0) &&
	     (dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      cpy_cnt_42_ULT_0x40___d188 ||
	      !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      par_blocks_1_state_mkFSMstate != 3'd3) &&
	     (dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      cpy_cnt_42_ULT_0x40___d188 ||
	      !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      par_blocks_1_state_mkFSMstate != 3'd4) &&
	     (cpy_cnt_42_ULT_0x40___d188 ||
	      cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      par_blocks_1_state_mkFSMstate != 3'd0) &&
	     (dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      cpy_cnt_42_ULT_0x40___d188 ||
	      cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      par_blocks_1_state_mkFSMstate != 3'd3) ;
  assign NOT_cpy_cnt_42_ULT_0x40_88_16_OR_NOT_par_block_ETC___d425 =
	     (!cpy_cnt_42_ULT_0x40___d188 || !par_blocks_1_start_wire$whas) &&
	     (cpy_cnt_42_ULT_0x40___d188 ||
	      !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      !par_blocks_1_start_wire$whas) &&
	     (cpy_cnt_42_ULT_0x40___d188 ||
	      cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      !par_blocks_1_start_wire$whas) ;
  assign NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d225 =
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_start_wire$whas ;
  assign NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d243 =
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_start_wire$whas ;
  assign NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d318 =
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd4 ;
  assign abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d434 =
	     (state_mkFSMstate == 4'd0 || state_mkFSMstate == 4'd10) &&
	     (!start_reg_1 || state_fired) ;
  assign addr__h69379 = cpy_cnt + rg_offset ;
  assign addr__h71015 = dcpy_cnt + rg_offset ;
  assign addr_map_m_dtcm_addr_base__51_ULE_dcpy_cnt_47__ETC___d253 =
	     addr_map$m_dtcm_addr_base <= addr__h71015 ;
  assign addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 =
	     addr_map$m_itcm_addr_base <= addr__h69379 ;
  assign cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 =
	     addr__h69379 < addr_map$m_itcm_addr_lim ;
  assign cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 =
	     cpy_cnt < itcm_size_words__h1357 ;
  assign cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d162 =
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !rsp_cnt_53_EQ_wrt_cnt_54___d155) &&
	     par_blocks_2_start_wire$whas &&
	     par_blocks_2_state_mkFSMstate == 2'd0 ;
  assign cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d298 =
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !rsp_cnt_53_EQ_wrt_cnt_54___d155) &&
	     par_blocks_2_state_mkFSMstate == 2'd0 ||
	     (cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 ||
	      dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 ||
	      !rsp_cnt_53_EQ_wrt_cnt_54___d155) &&
	     par_blocks_2_state_mkFSMstate == 2'd3 ||
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     rsp_cnt_53_EQ_wrt_cnt_54___d155 &&
	     par_blocks_2_state_mkFSMstate == 2'd0 ||
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     rsp_cnt_53_EQ_wrt_cnt_54___d155 &&
	     (par_blocks_2_state_mkFSMstate == 2'd1 ||
	      par_blocks_2_state_mkFSMstate == 2'd3) ;
  assign cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d343 =
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d298 &&
	     (!par_blocks_2_start_reg || par_blocks_2_state_fired) &&
	     (cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d317 ||
	      NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d318) &&
	     (!par_blocks_1_start_reg || par_blocks_1_state_fired) ;
  assign cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d317 =
	     cpy_cnt_42_ULT_0x40___d188 &&
	     par_blocks_1_state_mkFSMstate == 3'd0 ||
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     cpy_cnt_42_ULT_0x40___d188 &&
	     par_blocks_1_state_mkFSMstate == 3'd3 ||
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     cpy_cnt_42_ULT_0x40___d188 &&
	     par_blocks_1_state_mkFSMstate == 3'd4 ||
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd0 ||
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     (par_blocks_1_state_mkFSMstate == 3'd3 ||
	      par_blocks_1_state_mkFSMstate == 3'd4) ||
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd0 ||
	     !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	     !cpy_cnt_42_ULT_0x40___d188 &&
	     !cpy_cnt_42_ULT_0_CONCAT_addr_map_m_itcm_addr_s_ETC___d146 &&
	     par_blocks_1_state_mkFSMstate == 3'd3 ;
  assign cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d338 =
	     (cpy_cnt_42_ULT_0x40_88_AND_par_blocks_1_abort__ETC___d317 ||
	      NOT_dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_a_ETC___d318) &&
	     (!par_blocks_1_start_reg || par_blocks_1_state_fired) &&
	     req_cnt_71_ULT_0x40_72_AND_par_blocks_abort_wh_ETC___d334 &&
	     (!par_blocks_start_reg || par_blocks_state_fired) ;
  assign cpy_cnt_42_ULT_0x40___d188 = cpy_cnt < 32'h00000040 ;
  assign dcpy_cnt_47_PLUS_rg_offset_74_52_ULT_addr_map__ETC___d256 =
	     addr__h71015 < addr_map$m_dtcm_addr_lim ;
  assign dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 =
	     dcpy_cnt < dtcm_size_words__h1358 ;
  assign dtcm_size_words__h1358 = { 2'd0, addr_map$m_dtcm_addr_size[31:2] } ;
  assign flashXactor_f_rd_data_i_notEmpty__72_AND_NOT_a_ETC___d186 =
	     flashXactor_f_rd_data$EMPTY_N &&
	     (!addr_map_m_itcm_addr_base__73_ULE_cpy_cnt_42_P_ETC___d176 ||
	      !cpy_cnt_42_PLUS_rg_offset_74_75_ULT_addr_map_m_ETC___d179 ||
	      fabricXactor_f_wr_addr$FULL_N &&
	      fabricXactor_f_wr_data$FULL_N) ;
  assign itcm_size_words__h1357 = { 2'd0, addr_map$m_itcm_addr_size[31:2] } ;
  assign par_running_whas__39_AND_par_running_wget__40__ETC___d206 =
	     par_running$whas &&
	     (cpy_cnt_42_ULT_0x40___d188 && par_blocks_1_start_wire$whas &&
	      par_blocks_1_state_mkFSMstate == 3'd0 ||
	      cpy_cnt_42_ULT_0x40___d188 &&
	      par_blocks_1_state_mkFSMstate == 3'd1 ||
	      !dcpy_cnt_47_ULT_0_CONCAT_addr_map_m_dtcm_addr__ETC___d151 &&
	      cpy_cnt_42_ULT_0x40___d188 &&
	      par_blocks_1_start_wire$whas &&
	      (par_blocks_1_state_mkFSMstate == 3'd3 ||
	       par_blocks_1_state_mkFSMstate == 3'd4)) ;
  assign req_cnt_71_ULT_0x40_72_AND_par_blocks_abort_wh_ETC___d334 =
	     req_cnt_71_ULT_0x40___d272 &&
	     par_blocks_state_mkFSMstate == 2'd0 ||
	     req_cnt_71_ULT_0x40___d272 &&
	     par_blocks_state_mkFSMstate == 2'd3 ||
	     !req_cnt_71_ULT_0x40___d272 &&
	     par_blocks_state_mkFSMstate == 2'd0 ||
	     !req_cnt_71_ULT_0x40___d272 &&
	     (par_blocks_state_mkFSMstate == 2'd1 ||
	      par_blocks_state_mkFSMstate == 2'd3) ;
  assign req_cnt_71_ULT_0x40___d272 = req_cnt < 32'h00000040 ;
  assign rsp_cnt_53_EQ_wrt_cnt_54___d155 = rsp_cnt == wrt_cnt ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	par_blocks_2_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_2_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_2_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_2_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 2'd0;
	par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_cpu_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_offset <= `BSV_ASSIGNMENT_DELAY 32'hC0000000;
	rg_reset_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (par_blocks_1_start_reg$EN)
	  par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_start_reg$D_IN;
	if (par_blocks_1_state_can_overlap$EN)
	  par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_can_overlap$D_IN;
	if (par_blocks_1_state_fired$EN)
	  par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_fired$D_IN;
	if (par_blocks_1_state_mkFSMstate$EN)
	  par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_mkFSMstate$D_IN;
	if (par_blocks_2_start_reg$EN)
	  par_blocks_2_start_reg <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_2_start_reg$D_IN;
	if (par_blocks_2_state_can_overlap$EN)
	  par_blocks_2_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_2_state_can_overlap$D_IN;
	if (par_blocks_2_state_fired$EN)
	  par_blocks_2_state_fired <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_2_state_fired$D_IN;
	if (par_blocks_2_state_mkFSMstate$EN)
	  par_blocks_2_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_2_state_mkFSMstate$D_IN;
	if (par_blocks_start_reg$EN)
	  par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_start_reg$D_IN;
	if (par_blocks_state_can_overlap$EN)
	  par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_can_overlap$D_IN;
	if (par_blocks_state_fired$EN)
	  par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_fired$D_IN;
	if (par_blocks_state_mkFSMstate$EN)
	  par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_mkFSMstate$D_IN;
	if (rg_cpu_halt$EN)
	  rg_cpu_halt <= `BSV_ASSIGNMENT_DELAY rg_cpu_halt$D_IN;
	if (rg_offset$EN) rg_offset <= `BSV_ASSIGNMENT_DELAY rg_offset$D_IN;
	if (rg_reset_done$EN)
	  rg_reset_done <= `BSV_ASSIGNMENT_DELAY rg_reset_done$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
    if (cpy_cnt$EN) cpy_cnt <= `BSV_ASSIGNMENT_DELAY cpy_cnt$D_IN;
    if (dcpy_cnt$EN) dcpy_cnt <= `BSV_ASSIGNMENT_DELAY dcpy_cnt$D_IN;
    if (req_cnt$EN) req_cnt <= `BSV_ASSIGNMENT_DELAY req_cnt$D_IN;
    if (rsp_cnt$EN) rsp_cnt <= `BSV_ASSIGNMENT_DELAY rsp_cnt$D_IN;
    if (wrt_cnt$EN) wrt_cnt <= `BSV_ASSIGNMENT_DELAY wrt_cnt$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cpy_cnt = 32'hAAAAAAAA;
    dcpy_cnt = 32'hAAAAAAAA;
    par_blocks_1_start_reg = 1'h0;
    par_blocks_1_state_can_overlap = 1'h0;
    par_blocks_1_state_fired = 1'h0;
    par_blocks_1_state_mkFSMstate = 3'h2;
    par_blocks_2_start_reg = 1'h0;
    par_blocks_2_state_can_overlap = 1'h0;
    par_blocks_2_state_fired = 1'h0;
    par_blocks_2_state_mkFSMstate = 2'h2;
    par_blocks_start_reg = 1'h0;
    par_blocks_state_can_overlap = 1'h0;
    par_blocks_state_fired = 1'h0;
    par_blocks_state_mkFSMstate = 2'h2;
    req_cnt = 32'hAAAAAAAA;
    rg_cpu_halt = 1'h0;
    rg_offset = 32'hAAAAAAAA;
    rg_reset_done = 1'h0;
    rsp_cnt = 32'hAAAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
    wrt_cnt = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l116c10) $display("Loading starting");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l223c10) $display("Loading finished");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l222c22 && WILL_FIRE_RL_action_l223c10)
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 222, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l222c22] and\n  [RL_action_l223c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_auto_finish) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l168c19 &&
	  (WILL_FIRE_RL_action_l188c26 || WILL_FIRE_RL_action_l191c19))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 168, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l168c19] and\n  [RL_action_l188c26, RL_action_l191c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l188c26 && WILL_FIRE_RL_action_l191c19)
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 188, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l188c26] and\n  [RL_action_l191c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c16 &&
	  (WILL_FIRE_RL_action_l106c10 || WILL_FIRE_RL_action_l115c16 ||
	   WILL_FIRE_RL_action_l116c10 ||
	   WILL_FIRE_RL_action_l216c19 ||
	   WILL_FIRE_RL_action_l139c19 ||
	   WILL_FIRE_RL_action_l168c19 ||
	   WILL_FIRE_RL_action_l188c26 ||
	   WILL_FIRE_RL_action_l191c19 ||
	   WILL_FIRE_RL_action_l124c19 ||
	   WILL_FIRE_RL_actionpar_start_l120c10 ||
	   WILL_FIRE_RL_action_l222c22 ||
	   WILL_FIRE_RL_action_l223c10))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 104, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l104c16] and\n  [RL_action_l106c10, RL_action_l115c16, RL_action_l116c10, RL_action_l216c19,\n  RL_action_l139c19, RL_action_l168c19, RL_action_l188c26, RL_action_l191c19,\n  RL_action_l124c19, RL_actionpar_start_l120c10, RL_action_l222c22,\n  RL_action_l223c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l106c10 &&
	  (WILL_FIRE_RL_action_l115c16 || WILL_FIRE_RL_action_l116c10 ||
	   WILL_FIRE_RL_action_l216c19 ||
	   WILL_FIRE_RL_action_l139c19 ||
	   WILL_FIRE_RL_action_l168c19 ||
	   WILL_FIRE_RL_action_l188c26 ||
	   WILL_FIRE_RL_action_l191c19 ||
	   WILL_FIRE_RL_action_l124c19 ||
	   WILL_FIRE_RL_actionpar_start_l120c10 ||
	   WILL_FIRE_RL_action_l222c22 ||
	   WILL_FIRE_RL_action_l223c10))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 106, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l106c10] and\n  [RL_action_l115c16, RL_action_l116c10, RL_action_l216c19, RL_action_l139c19,\n  RL_action_l168c19, RL_action_l188c26, RL_action_l191c19, RL_action_l124c19,\n  RL_actionpar_start_l120c10, RL_action_l222c22, RL_action_l223c10] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l115c16 &&
	  (WILL_FIRE_RL_action_l116c10 || WILL_FIRE_RL_action_l216c19 ||
	   WILL_FIRE_RL_action_l139c19 ||
	   WILL_FIRE_RL_action_l168c19 ||
	   WILL_FIRE_RL_action_l188c26 ||
	   WILL_FIRE_RL_action_l191c19 ||
	   WILL_FIRE_RL_action_l124c19 ||
	   WILL_FIRE_RL_actionpar_start_l120c10 ||
	   WILL_FIRE_RL_action_l222c22 ||
	   WILL_FIRE_RL_action_l223c10))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 115, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l115c16] and\n  [RL_action_l116c10, RL_action_l216c19, RL_action_l139c19, RL_action_l168c19,\n  RL_action_l188c26, RL_action_l191c19, RL_action_l124c19,\n  RL_actionpar_start_l120c10, RL_action_l222c22, RL_action_l223c10] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l116c10 &&
	  (WILL_FIRE_RL_action_l216c19 || WILL_FIRE_RL_action_l139c19 ||
	   WILL_FIRE_RL_action_l168c19 ||
	   WILL_FIRE_RL_action_l188c26 ||
	   WILL_FIRE_RL_action_l191c19 ||
	   WILL_FIRE_RL_action_l124c19 ||
	   WILL_FIRE_RL_actionpar_start_l120c10 ||
	   WILL_FIRE_RL_action_l222c22 ||
	   WILL_FIRE_RL_action_l223c10))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 116, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l116c10] and\n  [RL_action_l216c19, RL_action_l139c19, RL_action_l168c19, RL_action_l188c26,\n  RL_action_l191c19, RL_action_l124c19, RL_actionpar_start_l120c10,\n  RL_action_l222c22, RL_action_l223c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l139c19 &&
	  (WILL_FIRE_RL_action_l168c19 || WILL_FIRE_RL_action_l188c26 ||
	   WILL_FIRE_RL_action_l191c19))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 139, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l139c19] and\n  [RL_action_l168c19, RL_action_l188c26, RL_action_l191c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_action_l216c19 || WILL_FIRE_RL_action_l139c19 ||
	   WILL_FIRE_RL_action_l168c19 ||
	   WILL_FIRE_RL_action_l188c26 ||
	   WILL_FIRE_RL_action_l191c19 ||
	   WILL_FIRE_RL_action_l124c19 ||
	   WILL_FIRE_RL_actionpar_start_l120c10) &&
	  (WILL_FIRE_RL_action_l222c22 || WILL_FIRE_RL_action_l223c10))
	$display("Error: \"../src_Testbench/ng-soc/Loader.bsv\", line 216, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l216c19,\n  RL_action_l139c19, RL_action_l168c19, RL_action_l188c26, RL_action_l191c19,\n  RL_action_l124c19, RL_actionpar_start_l120c10] and [RL_action_l222c22,\n  RL_action_l223c10] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkLoad_Control

