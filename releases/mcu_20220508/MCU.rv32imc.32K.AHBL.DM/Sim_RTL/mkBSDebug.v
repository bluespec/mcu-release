//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// toCore_request_get             O    71 reg
// RDY_toCore_request_get         O     1 reg
// RDY_toCore_response_put        O     1 reg
// jtag_TDO                       O     1
// CLK_jtag_tclk_out              O     1 clock
// CLK_GATE_jtag_tclk_out         O     1 const
// RST_N_ndm_resetn               O     1 reset
// dmi_reset                      I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// toCore_response_put            I    37 reg
// jtag_TDI                       I     1
// jtag_TMS                       I     1
// jtag_TCK                       I     1
// EN_toCore_response_put         I     1
// EN_toCore_request_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBSDebug(dmi_reset,
		 CLK,
		 RST_N,

		 EN_toCore_request_get,
		 toCore_request_get,
		 RDY_toCore_request_get,

		 toCore_response_put,
		 EN_toCore_response_put,
		 RDY_toCore_response_put,

		 jtag_TDI,

		 jtag_TMS,

		 jtag_TCK,

		 jtag_TDO,

		 CLK_jtag_tclk_out,
		 CLK_GATE_jtag_tclk_out,

		 RST_N_ndm_resetn);
  input  dmi_reset;
  input  CLK;
  input  RST_N;

  // actionvalue method toCore_request_get
  input  EN_toCore_request_get;
  output [70 : 0] toCore_request_get;
  output RDY_toCore_request_get;

  // action method toCore_response_put
  input  [36 : 0] toCore_response_put;
  input  EN_toCore_response_put;
  output RDY_toCore_response_put;

  // action method jtag_tdi
  input  jtag_TDI;

  // action method jtag_tms
  input  jtag_TMS;

  // action method jtag_tclk
  input  jtag_TCK;

  // value method jtag_tdo
  output jtag_TDO;

  // oscillator and gates for output clock CLK_jtag_tclk_out
  output CLK_jtag_tclk_out;
  output CLK_GATE_jtag_tclk_out;

  // output resets
  output RST_N_ndm_resetn;

  // signals for module outputs
  wire [70 : 0] toCore_request_get;
  wire CLK_GATE_jtag_tclk_out,
       CLK_jtag_tclk_out,
       RDY_toCore_request_get,
       RDY_toCore_response_put,
       RST_N_ndm_resetn,
       jtag_TDO;

  // inlined wires
  wire [40 : 0] bus_dmi_req_data_wire$wget;
  wire bus_dmi_rsp_fifof_enqueueing$whas;

  // register bus_dmi_rsp_fifof_cntr_r
  reg [1 : 0] bus_dmi_rsp_fifof_cntr_r;
  wire [1 : 0] bus_dmi_rsp_fifof_cntr_r$D_IN;
  wire bus_dmi_rsp_fifof_cntr_r$EN;

  // register bus_dmi_rsp_fifof_q_0
  reg [33 : 0] bus_dmi_rsp_fifof_q_0;
  reg [33 : 0] bus_dmi_rsp_fifof_q_0$D_IN;
  wire bus_dmi_rsp_fifof_q_0$EN;

  // register bus_dmi_rsp_fifof_q_1
  reg [33 : 0] bus_dmi_rsp_fifof_q_1;
  reg [33 : 0] bus_dmi_rsp_fifof_q_1$D_IN;
  wire bus_dmi_rsp_fifof_q_1$EN;

  // register rg_busy
  reg rg_busy;
  wire rg_busy$D_IN, rg_busy$EN;

  // register rg_sb_writes
  reg [31 : 0] rg_sb_writes;
  wire [31 : 0] rg_sb_writes$D_IN;
  wire rg_sb_writes$EN;

  // ports of submodule bus_dmi_req_fifof
  wire [40 : 0] bus_dmi_req_fifof$D_IN, bus_dmi_req_fifof$D_OUT;
  wire bus_dmi_req_fifof$CLR,
       bus_dmi_req_fifof$DEQ,
       bus_dmi_req_fifof$EMPTY_N,
       bus_dmi_req_fifof$ENQ,
       bus_dmi_req_fifof$FULL_N;

  // ports of submodule debug_module
  wire [67 : 0] debug_module$sb_client_request_get;
  wire [44 : 0] debug_module$hart0_hart_csr_mem_client_request_get;
  wire [37 : 0] debug_module$hart0_hart_gpr_mem_client_request_get;
  wire [33 : 0] debug_module$sb_client_response_put;
  wire [32 : 0] debug_module$hart0_hart_csr_mem_client_response_put,
		debug_module$hart0_hart_gpr_mem_client_response_put;
  wire [31 : 0] debug_module$dmi_read_data, debug_module$dmi_write_dm_word;
  wire [6 : 0] debug_module$dmi_read_addr_dm_addr,
	       debug_module$dmi_write_dm_addr;
  wire debug_module$EN_dmi_read_addr,
       debug_module$EN_dmi_read_data,
       debug_module$EN_dmi_write,
       debug_module$EN_hart0_hart_client_run_halt_request_get,
       debug_module$EN_hart0_hart_client_run_halt_response_put,
       debug_module$EN_hart0_hart_csr_mem_client_request_get,
       debug_module$EN_hart0_hart_csr_mem_client_response_put,
       debug_module$EN_hart0_hart_get_other_req_get,
       debug_module$EN_hart0_hart_gpr_mem_client_request_get,
       debug_module$EN_hart0_hart_gpr_mem_client_response_put,
       debug_module$EN_hart0_hart_reset_client_request_get,
       debug_module$EN_hart0_hart_reset_client_response_put,
       debug_module$EN_ndm_reset_client_request_get,
       debug_module$EN_ndm_reset_client_response_put,
       debug_module$EN_sb_client_request_get,
       debug_module$EN_sb_client_response_put,
       debug_module$RDY_dmi_read_addr,
       debug_module$RDY_dmi_read_data,
       debug_module$RDY_dmi_write,
       debug_module$RDY_hart0_hart_client_run_halt_request_get,
       debug_module$RDY_hart0_hart_client_run_halt_response_put,
       debug_module$RDY_hart0_hart_csr_mem_client_request_get,
       debug_module$RDY_hart0_hart_csr_mem_client_response_put,
       debug_module$RDY_hart0_hart_gpr_mem_client_request_get,
       debug_module$RDY_hart0_hart_gpr_mem_client_response_put,
       debug_module$RDY_hart0_hart_reset_client_request_get,
       debug_module$RDY_hart0_hart_reset_client_response_put,
       debug_module$RDY_ndm_reset_client_request_get,
       debug_module$RDY_ndm_reset_client_response_put,
       debug_module$RDY_sb_client_request_get,
       debug_module$RDY_sb_client_response_put,
       debug_module$hart0_hart_client_run_halt_request_get,
       debug_module$hart0_hart_client_run_halt_response_put,
       debug_module$hart0_hart_reset_client_request_get,
       debug_module$hart0_hart_reset_client_response_put,
       debug_module$ndm_reset_client_request_get,
       debug_module$ndm_reset_client_response_put;

  // ports of submodule dmi_resetN
  wire dmi_resetN$RESET_OUT;

  // ports of submodule ff_dm_sys_req
  reg [70 : 0] ff_dm_sys_req$D_IN;
  wire [70 : 0] ff_dm_sys_req$D_OUT;
  wire ff_dm_sys_req$CLR,
       ff_dm_sys_req$DEQ,
       ff_dm_sys_req$EMPTY_N,
       ff_dm_sys_req$ENQ,
       ff_dm_sys_req$FULL_N;

  // ports of submodule ff_dm_sys_rsp
  wire [36 : 0] ff_dm_sys_rsp$D_IN, ff_dm_sys_rsp$D_OUT;
  wire ff_dm_sys_rsp$CLR,
       ff_dm_sys_rsp$DEQ,
       ff_dm_sys_rsp$EMPTY_N,
       ff_dm_sys_rsp$ENQ,
       ff_dm_sys_rsp$FULL_N;

  // ports of submodule ff_rst_req
  wire ff_rst_req$CLR,
       ff_rst_req$DEQ,
       ff_rst_req$D_IN,
       ff_rst_req$D_OUT,
       ff_rst_req$EMPTY_N,
       ff_rst_req$ENQ,
       ff_rst_req$FULL_N;

  // ports of submodule ff_rst_rsp
  wire ff_rst_rsp$CLR,
       ff_rst_rsp$DEQ,
       ff_rst_rsp$D_IN,
       ff_rst_rsp$D_OUT,
       ff_rst_rsp$EMPTY_N,
       ff_rst_rsp$ENQ,
       ff_rst_rsp$FULL_N;

  // ports of submodule ff_which_rst
  wire ff_which_rst$CLR,
       ff_which_rst$DEQ,
       ff_which_rst$D_IN,
       ff_which_rst$D_OUT,
       ff_which_rst$EMPTY_N,
       ff_which_rst$ENQ,
       ff_which_rst$FULL_N;

  // ports of submodule jtagtap
  wire [31 : 0] jtagtap$dmi_req_data, jtagtap$dmi_rsp_data;
  wire [6 : 0] jtagtap$dmi_req_addr;
  wire [1 : 0] jtagtap$dmi_req_op, jtagtap$dmi_rsp_response;
  wire jtagtap$CLK_jtag_tclk_out,
       jtagtap$dmi_req_ready,
       jtagtap$dmi_req_valid,
       jtagtap$dmi_rsp_ready,
       jtagtap$dmi_rsp_valid,
       jtagtap$jtag_TCK,
       jtagtap$jtag_TDI,
       jtagtap$jtag_TDO,
       jtagtap$jtag_TMS;

  // ports of submodule resetIfc
  wire resetIfc$ASSERT_IN, resetIfc$OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf,
       CAN_FIRE_RL_bus_dmi_req_do_enq,
       CAN_FIRE_RL_bus_dmi_rsp_do_deq,
       CAN_FIRE_RL_bus_dmi_rsp_fifof_both,
       CAN_FIRE_RL_bus_dmi_rsp_fifof_decCtr,
       CAN_FIRE_RL_bus_dmi_rsp_fifof_incCtr,
       CAN_FIRE_RL_hart_reset_rl,
       CAN_FIRE_RL_ndm_reset_rl,
       CAN_FIRE_RL_reset_rsp_rl,
       CAN_FIRE_RL_rl_csr_req,
       CAN_FIRE_RL_rl_csr_rsp,
       CAN_FIRE_RL_rl_dmi_req,
       CAN_FIRE_RL_rl_dmi_req_cpu,
       CAN_FIRE_RL_rl_dmi_rsp,
       CAN_FIRE_RL_rl_dmi_rsp_cpu,
       CAN_FIRE_RL_rl_gpr_req,
       CAN_FIRE_RL_rl_gpr_rsp,
       CAN_FIRE_RL_rl_reset_req,
       CAN_FIRE_RL_rl_rst_rsp,
       CAN_FIRE_RL_rl_runhalt_req,
       CAN_FIRE_RL_rl_runhalt_rsp,
       CAN_FIRE_RL_rl_sb_rsp,
       CAN_FIRE_RL_rl_sbus_req,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_24,
       CAN_FIRE_jtag_tclk,
       CAN_FIRE_jtag_tdi,
       CAN_FIRE_jtag_tms,
       CAN_FIRE_toCore_request_get,
       CAN_FIRE_toCore_response_put,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf,
       WILL_FIRE_RL_bus_dmi_req_do_enq,
       WILL_FIRE_RL_bus_dmi_rsp_do_deq,
       WILL_FIRE_RL_bus_dmi_rsp_fifof_both,
       WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr,
       WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr,
       WILL_FIRE_RL_hart_reset_rl,
       WILL_FIRE_RL_ndm_reset_rl,
       WILL_FIRE_RL_reset_rsp_rl,
       WILL_FIRE_RL_rl_csr_req,
       WILL_FIRE_RL_rl_csr_rsp,
       WILL_FIRE_RL_rl_dmi_req,
       WILL_FIRE_RL_rl_dmi_req_cpu,
       WILL_FIRE_RL_rl_dmi_rsp,
       WILL_FIRE_RL_rl_dmi_rsp_cpu,
       WILL_FIRE_RL_rl_gpr_req,
       WILL_FIRE_RL_rl_gpr_rsp,
       WILL_FIRE_RL_rl_reset_req,
       WILL_FIRE_RL_rl_rst_rsp,
       WILL_FIRE_RL_rl_runhalt_req,
       WILL_FIRE_RL_rl_runhalt_rsp,
       WILL_FIRE_RL_rl_sb_rsp,
       WILL_FIRE_RL_rl_sbus_req,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_24,
       WILL_FIRE_jtag_tclk,
       WILL_FIRE_jtag_tdi,
       WILL_FIRE_jtag_tms,
       WILL_FIRE_toCore_request_get,
       WILL_FIRE_toCore_response_put;

  // inputs to muxes for submodule ports
  wire [70 : 0] MUX_ff_dm_sys_req$enq_1__VAL_1,
		MUX_ff_dm_sys_req$enq_1__VAL_2,
		MUX_ff_dm_sys_req$enq_1__VAL_3,
		MUX_ff_dm_sys_req$enq_1__VAL_4,
		MUX_ff_dm_sys_req$enq_1__VAL_5;
  wire [33 : 0] MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1,
		MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2,
		MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_2,
		MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_1,
		MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_2;
  wire [31 : 0] MUX_rg_sb_writes$write_1__VAL_1,
		MUX_rg_sb_writes$write_1__VAL_2;
  wire [1 : 0] MUX_bus_dmi_rsp_fifof_cntr_r$write_1__VAL_2;
  wire MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1,
       MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2,
       MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1,
       MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2,
       MUX_bus_dmi_rsp_fifof_x_wire$wset_1__SEL_1,
       MUX_rg_busy$write_1__SEL_5,
       MUX_rg_sb_writes$write_1__SEL_1;

  // remaining internal signals
  wire [1 : 0] bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21;
  wire IF_bus_dmi_req_fifof_first__0_BITS_1_TO_0_1_EQ_ETC___d71,
       _dfoo1,
       _dfoo3,
       ff_which_rst_i_notEmpty__2_AND_IF_ff_which_rst_ETC___d97;

  // oscillator and gates for output clock CLK_jtag_tclk_out
  assign CLK_jtag_tclk_out = jtagtap$CLK_jtag_tclk_out ;
  assign CLK_GATE_jtag_tclk_out = 1'b1 ;

  // output resets
  assign RST_N_ndm_resetn = resetIfc$OUT_RST ;

  // actionvalue method toCore_request_get
  assign toCore_request_get = ff_dm_sys_req$D_OUT ;
  assign RDY_toCore_request_get = ff_dm_sys_req$EMPTY_N ;
  assign CAN_FIRE_toCore_request_get = ff_dm_sys_req$EMPTY_N ;
  assign WILL_FIRE_toCore_request_get = EN_toCore_request_get ;

  // action method toCore_response_put
  assign RDY_toCore_response_put = ff_dm_sys_rsp$FULL_N ;
  assign CAN_FIRE_toCore_response_put = ff_dm_sys_rsp$FULL_N ;
  assign WILL_FIRE_toCore_response_put = EN_toCore_response_put ;

  // action method jtag_tdi
  assign CAN_FIRE_jtag_tdi = 1'd1 ;
  assign WILL_FIRE_jtag_tdi = 1'd1 ;

  // action method jtag_tms
  assign CAN_FIRE_jtag_tms = 1'd1 ;
  assign WILL_FIRE_jtag_tms = 1'd1 ;

  // action method jtag_tclk
  assign CAN_FIRE_jtag_tclk = 1'd1 ;
  assign WILL_FIRE_jtag_tclk = 1'd1 ;

  // value method jtag_tdo
  assign jtag_TDO = jtagtap$jtag_TDO ;

  // submodule bus_dmi_req_fifof
  FIFO2 #(.width(32'd41),
	  .guarded(1'd1)) bus_dmi_req_fifof(.RST(dmi_resetN$RESET_OUT),
					    .CLK(CLK),
					    .D_IN(bus_dmi_req_fifof$D_IN),
					    .ENQ(bus_dmi_req_fifof$ENQ),
					    .DEQ(bus_dmi_req_fifof$DEQ),
					    .CLR(bus_dmi_req_fifof$CLR),
					    .D_OUT(bus_dmi_req_fifof$D_OUT),
					    .FULL_N(bus_dmi_req_fifof$FULL_N),
					    .EMPTY_N(bus_dmi_req_fifof$EMPTY_N));

  // submodule debug_module
  mkDebug_Module debug_module(.CLK(CLK),
			      .RST_N(RST_N),
			      .dmi_read_addr_dm_addr(debug_module$dmi_read_addr_dm_addr),
			      .dmi_write_dm_addr(debug_module$dmi_write_dm_addr),
			      .dmi_write_dm_word(debug_module$dmi_write_dm_word),
			      .hart0_hart_client_run_halt_response_put(debug_module$hart0_hart_client_run_halt_response_put),
			      .hart0_hart_csr_mem_client_response_put(debug_module$hart0_hart_csr_mem_client_response_put),
			      .hart0_hart_gpr_mem_client_response_put(debug_module$hart0_hart_gpr_mem_client_response_put),
			      .hart0_hart_reset_client_response_put(debug_module$hart0_hart_reset_client_response_put),
			      .ndm_reset_client_response_put(debug_module$ndm_reset_client_response_put),
			      .sb_client_response_put(debug_module$sb_client_response_put),
			      .EN_dmi_read_addr(debug_module$EN_dmi_read_addr),
			      .EN_dmi_read_data(debug_module$EN_dmi_read_data),
			      .EN_dmi_write(debug_module$EN_dmi_write),
			      .EN_hart0_hart_reset_client_request_get(debug_module$EN_hart0_hart_reset_client_request_get),
			      .EN_hart0_hart_reset_client_response_put(debug_module$EN_hart0_hart_reset_client_response_put),
			      .EN_hart0_hart_client_run_halt_request_get(debug_module$EN_hart0_hart_client_run_halt_request_get),
			      .EN_hart0_hart_client_run_halt_response_put(debug_module$EN_hart0_hart_client_run_halt_response_put),
			      .EN_hart0_hart_get_other_req_get(debug_module$EN_hart0_hart_get_other_req_get),
			      .EN_hart0_hart_gpr_mem_client_request_get(debug_module$EN_hart0_hart_gpr_mem_client_request_get),
			      .EN_hart0_hart_gpr_mem_client_response_put(debug_module$EN_hart0_hart_gpr_mem_client_response_put),
			      .EN_hart0_hart_csr_mem_client_request_get(debug_module$EN_hart0_hart_csr_mem_client_request_get),
			      .EN_hart0_hart_csr_mem_client_response_put(debug_module$EN_hart0_hart_csr_mem_client_response_put),
			      .EN_ndm_reset_client_request_get(debug_module$EN_ndm_reset_client_request_get),
			      .EN_ndm_reset_client_response_put(debug_module$EN_ndm_reset_client_response_put),
			      .EN_sb_client_request_get(debug_module$EN_sb_client_request_get),
			      .EN_sb_client_response_put(debug_module$EN_sb_client_response_put),
			      .RDY_dmi_read_addr(debug_module$RDY_dmi_read_addr),
			      .dmi_read_data(debug_module$dmi_read_data),
			      .RDY_dmi_read_data(debug_module$RDY_dmi_read_data),
			      .RDY_dmi_write(debug_module$RDY_dmi_write),
			      .hart0_hart_reset_client_request_get(debug_module$hart0_hart_reset_client_request_get),
			      .RDY_hart0_hart_reset_client_request_get(debug_module$RDY_hart0_hart_reset_client_request_get),
			      .RDY_hart0_hart_reset_client_response_put(debug_module$RDY_hart0_hart_reset_client_response_put),
			      .hart0_hart_client_run_halt_request_get(debug_module$hart0_hart_client_run_halt_request_get),
			      .RDY_hart0_hart_client_run_halt_request_get(debug_module$RDY_hart0_hart_client_run_halt_request_get),
			      .RDY_hart0_hart_client_run_halt_response_put(debug_module$RDY_hart0_hart_client_run_halt_response_put),
			      .hart0_hart_get_other_req_get(),
			      .RDY_hart0_hart_get_other_req_get(),
			      .hart0_hart_gpr_mem_client_request_get(debug_module$hart0_hart_gpr_mem_client_request_get),
			      .RDY_hart0_hart_gpr_mem_client_request_get(debug_module$RDY_hart0_hart_gpr_mem_client_request_get),
			      .RDY_hart0_hart_gpr_mem_client_response_put(debug_module$RDY_hart0_hart_gpr_mem_client_response_put),
			      .hart0_hart_csr_mem_client_request_get(debug_module$hart0_hart_csr_mem_client_request_get),
			      .RDY_hart0_hart_csr_mem_client_request_get(debug_module$RDY_hart0_hart_csr_mem_client_request_get),
			      .RDY_hart0_hart_csr_mem_client_response_put(debug_module$RDY_hart0_hart_csr_mem_client_response_put),
			      .ndm_reset_client_request_get(debug_module$ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_request_get(debug_module$RDY_ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_response_put(debug_module$RDY_ndm_reset_client_response_put),
			      .sb_client_request_get(debug_module$sb_client_request_get),
			      .RDY_sb_client_request_get(debug_module$RDY_sb_client_request_get),
			      .RDY_sb_client_response_put(debug_module$RDY_sb_client_response_put));

  // submodule dmi_resetN
  ResetInverter dmi_resetN(.RESET_IN(dmi_reset),
			   .RESET_OUT(dmi_resetN$RESET_OUT));

  // submodule ff_dm_sys_req
  FIFO2 #(.width(32'd71), .guarded(1'd1)) ff_dm_sys_req(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ff_dm_sys_req$D_IN),
							.ENQ(ff_dm_sys_req$ENQ),
							.DEQ(ff_dm_sys_req$DEQ),
							.CLR(ff_dm_sys_req$CLR),
							.D_OUT(ff_dm_sys_req$D_OUT),
							.FULL_N(ff_dm_sys_req$FULL_N),
							.EMPTY_N(ff_dm_sys_req$EMPTY_N));

  // submodule ff_dm_sys_rsp
  FIFO2 #(.width(32'd37), .guarded(1'd1)) ff_dm_sys_rsp(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ff_dm_sys_rsp$D_IN),
							.ENQ(ff_dm_sys_rsp$ENQ),
							.DEQ(ff_dm_sys_rsp$DEQ),
							.CLR(ff_dm_sys_rsp$CLR),
							.D_OUT(ff_dm_sys_rsp$D_OUT),
							.FULL_N(ff_dm_sys_rsp$FULL_N),
							.EMPTY_N(ff_dm_sys_rsp$EMPTY_N));

  // submodule ff_rst_req
  FIFO1 #(.width(32'd1), .guarded(1'd1)) ff_rst_req(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_rst_req$D_IN),
						    .ENQ(ff_rst_req$ENQ),
						    .DEQ(ff_rst_req$DEQ),
						    .CLR(ff_rst_req$CLR),
						    .D_OUT(ff_rst_req$D_OUT),
						    .FULL_N(ff_rst_req$FULL_N),
						    .EMPTY_N(ff_rst_req$EMPTY_N));

  // submodule ff_rst_rsp
  FIFO1 #(.width(32'd1), .guarded(1'd1)) ff_rst_rsp(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_rst_rsp$D_IN),
						    .ENQ(ff_rst_rsp$ENQ),
						    .DEQ(ff_rst_rsp$DEQ),
						    .CLR(ff_rst_rsp$CLR),
						    .D_OUT(ff_rst_rsp$D_OUT),
						    .FULL_N(ff_rst_rsp$FULL_N),
						    .EMPTY_N(ff_rst_rsp$EMPTY_N));

  // submodule ff_which_rst
  FIFO1 #(.width(32'd1), .guarded(1'd1)) ff_which_rst(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(ff_which_rst$D_IN),
						      .ENQ(ff_which_rst$ENQ),
						      .DEQ(ff_which_rst$DEQ),
						      .CLR(ff_which_rst$CLR),
						      .D_OUT(ff_which_rst$D_OUT),
						      .FULL_N(ff_which_rst$FULL_N),
						      .EMPTY_N(ff_which_rst$EMPTY_N));

  // submodule jtagtap
  mkJtagTap jtagtap(.CLK(CLK),
		    .RST_N(dmi_resetN$RESET_OUT),
		    .dmi_req_ready(jtagtap$dmi_req_ready),
		    .dmi_rsp_data(jtagtap$dmi_rsp_data),
		    .dmi_rsp_response(jtagtap$dmi_rsp_response),
		    .dmi_rsp_valid(jtagtap$dmi_rsp_valid),
		    .jtag_TCK(jtagtap$jtag_TCK),
		    .jtag_TDI(jtagtap$jtag_TDI),
		    .jtag_TMS(jtagtap$jtag_TMS),
		    .jtag_TDO(jtagtap$jtag_TDO),
		    .dmi_req_valid(jtagtap$dmi_req_valid),
		    .dmi_req_addr(jtagtap$dmi_req_addr),
		    .dmi_req_data(jtagtap$dmi_req_data),
		    .dmi_req_op(jtagtap$dmi_req_op),
		    .dmi_rsp_ready(jtagtap$dmi_rsp_ready),
		    .CLK_jtag_tclk_out(jtagtap$CLK_jtag_tclk_out),
		    .CLK_GATE_jtag_tclk_out());

  // submodule resetIfc
  MakeResetA #(.RSTDELAY(32'd2), .init(1'd0)) resetIfc(.CLK(CLK),
						       .RST(RST_N),
						       .DST_CLK(CLK),
						       .ASSERT_IN(resetIfc$ASSERT_IN),
						       .ASSERT_OUT(),
						       .OUT_RST(resetIfc$OUT_RST));

  // rule RL_rl_dmi_rsp
  assign CAN_FIRE_RL_rl_dmi_rsp = 1'd1 ;
  assign WILL_FIRE_RL_rl_dmi_rsp = 1'd1 ;

  // rule RL_hart_reset_rl
  assign CAN_FIRE_RL_hart_reset_rl =
	     debug_module$RDY_hart0_hart_reset_client_request_get &&
	     ff_rst_req$FULL_N &&
	     ff_which_rst$FULL_N ;
  assign WILL_FIRE_RL_hart_reset_rl = CAN_FIRE_RL_hart_reset_rl ;

  // rule RL_ndm_reset_rl
  assign CAN_FIRE_RL_ndm_reset_rl =
	     debug_module$RDY_ndm_reset_client_request_get &&
	     ff_rst_req$FULL_N &&
	     ff_which_rst$FULL_N ;
  assign WILL_FIRE_RL_ndm_reset_rl =
	     CAN_FIRE_RL_ndm_reset_rl && !WILL_FIRE_RL_hart_reset_rl ;

  // rule RL_rl_sbus_req
  assign CAN_FIRE_RL_rl_sbus_req =
	     debug_module$RDY_sb_client_request_get && ff_dm_sys_req$FULL_N ;
  assign WILL_FIRE_RL_rl_sbus_req = CAN_FIRE_RL_rl_sbus_req ;

  // rule RL_rl_reset_req
  assign CAN_FIRE_RL_rl_reset_req =
	     ff_dm_sys_req$FULL_N && ff_rst_req$EMPTY_N && !rg_busy ;
  assign WILL_FIRE_RL_rl_reset_req =
	     CAN_FIRE_RL_rl_reset_req && !WILL_FIRE_RL_rl_sbus_req ;

  // rule RL_rl_runhalt_req
  assign CAN_FIRE_RL_rl_runhalt_req =
	     debug_module$RDY_hart0_hart_client_run_halt_request_get &&
	     ff_dm_sys_req$FULL_N &&
	     !rg_busy ;
  assign WILL_FIRE_RL_rl_runhalt_req =
	     CAN_FIRE_RL_rl_runhalt_req && !WILL_FIRE_RL_rl_reset_req &&
	     !WILL_FIRE_RL_rl_sbus_req ;

  // rule RL_rl_gpr_req
  assign CAN_FIRE_RL_rl_gpr_req =
	     debug_module$RDY_hart0_hart_gpr_mem_client_request_get &&
	     ff_dm_sys_req$FULL_N &&
	     !rg_busy ;
  assign WILL_FIRE_RL_rl_gpr_req =
	     CAN_FIRE_RL_rl_gpr_req && !WILL_FIRE_RL_rl_runhalt_req &&
	     !WILL_FIRE_RL_rl_reset_req ;

  // rule RL_rl_csr_req
  assign CAN_FIRE_RL_rl_csr_req =
	     debug_module$RDY_hart0_hart_csr_mem_client_request_get &&
	     ff_dm_sys_req$FULL_N &&
	     !rg_busy ;
  assign WILL_FIRE_RL_rl_csr_req =
	     CAN_FIRE_RL_rl_csr_req && !WILL_FIRE_RL_rl_runhalt_req &&
	     !WILL_FIRE_RL_rl_reset_req ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule RL_rl_sb_rsp
  assign CAN_FIRE_RL_rl_sb_rsp =
	     debug_module$RDY_sb_client_response_put &&
	     ff_dm_sys_rsp$EMPTY_N &&
	     ff_dm_sys_rsp$D_OUT[36:34] == 3'd4 ;
  assign WILL_FIRE_RL_rl_sb_rsp =
	     CAN_FIRE_RL_rl_sb_rsp && !WILL_FIRE_RL_rl_sbus_req ;

  // rule RL_rl_gpr_rsp
  assign CAN_FIRE_RL_rl_gpr_rsp =
	     debug_module$RDY_hart0_hart_gpr_mem_client_response_put &&
	     ff_dm_sys_rsp$EMPTY_N &&
	     ff_dm_sys_rsp$D_OUT[36:34] == 3'd2 ;
  assign WILL_FIRE_RL_rl_gpr_rsp = CAN_FIRE_RL_rl_gpr_rsp ;

  // rule RL_rl_csr_rsp
  assign CAN_FIRE_RL_rl_csr_rsp =
	     debug_module$RDY_hart0_hart_csr_mem_client_response_put &&
	     ff_dm_sys_rsp$EMPTY_N &&
	     ff_dm_sys_rsp$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_rl_csr_rsp = CAN_FIRE_RL_rl_csr_rsp ;

  // rule RL_rl_rst_rsp
  assign CAN_FIRE_RL_rl_rst_rsp =
	     ff_dm_sys_rsp$EMPTY_N && ff_rst_rsp$FULL_N &&
	     ff_dm_sys_rsp$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_rl_rst_rsp = CAN_FIRE_RL_rl_rst_rsp ;

  // rule RL_rl_runhalt_rsp
  assign CAN_FIRE_RL_rl_runhalt_rsp =
	     debug_module$RDY_hart0_hart_client_run_halt_response_put &&
	     ff_dm_sys_rsp$EMPTY_N &&
	     ff_dm_sys_rsp$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_rl_runhalt_rsp = CAN_FIRE_RL_rl_runhalt_rsp ;

  // rule RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_rl_dmi_req_cpu
  assign CAN_FIRE_RL_rl_dmi_req_cpu =
	     bus_dmi_req_fifof$EMPTY_N &&
	     IF_bus_dmi_req_fifof_first__0_BITS_1_TO_0_1_EQ_ETC___d71 ;
  assign WILL_FIRE_RL_rl_dmi_req_cpu = CAN_FIRE_RL_rl_dmi_req_cpu ;

  // rule RL_rl_dmi_rsp_cpu
  assign CAN_FIRE_RL_rl_dmi_rsp_cpu =
	     bus_dmi_rsp_fifof_cntr_r != 2'd2 &&
	     debug_module$RDY_dmi_read_data ;
  assign WILL_FIRE_RL_rl_dmi_rsp_cpu =
	     CAN_FIRE_RL_rl_dmi_rsp_cpu && !WILL_FIRE_RL_rl_dmi_req_cpu ;

  // rule RL_reset_rsp_rl
  assign CAN_FIRE_RL_reset_rsp_rl =
	     ff_rst_rsp$EMPTY_N &&
	     ff_which_rst_i_notEmpty__2_AND_IF_ff_which_rst_ETC___d97 ;
  assign WILL_FIRE_RL_reset_rsp_rl = CAN_FIRE_RL_reset_rsp_rl ;

  // rule RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_rl_dmi_req
  assign CAN_FIRE_RL_rl_dmi_req = 1'd1 ;
  assign WILL_FIRE_RL_rl_dmi_req = 1'd1 ;

  // rule RL_bus_dmi_req_do_enq
  assign CAN_FIRE_RL_bus_dmi_req_do_enq =
	     bus_dmi_req_fifof$FULL_N && jtagtap$dmi_req_valid ;
  assign WILL_FIRE_RL_bus_dmi_req_do_enq = CAN_FIRE_RL_bus_dmi_req_do_enq ;

  // rule RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_bus_dmi_rsp_do_deq
  assign CAN_FIRE_RL_bus_dmi_rsp_do_deq =
	     bus_dmi_rsp_fifof_cntr_r != 2'd0 && jtagtap$dmi_rsp_ready ;
  assign WILL_FIRE_RL_bus_dmi_rsp_do_deq = CAN_FIRE_RL_bus_dmi_rsp_do_deq ;

  // rule RL_bus_dmi_rsp_fifof_incCtr
  assign CAN_FIRE_RL_bus_dmi_rsp_fifof_incCtr =
	     bus_dmi_rsp_fifof_enqueueing$whas &&
	     bus_dmi_rsp_fifof_enqueueing$whas &&
	     !CAN_FIRE_RL_bus_dmi_rsp_do_deq ;
  assign WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr =
	     CAN_FIRE_RL_bus_dmi_rsp_fifof_incCtr ;

  // rule RL_bus_dmi_rsp_fifof_decCtr
  assign CAN_FIRE_RL_bus_dmi_rsp_fifof_decCtr =
	     CAN_FIRE_RL_bus_dmi_rsp_do_deq &&
	     !bus_dmi_rsp_fifof_enqueueing$whas ;
  assign WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr =
	     CAN_FIRE_RL_bus_dmi_rsp_fifof_decCtr ;

  // rule RL_bus_dmi_rsp_fifof_both
  assign CAN_FIRE_RL_bus_dmi_rsp_fifof_both =
	     bus_dmi_rsp_fifof_enqueueing$whas &&
	     CAN_FIRE_RL_bus_dmi_rsp_do_deq &&
	     bus_dmi_rsp_fifof_enqueueing$whas ;
  assign WILL_FIRE_RL_bus_dmi_rsp_fifof_both =
	     CAN_FIRE_RL_bus_dmi_rsp_fifof_both ;

  // rule RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf =
	     1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd0 ;
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo3 ;
  assign MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd1 ;
  assign MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo1 ;
  assign MUX_bus_dmi_rsp_fifof_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] != 2'd1 ;
  assign MUX_rg_busy$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_sb_rsp &&
	     (ff_dm_sys_rsp$D_OUT[1] || rg_sb_writes == 32'd1) ;
  assign MUX_rg_sb_writes$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_sbus_req &&
	     !debug_module$sb_client_request_get[67] ;
  assign MUX_bus_dmi_rsp_fifof_cntr_r$write_1__VAL_2 =
	     bus_dmi_rsp_fifof_cntr_r + 2'd1 ;
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 =
	     MUX_bus_dmi_rsp_fifof_x_wire$wset_1__SEL_1 ?
	       MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_1 :
	       MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_2 ;
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 =
	     (bus_dmi_rsp_fifof_cntr_r == 2'd1) ?
	       MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 :
	       bus_dmi_rsp_fifof_q_1 ;
  assign MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_2 =
	     (bus_dmi_rsp_fifof_cntr_r == 2'd2) ?
	       MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 :
	       34'd0 ;
  assign MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_1 =
	     { 32'hAAAAAAAA,
	       (bus_dmi_req_fifof$D_OUT[1:0] == 2'd2) ? 2'd0 : 2'd2 } ;
  assign MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_2 =
	     { debug_module$dmi_read_data, 2'd0 } ;
  assign MUX_ff_dm_sys_req$enq_1__VAL_1 =
	     { 3'd4, debug_module$sb_client_request_get } ;
  assign MUX_ff_dm_sys_req$enq_1__VAL_2 =
	     { 70'h02AAAAAAAAAAAAAAAA, ff_rst_req$D_OUT } ;
  assign MUX_ff_dm_sys_req$enq_1__VAL_3 =
	     { 70'h0AAAAAAAAAAAAAAAAA,
	       debug_module$hart0_hart_client_run_halt_request_get } ;
  assign MUX_ff_dm_sys_req$enq_1__VAL_4 =
	     { 33'h0AAAAAAAA,
	       debug_module$hart0_hart_gpr_mem_client_request_get } ;
  assign MUX_ff_dm_sys_req$enq_1__VAL_5 =
	     { 26'd27962026,
	       debug_module$hart0_hart_csr_mem_client_request_get } ;
  assign MUX_rg_sb_writes$write_1__VAL_1 = rg_sb_writes + 32'd1 ;
  assign MUX_rg_sb_writes$write_1__VAL_2 = rg_sb_writes - 32'd1 ;

  // inlined wires
  assign bus_dmi_rsp_fifof_enqueueing$whas =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] != 2'd1 ||
	     WILL_FIRE_RL_rl_dmi_rsp_cpu ;
  assign bus_dmi_req_data_wire$wget =
	     { jtagtap$dmi_req_addr,
	       jtagtap$dmi_req_data,
	       jtagtap$dmi_req_op } ;

  // register bus_dmi_rsp_fifof_cntr_r
  assign bus_dmi_rsp_fifof_cntr_r$D_IN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ?
	       bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 :
	       MUX_bus_dmi_rsp_fifof_cntr_r$write_1__VAL_2 ;
  assign bus_dmi_rsp_fifof_cntr_r$EN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr ;

  // register bus_dmi_rsp_fifof_q_0
  always@(MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr or bus_dmi_rsp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1:
	  bus_dmi_rsp_fifof_q_0$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1;
      MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2:
	  bus_dmi_rsp_fifof_q_0$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr:
	  bus_dmi_rsp_fifof_q_0$D_IN = bus_dmi_rsp_fifof_q_1;
      default: bus_dmi_rsp_fifof_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_dmi_rsp_fifof_q_0$EN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ;

  // register bus_dmi_rsp_fifof_q_1
  always@(MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 or
	  MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2 or
	  MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1:
	  bus_dmi_rsp_fifof_q_1$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1;
      MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2:
	  bus_dmi_rsp_fifof_q_1$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr:
	  bus_dmi_rsp_fifof_q_1$D_IN = 34'd0;
      default: bus_dmi_rsp_fifof_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_dmi_rsp_fifof_q_1$EN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ;

  // register rg_busy
  assign rg_busy$D_IN =
	     !WILL_FIRE_RL_rl_runhalt_rsp && !WILL_FIRE_RL_rl_rst_rsp &&
	     !WILL_FIRE_RL_rl_csr_rsp &&
	     !WILL_FIRE_RL_rl_gpr_rsp &&
	     !MUX_rg_busy$write_1__SEL_5 ;
  assign rg_busy$EN =
	     WILL_FIRE_RL_rl_sb_rsp &&
	     (ff_dm_sys_rsp$D_OUT[1] || rg_sb_writes == 32'd1) ||
	     WILL_FIRE_RL_rl_runhalt_rsp ||
	     WILL_FIRE_RL_rl_rst_rsp ||
	     WILL_FIRE_RL_rl_csr_rsp ||
	     WILL_FIRE_RL_rl_gpr_rsp ||
	     WILL_FIRE_RL_rl_runhalt_req ||
	     WILL_FIRE_RL_rl_reset_req ||
	     WILL_FIRE_RL_rl_csr_req ||
	     WILL_FIRE_RL_rl_gpr_req ||
	     WILL_FIRE_RL_rl_sbus_req ;

  // register rg_sb_writes
  assign rg_sb_writes$D_IN =
	     MUX_rg_sb_writes$write_1__SEL_1 ?
	       MUX_rg_sb_writes$write_1__VAL_1 :
	       MUX_rg_sb_writes$write_1__VAL_2 ;
  assign rg_sb_writes$EN =
	     WILL_FIRE_RL_rl_sbus_req &&
	     !debug_module$sb_client_request_get[67] ||
	     WILL_FIRE_RL_rl_sb_rsp && !ff_dm_sys_rsp$D_OUT[1] ;

  // submodule bus_dmi_req_fifof
  assign bus_dmi_req_fifof$D_IN = bus_dmi_req_data_wire$wget ;
  assign bus_dmi_req_fifof$ENQ = CAN_FIRE_RL_bus_dmi_req_do_enq ;
  assign bus_dmi_req_fifof$DEQ = CAN_FIRE_RL_rl_dmi_req_cpu ;
  assign bus_dmi_req_fifof$CLR = 1'b0 ;

  // submodule debug_module
  assign debug_module$dmi_read_addr_dm_addr = bus_dmi_req_fifof$D_OUT[40:34] ;
  assign debug_module$dmi_write_dm_addr = bus_dmi_req_fifof$D_OUT[40:34] ;
  assign debug_module$dmi_write_dm_word = bus_dmi_req_fifof$D_OUT[33:2] ;
  assign debug_module$hart0_hart_client_run_halt_response_put =
	     ff_dm_sys_rsp$D_OUT[0] ;
  assign debug_module$hart0_hart_csr_mem_client_response_put =
	     ff_dm_sys_rsp$D_OUT[32:0] ;
  assign debug_module$hart0_hart_gpr_mem_client_response_put =
	     ff_dm_sys_rsp$D_OUT[32:0] ;
  assign debug_module$hart0_hart_reset_client_response_put =
	     ff_rst_rsp$D_OUT ;
  assign debug_module$ndm_reset_client_response_put = ff_rst_rsp$D_OUT ;
  assign debug_module$sb_client_response_put = ff_dm_sys_rsp$D_OUT[33:0] ;
  assign debug_module$EN_dmi_read_addr =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] == 2'd1 ;
  assign debug_module$EN_dmi_read_data = WILL_FIRE_RL_rl_dmi_rsp_cpu ;
  assign debug_module$EN_dmi_write =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] == 2'd2 ;
  assign debug_module$EN_hart0_hart_reset_client_request_get =
	     CAN_FIRE_RL_hart_reset_rl ;
  assign debug_module$EN_hart0_hart_reset_client_response_put =
	     WILL_FIRE_RL_reset_rsp_rl && !ff_which_rst$D_OUT ;
  assign debug_module$EN_hart0_hart_client_run_halt_request_get =
	     WILL_FIRE_RL_rl_runhalt_req ;
  assign debug_module$EN_hart0_hart_client_run_halt_response_put =
	     CAN_FIRE_RL_rl_runhalt_rsp ;
  assign debug_module$EN_hart0_hart_get_other_req_get = 1'b0 ;
  assign debug_module$EN_hart0_hart_gpr_mem_client_request_get =
	     WILL_FIRE_RL_rl_gpr_req ;
  assign debug_module$EN_hart0_hart_gpr_mem_client_response_put =
	     CAN_FIRE_RL_rl_gpr_rsp ;
  assign debug_module$EN_hart0_hart_csr_mem_client_request_get =
	     WILL_FIRE_RL_rl_csr_req ;
  assign debug_module$EN_hart0_hart_csr_mem_client_response_put =
	     CAN_FIRE_RL_rl_csr_rsp ;
  assign debug_module$EN_ndm_reset_client_request_get =
	     WILL_FIRE_RL_ndm_reset_rl ;
  assign debug_module$EN_ndm_reset_client_response_put =
	     WILL_FIRE_RL_reset_rsp_rl && ff_which_rst$D_OUT ;
  assign debug_module$EN_sb_client_request_get = CAN_FIRE_RL_rl_sbus_req ;
  assign debug_module$EN_sb_client_response_put = WILL_FIRE_RL_rl_sb_rsp ;

  // submodule ff_dm_sys_req
  always@(WILL_FIRE_RL_rl_sbus_req or
	  MUX_ff_dm_sys_req$enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_reset_req or
	  MUX_ff_dm_sys_req$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_runhalt_req or
	  MUX_ff_dm_sys_req$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_gpr_req or
	  MUX_ff_dm_sys_req$enq_1__VAL_4 or
	  WILL_FIRE_RL_rl_csr_req or MUX_ff_dm_sys_req$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_sbus_req:
	  ff_dm_sys_req$D_IN = MUX_ff_dm_sys_req$enq_1__VAL_1;
      WILL_FIRE_RL_rl_reset_req:
	  ff_dm_sys_req$D_IN = MUX_ff_dm_sys_req$enq_1__VAL_2;
      WILL_FIRE_RL_rl_runhalt_req:
	  ff_dm_sys_req$D_IN = MUX_ff_dm_sys_req$enq_1__VAL_3;
      WILL_FIRE_RL_rl_gpr_req:
	  ff_dm_sys_req$D_IN = MUX_ff_dm_sys_req$enq_1__VAL_4;
      WILL_FIRE_RL_rl_csr_req:
	  ff_dm_sys_req$D_IN = MUX_ff_dm_sys_req$enq_1__VAL_5;
      default: ff_dm_sys_req$D_IN =
		   71'h2AAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ff_dm_sys_req$ENQ =
	     WILL_FIRE_RL_rl_sbus_req || WILL_FIRE_RL_rl_reset_req ||
	     WILL_FIRE_RL_rl_runhalt_req ||
	     WILL_FIRE_RL_rl_gpr_req ||
	     WILL_FIRE_RL_rl_csr_req ;
  assign ff_dm_sys_req$DEQ = EN_toCore_request_get ;
  assign ff_dm_sys_req$CLR = 1'b0 ;

  // submodule ff_dm_sys_rsp
  assign ff_dm_sys_rsp$D_IN = toCore_response_put ;
  assign ff_dm_sys_rsp$ENQ = EN_toCore_response_put ;
  assign ff_dm_sys_rsp$DEQ =
	     WILL_FIRE_RL_rl_runhalt_rsp || WILL_FIRE_RL_rl_rst_rsp ||
	     WILL_FIRE_RL_rl_csr_rsp ||
	     WILL_FIRE_RL_rl_gpr_rsp ||
	     WILL_FIRE_RL_rl_sb_rsp ;
  assign ff_dm_sys_rsp$CLR = 1'b0 ;

  // submodule ff_rst_req
  assign ff_rst_req$D_IN =
	     WILL_FIRE_RL_hart_reset_rl ?
	       debug_module$hart0_hart_reset_client_request_get :
	       debug_module$ndm_reset_client_request_get ;
  assign ff_rst_req$ENQ =
	     WILL_FIRE_RL_hart_reset_rl || WILL_FIRE_RL_ndm_reset_rl ;
  assign ff_rst_req$DEQ = WILL_FIRE_RL_rl_reset_req ;
  assign ff_rst_req$CLR = 1'b0 ;

  // submodule ff_rst_rsp
  assign ff_rst_rsp$D_IN = ff_dm_sys_rsp$D_OUT[0] ;
  assign ff_rst_rsp$ENQ = CAN_FIRE_RL_rl_rst_rsp ;
  assign ff_rst_rsp$DEQ = CAN_FIRE_RL_reset_rsp_rl ;
  assign ff_rst_rsp$CLR = 1'b0 ;

  // submodule ff_which_rst
  assign ff_which_rst$D_IN = !WILL_FIRE_RL_hart_reset_rl ;
  assign ff_which_rst$ENQ =
	     WILL_FIRE_RL_hart_reset_rl || WILL_FIRE_RL_ndm_reset_rl ;
  assign ff_which_rst$DEQ = CAN_FIRE_RL_reset_rsp_rl ;
  assign ff_which_rst$CLR = 1'b0 ;

  // submodule jtagtap
  assign jtagtap$dmi_req_ready = bus_dmi_req_fifof$FULL_N ;
  assign jtagtap$dmi_rsp_data = bus_dmi_rsp_fifof_q_0[33:2] ;
  assign jtagtap$dmi_rsp_response = bus_dmi_rsp_fifof_q_0[1:0] ;
  assign jtagtap$dmi_rsp_valid = bus_dmi_rsp_fifof_cntr_r != 2'd0 ;
  assign jtagtap$jtag_TCK = jtag_TCK ;
  assign jtagtap$jtag_TDI = jtag_TDI ;
  assign jtagtap$jtag_TMS = jtag_TMS ;

  // submodule resetIfc
  assign resetIfc$ASSERT_IN = WILL_FIRE_RL_ndm_reset_rl ;

  // remaining internal signals
  assign IF_bus_dmi_req_fifof_first__0_BITS_1_TO_0_1_EQ_ETC___d71 =
	     (bus_dmi_req_fifof$D_OUT[1:0] == 2'd1) ?
	       debug_module$RDY_dmi_read_addr :
	       (bus_dmi_req_fifof$D_OUT[1:0] == 2'd2 ||
		bus_dmi_rsp_fifof_cntr_r != 2'd2) &&
	       (bus_dmi_req_fifof$D_OUT[1:0] != 2'd2 ||
		bus_dmi_rsp_fifof_cntr_r != 2'd2 &&
		debug_module$RDY_dmi_write) ;
  assign _dfoo1 =
	     bus_dmi_rsp_fifof_cntr_r != 2'd2 ||
	     bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 == 2'd1 ;
  assign _dfoo3 =
	     bus_dmi_rsp_fifof_cntr_r != 2'd1 ||
	     bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 == 2'd0 ;
  assign bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 =
	     bus_dmi_rsp_fifof_cntr_r - 2'd1 ;
  assign ff_which_rst_i_notEmpty__2_AND_IF_ff_which_rst_ETC___d97 =
	     ff_which_rst$EMPTY_N &&
	     (ff_which_rst$D_OUT ?
		debug_module$RDY_ndm_reset_client_response_put :
		debug_module$RDY_hart0_hart_reset_client_response_put) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sb_writes <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rg_busy$EN) rg_busy <= `BSV_ASSIGNMENT_DELAY rg_busy$D_IN;
	if (rg_sb_writes$EN)
	  rg_sb_writes <= `BSV_ASSIGNMENT_DELAY rg_sb_writes$D_IN;
      end
    if (dmi_resetN$RESET_OUT == `BSV_RESET_VALUE)
      begin
        bus_dmi_rsp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_dmi_rsp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	bus_dmi_rsp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
      end
    else
      begin
        if (bus_dmi_rsp_fifof_cntr_r$EN)
	  bus_dmi_rsp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      bus_dmi_rsp_fifof_cntr_r$D_IN;
	if (bus_dmi_rsp_fifof_q_0$EN)
	  bus_dmi_rsp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      bus_dmi_rsp_fifof_q_0$D_IN;
	if (bus_dmi_rsp_fifof_q_1$EN)
	  bus_dmi_rsp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_dmi_rsp_fifof_q_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bus_dmi_rsp_fifof_cntr_r = 2'h2;
    bus_dmi_rsp_fifof_q_0 = 34'h2AAAAAAAA;
    bus_dmi_rsp_fifof_q_1 = 34'h2AAAAAAAA;
    rg_busy = 1'h0;
    rg_sb_writes = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sbus_req && WILL_FIRE_RL_rl_csr_req)
	$display("Error: \"../Debug_Module/src/BSDebug.bsv\", line 175, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_sbus_req] and\n  [RL_rl_csr_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sbus_req && WILL_FIRE_RL_rl_gpr_req)
	$display("Error: \"../Debug_Module/src/BSDebug.bsv\", line 175, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_sbus_req] and\n  [RL_rl_gpr_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_gpr_req && WILL_FIRE_RL_rl_csr_req)
	$display("Error: \"../Debug_Module/src/BSDebug.bsv\", line 175, column 42: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_gpr_req] and\n  [RL_rl_csr_req] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkBSDebug

