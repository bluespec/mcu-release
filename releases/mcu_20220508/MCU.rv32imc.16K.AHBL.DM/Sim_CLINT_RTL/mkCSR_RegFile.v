//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    33
// mav_csr_write                  O    65
// read_mstatus                   O    32
// csr_trap_actions               O    32
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O    32
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_misa                      O    28 const
// read_csr_mtime                 O    64 reg
// access_permitted               O     1
// csr_mip_read                   O    32
// interrupt_pending              O     5
// wfi_resume                     O     1
// read_dpc                       O    32 reg
// RDY_read_dpc                   O     1 const
// RDY_write_dpc                  O     1 const
// dcsr_break_enters_debug        O     1
// RDY_dcsr_break_enters_debug    O     1 const
// read_dcsr_step                 O     1 reg
// RDY_read_dcsr_step             O     1 const
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    32
// csr_trap_actions_pc            I    32
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_exc_code      I     4
// csr_trap_actions_xtval         I    32
// access_permitted_csr_addr      I    12
// access_permitted_read_not_write  I     1 unused
// m_external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// write_dpc_pc                   I    32
// dcsr_break_enters_debug_cur_priv  I     2
// write_dcsr_cause_priv_cause    I     3
// write_dcsr_cause_priv_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_csr_minstret_incr           I     1
// EN_write_dpc                   I     1
// EN_write_dcsr_cause_priv       I     1
// EN_debug                       I     1 unused
// EN_mav_csr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   (access_permitted_csr_addr,
//    access_permitted_read_not_write) -> access_permitted
//   dcsr_break_enters_debug_cur_priv -> dcsr_break_enters_debug
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (csr_trap_actions_interrupt, csr_trap_actions_exc_code) -> csr_trap_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     read_mstatus,

		     csr_trap_actions_pc,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_misa,

		     read_csr_mtime,

		     access_permitted_csr_addr,
		     access_permitted_read_not_write,
		     access_permitted,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,

		     timer_interrupt_req_set_not_clear,

		     software_interrupt_req_set_not_clear,

		     interrupt_pending,

		     wfi_resume,

		     read_dpc,
		     RDY_read_dpc,

		     write_dpc_pc,
		     EN_write_dpc,
		     RDY_write_dpc,

		     dcsr_break_enters_debug_cur_priv,
		     dcsr_break_enters_debug,
		     RDY_dcsr_break_enters_debug,

		     read_dcsr_step,
		     RDY_read_dcsr_step,

		     write_dcsr_cause_priv_cause,
		     write_dcsr_cause_priv_priv,
		     EN_write_dcsr_cause_priv,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [32 : 0] read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [31 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [64 : 0] mav_csr_write;

  // value method read_mstatus
  output [31 : 0] read_mstatus;

  // actionvalue method csr_trap_actions
  input  [31 : 0] csr_trap_actions_pc;
  input  csr_trap_actions_interrupt;
  input  [3 : 0] csr_trap_actions_exc_code;
  input  [31 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [31 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  EN_csr_ret_actions;
  output [31 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method access_permitted
  input  [11 : 0] access_permitted_csr_addr;
  input  access_permitted_read_not_write;
  output access_permitted;

  // value method csr_mip_read
  output [31 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // value method interrupt_pending
  output [4 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // value method read_dpc
  output [31 : 0] read_dpc;
  output RDY_read_dpc;

  // action method write_dpc
  input  [31 : 0] write_dpc_pc;
  input  EN_write_dpc;
  output RDY_write_dpc;

  // value method dcsr_break_enters_debug
  input  [1 : 0] dcsr_break_enters_debug_cur_priv;
  output dcsr_break_enters_debug;
  output RDY_dcsr_break_enters_debug;

  // value method read_dcsr_step
  output read_dcsr_step;
  output RDY_read_dcsr_step;

  // action method write_dcsr_cause_priv
  input  [2 : 0] write_dcsr_cause_priv_cause;
  input  [1 : 0] write_dcsr_cause_priv_priv;
  input  EN_write_dcsr_cause_priv;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  reg dcsr_break_enters_debug;
  wire [64 : 0] mav_csr_write;
  wire [63 : 0] read_csr_mcycle, read_csr_minstret, read_csr_mtime;
  wire [32 : 0] read_csr;
  wire [31 : 0] csr_mip_read,
		csr_ret_actions,
		csr_trap_actions,
		read_dpc,
		read_mstatus;
  wire [27 : 0] read_misa;
  wire [4 : 0] interrupt_pending;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_dcsr_break_enters_debug,
       RDY_debug,
       RDY_read_dcsr_step,
       RDY_read_dpc,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_write_dpc,
       access_permitted,
       read_dcsr_step,
       wfi_resume;

  // register csr_mstatus_rg_mie
  reg csr_mstatus_rg_mie;
  reg csr_mstatus_rg_mie$D_IN;
  wire csr_mstatus_rg_mie$EN;

  // register csr_mstatus_rg_mpie
  reg csr_mstatus_rg_mpie;
  reg csr_mstatus_rg_mpie$D_IN;
  wire csr_mstatus_rg_mpie$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  reg [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpc
  reg [31 : 0] rg_dpc;
  reg [31 : 0] rg_dpc$D_IN;
  wire rg_dpc$EN;

  // register rg_dscratch0
  reg [31 : 0] rg_dscratch0;
  wire [31 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [31 : 0] rg_dscratch1;
  wire [31 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_mcause
  reg [4 : 0] rg_mcause;
  reg [4 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_mepc
  reg [31 : 0] rg_mepc;
  wire [31 : 0] rg_mepc$D_IN;
  wire rg_mepc$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [31 : 0] rg_mscratch;
  wire [31 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mtval
  reg [31 : 0] rg_mtval;
  wire [31 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_mtvec
  reg [30 : 0] rg_mtvec;
  wire [30 : 0] rg_mtvec$D_IN;
  wire rg_mtvec$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // ports of submodule addr_map
  wire [31 : 0] addr_map$m_is_dtcm_addr_addr,
		addr_map$m_is_itcm_addr_addr,
		addr_map$m_mtvec_reset_value,
		addr_map$m_pc_reset_value;

  // ports of submodule csr_mie
  wire [31 : 0] csr_mie$mav_write, csr_mie$mv_read;
  wire [2 : 0] csr_mie$mav_write_mie;
  wire csr_mie$EN_mav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [31 : 0] csr_mip$mv_read;
  wire csr_mip$EN_reset,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$m_software_interrupt_req_req,
       csr_mip$m_timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_dcsr_cause_priv,
       CAN_FIRE_write_dpc,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_dcsr_cause_priv,
       WILL_FIRE_write_dpc;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2,
		MUX_rw_minstret$wset_1__VAL_1;
  wire [31 : 0] MUX_rg_dcsr$write_1__VAL_3;
  wire [30 : 0] MUX_rg_mtvec$write_1__VAL_1, MUX_rg_mtvec$write_1__VAL_2;
  wire [4 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire MUX_csr_mstatus_rg_mie$write_1__SEL_2,
       MUX_rg_dcsr$write_1__SEL_2,
       MUX_rg_dpc$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mepc$write_1__SEL_1,
       MUX_rg_mtval$write_1__SEL_1,
       MUX_rg_mtvec$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97,
	       x__h2237;
  wire [63 : 0] x__h3146, x__h3242;
  wire [31 : 0] exc_pc___1__h4096,
		exc_pc__h3976,
		new_csr_value__h2705,
		new_dcsr__h3281,
		v__h2338,
		v__h2593,
		v__h2755,
		vector_offset__h4072,
		x_mv_read__h363;
  wire [7 : 0] new_mstatus__h2112, x__h2456;
  wire [4 : 0] IF_NOT_csr_mip_mv_read__9_BIT_11_26_27_OR_NOT__ETC___d249;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr == 12'h301 || read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'hB80 ||
	       read_csr_csr_addr == 12'hB82 ||
	       read_csr_csr_addr == 12'h7B0 ||
	       read_csr_csr_addr == 12'h7B1 ||
	       read_csr_csr_addr == 12'h7B2 ||
	       read_csr_csr_addr == 12'h7B3,
	       IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 } ;

  // actionvalue method mav_csr_write
  assign mav_csr_write = { x__h2237, 33'h0AAAAAAAA } ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // value method read_mstatus
  assign read_mstatus = { 24'd0, new_mstatus__h2112 } ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     (csr_trap_actions_interrupt && rg_mtvec[0]) ?
	       exc_pc___1__h4096 :
	       exc_pc__h3976 ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions = { rg_mepc[31:1], 1'd0 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_misa
  assign read_misa = 28'd67113220 ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method access_permitted
  assign access_permitted =
	     access_permitted_csr_addr == 12'h300 ||
	     access_permitted_csr_addr == 12'h304 ||
	     access_permitted_csr_addr == 12'h305 ||
	     access_permitted_csr_addr == 12'h341 ||
	     access_permitted_csr_addr == 12'h340 ||
	     access_permitted_csr_addr == 12'h342 ||
	     access_permitted_csr_addr == 12'h343 ||
	     access_permitted_csr_addr == 12'h344 ||
	     access_permitted_csr_addr == 12'hB00 ||
	     access_permitted_csr_addr == 12'hB02 ||
	     access_permitted_csr_addr == 12'hB80 ||
	     access_permitted_csr_addr == 12'hB82 ||
	     access_permitted_csr_addr == 12'h7B0 ||
	     access_permitted_csr_addr == 12'h7B1 ||
	     access_permitted_csr_addr == 12'h7B2 ||
	     access_permitted_csr_addr == 12'h7B3 ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$mv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // value method interrupt_pending
  assign interrupt_pending =
	     ((!csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	       !csr_mstatus_rg_mie) &&
	      (!csr_mip$mv_read[3] || !csr_mie$mv_read[3] ||
	       !csr_mstatus_rg_mie)) ?
	       { csr_mip$mv_read[7] && csr_mie$mv_read[7] &&
		 csr_mstatus_rg_mie,
		 4'd7 } :
	       IF_NOT_csr_mip_mv_read__9_BIT_11_26_27_OR_NOT__ETC___d249 ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$mv_read & csr_mie$mv_read) != 32'd0 ;

  // value method read_dpc
  assign read_dpc = rg_dpc ;
  assign RDY_read_dpc = 1'd1 ;

  // action method write_dpc
  assign RDY_write_dpc = 1'd1 ;
  assign CAN_FIRE_write_dpc = 1'd1 ;
  assign WILL_FIRE_write_dpc = EN_write_dpc ;

  // value method dcsr_break_enters_debug
  always@(dcsr_break_enters_debug_cur_priv or rg_dcsr)
  begin
    case (dcsr_break_enters_debug_cur_priv)
      2'b01: dcsr_break_enters_debug = rg_dcsr[13];
      2'b11: dcsr_break_enters_debug = rg_dcsr[15];
      default: dcsr_break_enters_debug = rg_dcsr[12];
    endcase
  end
  assign RDY_dcsr_break_enters_debug = 1'd1 ;

  // value method read_dcsr_step
  assign read_dcsr_step = rg_dcsr[2] ;
  assign RDY_read_dcsr_step = 1'd1 ;

  // action method write_dcsr_cause_priv
  assign CAN_FIRE_write_dcsr_cause_priv = 1'd1 ;
  assign WILL_FIRE_write_dcsr_cause_priv = EN_write_dcsr_cause_priv ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule addr_map
  mkCore_Map addr_map(.CLK(CLK),
		      .RST_N(RST_N),
		      .m_is_dtcm_addr_addr(addr_map$m_is_dtcm_addr_addr),
		      .m_is_itcm_addr_addr(addr_map$m_is_itcm_addr_addr),
		      .m_itcm_addr_base(),
		      .m_itcm_addr_size(),
		      .m_itcm_addr_lim(),
		      .m_is_itcm_addr(),
		      .m_dtcm_addr_base(),
		      .m_dtcm_addr_size(),
		      .m_dtcm_addr_lim(),
		      .m_is_dtcm_addr(),
		      .m_pc_reset_value(addr_map$m_pc_reset_value),
		      .m_mtvec_reset_value(addr_map$m_mtvec_reset_value));

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_write_mie(csr_mie$mav_write_mie),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_mav_write(csr_mie$EN_mav_write),
		    .mv_read(csr_mie$mv_read),
		    .mav_write(csr_mie$mav_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .m_software_interrupt_req_req(csr_mip$m_software_interrupt_req_req),
		    .m_timer_interrupt_req_req(csr_mip$m_timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .mv_read(csr_mip$mv_read));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mie$write_1__SEL_2 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h300 ;
  assign MUX_rg_dcsr$write_1__SEL_2 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h7B0 ;
  assign MUX_rg_dpc$write_1__SEL_2 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h7B1 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h342 ;
  assign MUX_rg_mepc$write_1__SEL_1 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h341 ;
  assign MUX_rg_mtval$write_1__SEL_1 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h343 ;
  assign MUX_rg_mtvec$write_1__SEL_1 =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h305 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     (mav_csr_write_csr_addr == 12'hB02 ||
	      mav_csr_write_csr_addr == 12'hB82) ;
  assign MUX_rg_dcsr$write_1__VAL_3 =
	     { rg_dcsr[31:9],
	       write_dcsr_cause_priv_cause,
	       rg_dcsr[5:2],
	       write_dcsr_cause_priv_priv } ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { mav_csr_write_word[31], mav_csr_write_word[3:0] } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { csr_trap_actions_interrupt, csr_trap_actions_exc_code } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ?
	       MUX_rw_minstret$wset_1__VAL_1 :
	       64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtvec$write_1__VAL_1 =
	     { mav_csr_write_word[31:2], mav_csr_write_word[0] } ;
  assign MUX_rg_mtvec$write_1__VAL_2 =
	     { addr_map$m_mtvec_reset_value[31:2],
	       addr_map$m_mtvec_reset_value[0] } ;
  assign MUX_rw_minstret$wset_1__VAL_1 =
	     (mav_csr_write_csr_addr == 12'hB02) ? x__h3146 : x__h3242 ;

  // register csr_mstatus_rg_mie
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_mstatus_rg_mie$write_1__SEL_2 or
	  mav_csr_write_word or
	  EN_csr_ret_actions or csr_mstatus_rg_mpie or EN_csr_trap_actions)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: csr_mstatus_rg_mie$D_IN = 1'b0;
    MUX_csr_mstatus_rg_mie$write_1__SEL_2:
	csr_mstatus_rg_mie$D_IN = mav_csr_write_word[3];
    EN_csr_ret_actions: csr_mstatus_rg_mie$D_IN = csr_mstatus_rg_mpie;
    EN_csr_trap_actions: csr_mstatus_rg_mie$D_IN = 1'b0;
    default: csr_mstatus_rg_mie$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mie$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h300 ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ||
	     EN_csr_trap_actions ;

  // register csr_mstatus_rg_mpie
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_mstatus_rg_mie$write_1__SEL_2 or
	  mav_csr_write_word or
	  EN_csr_ret_actions or EN_csr_trap_actions or csr_mstatus_rg_mie)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: csr_mstatus_rg_mpie$D_IN = 1'b0;
    MUX_csr_mstatus_rg_mie$write_1__SEL_2:
	csr_mstatus_rg_mpie$D_IN = mav_csr_write_word[7];
    EN_csr_ret_actions: csr_mstatus_rg_mpie$D_IN = 1'b0;
    EN_csr_trap_actions: csr_mstatus_rg_mpie$D_IN = csr_mstatus_rg_mie;
    default: csr_mstatus_rg_mpie$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mpie$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h300 ||
	     EN_csr_trap_actions ||
	     WILL_FIRE_RL_rl_reset_start ||
	     EN_csr_ret_actions ;

  // register rg_dcsr
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dcsr$write_1__SEL_2 or
	  new_dcsr__h3281 or
	  EN_write_dcsr_cause_priv or MUX_rg_dcsr$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dcsr$D_IN = 32'd1073741843;
    MUX_rg_dcsr$write_1__SEL_2: rg_dcsr$D_IN = new_dcsr__h3281;
    EN_write_dcsr_cause_priv: rg_dcsr$D_IN = MUX_rg_dcsr$write_1__VAL_3;
    default: rg_dcsr$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_dcsr$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h7B0 ||
	     EN_write_dcsr_cause_priv ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dpc
  always@(WILL_FIRE_RL_rl_reset_start or
	  addr_map$m_pc_reset_value or
	  MUX_rg_dpc$write_1__SEL_2 or
	  mav_csr_write_word or EN_write_dpc or write_dpc_pc)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dpc$D_IN = addr_map$m_pc_reset_value;
    MUX_rg_dpc$write_1__SEL_2: rg_dpc$D_IN = mav_csr_write_word;
    EN_write_dpc: rg_dpc$D_IN = write_dpc_pc;
    default: rg_dpc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_dpc$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h7B1 ||
	     EN_write_dpc ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = mav_csr_write_word ;
  assign rg_dscratch0$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h7B2 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = mav_csr_write_word ;
  assign rg_dscratch1$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h7B3 ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  EN_csr_trap_actions or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 5'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    EN_csr_trap_actions: rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h342 ||
	     EN_csr_trap_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rg_mcycle + 64'd1 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_mepc
  assign rg_mepc$D_IN =
	     MUX_rg_mepc$write_1__SEL_1 ?
	       new_csr_value__h2705 :
	       csr_trap_actions_pc ;
  assign rg_mepc$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h341 ||
	     EN_csr_trap_actions ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h340 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mtval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       csr_trap_actions_xtval ;
  assign rg_mtval$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h343 ||
	     EN_csr_trap_actions ;

  // register rg_mtvec
  assign rg_mtvec$D_IN =
	     MUX_rg_mtvec$write_1__SEL_1 ?
	       MUX_rg_mtvec$write_1__VAL_1 :
	       MUX_rg_mtvec$write_1__VAL_2 ;
  assign rg_mtvec$EN =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h305 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // submodule addr_map
  assign addr_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign addr_map$m_is_itcm_addr_addr = 32'h0 ;

  // submodule csr_mie
  assign csr_mie$mav_write_mie =
	     { mav_csr_write_word[11],
	       mav_csr_write_word[7],
	       mav_csr_write_word[3] } ;
  assign csr_mie$EN_reset = MUX_rg_state$write_1__SEL_2 ;
  assign csr_mie$EN_mav_write =
	     EN_mav_csr_write && mav_csr_write_csr_addr == 12'h304 ;

  // submodule csr_mip
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$m_software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$m_timer_interrupt_req_req =
	     timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = MUX_rg_state$write_1__SEL_2 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_csr_mip_mv_read__9_BIT_11_26_27_OR_NOT__ETC___d249 =
	     (!csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	      !csr_mstatus_rg_mie) ?
	       { csr_mip$mv_read[3] && csr_mie$mv_read[3] &&
		 csr_mstatus_rg_mie,
		 4'd3 } :
	       { csr_mip$mv_read[11], 4'd11 } ;
  assign exc_pc___1__h4096 = exc_pc__h3976 + vector_offset__h4072 ;
  assign exc_pc__h3976 = { rg_mtvec[30:1], 2'd0 } ;
  assign new_csr_value__h2705 = { mav_csr_write_word[31:2], 2'd0 } ;
  assign new_dcsr__h3281 =
	     { rg_dcsr[31:16],
	       mav_csr_write_word[15:9],
	       rg_dcsr[8:5],
	       mav_csr_write_word[4],
	       rg_dcsr[3],
	       mav_csr_write_word[2:0] } ;
  assign new_mstatus__h2112 =
	     { csr_mstatus_rg_mpie, 3'b0, csr_mstatus_rg_mie, 3'b0 } ;
  assign v__h2338 = { 24'd0, x__h2456 } ;
  assign v__h2593 =
	     { mav_csr_write_word[31:2], 1'b0, mav_csr_write_word[0] } ;
  assign v__h2755 =
	     { mav_csr_write_word[31], 27'd0, mav_csr_write_word[3:0] } ;
  assign vector_offset__h4072 = { 26'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign x__h2456 =
	     { mav_csr_write_word[7], 3'b0, mav_csr_write_word[3], 3'b0 } ;
  assign x__h3146 = { rg_minstret[63:32], mav_csr_write_word } ;
  assign x__h3242 = { mav_csr_write_word, rg_minstret[31:0] } ;
  assign x_mv_read__h363 = { 24'd0, new_mstatus__h2112 } ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  v__h2338 or
	  csr_mie$mav_write or
	  v__h2593 or new_csr_value__h2705 or v__h2755 or new_dcsr__h3281)
  begin
    case (mav_csr_write_csr_addr)
      12'h300: x__h2237 = v__h2338;
      12'h304: x__h2237 = csr_mie$mav_write;
      12'h305: x__h2237 = v__h2593;
      12'h340, 12'h343, 12'hB00, 12'hB02, 12'hB80, 12'hB82:
	  x__h2237 = mav_csr_write_word;
      12'h341: x__h2237 = new_csr_value__h2705;
      12'h342: x__h2237 = v__h2755;
      12'h7B0: x__h2237 = new_dcsr__h3281;
      default: x__h2237 = mav_csr_write_word;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_dscratch1 or
	  x_mv_read__h363 or
	  csr_mie$mv_read or
	  rg_mtvec or
	  rg_mscratch or
	  rg_mepc or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_dcsr or rg_dpc or rg_dscratch0 or rg_mcycle or rg_minstret)
  begin
    case (read_csr_csr_addr)
      12'h300:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      x_mv_read__h363;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      32'd1073746180;
      12'h304:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      { rg_mtvec[30:1], 1'b0, rg_mtvec[0] };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 = rg_mepc;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      { rg_mcause[4], 27'd0, rg_mcause[3:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 = rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      csr_mip$mv_read;
      12'h7B0:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      { rg_dcsr[31:4], 1'd0, rg_dcsr[2:0] };
      12'h7B1:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 = rg_dpc;
      12'h7B2:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      rg_dscratch0;
      12'hB00:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      rg_mcycle[31:0];
      12'hB02:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      rg_minstret[31:0];
      12'hB80:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      rg_mcycle[63:32];
      12'hB82:
	  IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
	      rg_minstret[63:32];
      default: IF_read_csr_csr_addr_EQ_0x301_9_THEN_107374618_ETC___d97 =
		   rg_dscratch1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        csr_mstatus_rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csr_mstatus_rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (csr_mstatus_rg_mie$EN)
	  csr_mstatus_rg_mie <= `BSV_ASSIGNMENT_DELAY csr_mstatus_rg_mie$D_IN;
	if (csr_mstatus_rg_mpie$EN)
	  csr_mstatus_rg_mpie <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mpie$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dpc$EN) rg_dpc <= `BSV_ASSIGNMENT_DELAY rg_dpc$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mepc$EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_mtvec$EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    csr_mstatus_rg_mie = 1'h0;
    csr_mstatus_rg_mpie = 1'h0;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpc = 32'hAAAAAAAA;
    rg_dscratch0 = 32'hAAAAAAAA;
    rg_dscratch1 = 32'hAAAAAAAA;
    rg_mcause = 5'h0A;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_mepc = 32'hAAAAAAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 32'hAAAAAAAA;
    rg_mtval = 32'hAAAAAAAA;
    rg_mtvec = 31'h2AAAAAAA;
    rg_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", x_mv_read__h363);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$mv_read);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

