//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// master1_HADDR                  O    32 reg
// master1_HBURST                 O     3 const
// master1_HMASTLOCK              O     1 const
// master1_HPROT                  O     4 const
// master1_HSIZE                  O     3 reg
// master1_HTRANS                 O     2 reg
// master1_HWDATA                 O    32 reg
// master1_HWRITE                 O     1 reg
// RDY_debug_request_put          O     1 reg
// debug_response_get             O    37
// RDY_debug_response_get         O     1 reg
// dma_server_awready             O     1 reg
// dma_server_wready              O     1 reg
// dma_server_bvalid              O     1 reg
// dma_server_bid                 O     4 reg
// dma_server_bresp               O     2 reg
// dma_server_arready             O     1 reg
// dma_server_rvalid              O     1 reg
// dma_server_rid                 O     4 reg
// dma_server_rdata               O    32 reg
// dma_server_rresp               O     2 reg
// dma_server_rlast               O     1 reg
// reset_done                     O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master1_HRDATA                 I    32 reg
// master1_HREADY                 I     1
// master1_HRESP                  I     1
// ext_interrupt                  I     1 reg
// sw_interrupt                   I     1 reg
// timer_interrupt                I     1 reg
// debug_request_put              I    71 reg
// dma_server_awvalid             I     1
// dma_server_awid                I     4 reg
// dma_server_awaddr              I    32 reg
// dma_server_awlen               I     8 reg
// dma_server_awsize              I     3 reg
// dma_server_awburst             I     2 reg
// dma_server_awlock              I     1 reg
// dma_server_awcache             I     4 reg
// dma_server_awprot              I     3 reg
// dma_server_awqos               I     4 reg
// dma_server_awregion            I     4 reg
// dma_server_wvalid              I     1
// dma_server_wdata               I    32 reg
// dma_server_wstrb               I     4 reg
// dma_server_wlast               I     1 reg
// dma_server_bready              I     1
// dma_server_arvalid             I     1
// dma_server_arid                I     4 reg
// dma_server_araddr              I    32 reg
// dma_server_arlen               I     8 reg
// dma_server_arsize              I     3 reg
// dma_server_arburst             I     2 reg
// dma_server_arlock              I     1 reg
// dma_server_arcache             I     4 reg
// dma_server_arprot              I     3 reg
// dma_server_arqos               I     4 reg
// dma_server_arregion            I     4 reg
// dma_server_rready              I     1
// cpu_halt_x                     I     1
// EN_debug_request_put           I     1
// EN_debug_response_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBSCore(CLK,
		RST_N,

		master1_HADDR,

		master1_HBURST,

		master1_HMASTLOCK,

		master1_HPROT,

		master1_HSIZE,

		master1_HTRANS,

		master1_HWDATA,

		master1_HWRITE,

		master1_HRDATA,

		master1_HREADY,

		master1_HRESP,

		ext_interrupt,

		sw_interrupt,

		timer_interrupt,

		debug_request_put,
		EN_debug_request_put,
		RDY_debug_request_put,

		EN_debug_response_get,
		debug_response_get,
		RDY_debug_response_get,

		dma_server_awvalid,
		dma_server_awid,
		dma_server_awaddr,
		dma_server_awlen,
		dma_server_awsize,
		dma_server_awburst,
		dma_server_awlock,
		dma_server_awcache,
		dma_server_awprot,
		dma_server_awqos,
		dma_server_awregion,

		dma_server_awready,

		dma_server_wvalid,
		dma_server_wdata,
		dma_server_wstrb,
		dma_server_wlast,

		dma_server_wready,

		dma_server_bvalid,

		dma_server_bid,

		dma_server_bresp,

		dma_server_bready,

		dma_server_arvalid,
		dma_server_arid,
		dma_server_araddr,
		dma_server_arlen,
		dma_server_arsize,
		dma_server_arburst,
		dma_server_arlock,
		dma_server_arcache,
		dma_server_arprot,
		dma_server_arqos,
		dma_server_arregion,

		dma_server_arready,

		dma_server_rvalid,

		dma_server_rid,

		dma_server_rdata,

		dma_server_rresp,

		dma_server_rlast,

		dma_server_rready,

		reset_done,

		cpu_halt_x);
  input  CLK;
  input  RST_N;

  // value method master1_haddr
  output [31 : 0] master1_HADDR;

  // value method master1_hburst
  output [2 : 0] master1_HBURST;

  // value method master1_hmastlock
  output master1_HMASTLOCK;

  // value method master1_hprot
  output [3 : 0] master1_HPROT;

  // value method master1_hsize
  output [2 : 0] master1_HSIZE;

  // value method master1_htrans
  output [1 : 0] master1_HTRANS;

  // value method master1_hwdata
  output [31 : 0] master1_HWDATA;

  // value method master1_hwrite
  output master1_HWRITE;

  // action method master1_hrdata
  input  [31 : 0] master1_HRDATA;

  // action method master1_hready
  input  master1_HREADY;

  // action method master1_hresp
  input  master1_HRESP;

  // action method m_external_interrupt_req
  input  ext_interrupt;

  // action method software_interrupt_req
  input  sw_interrupt;

  // action method timer_interrupt_req
  input  timer_interrupt;

  // action method debug_request_put
  input  [70 : 0] debug_request_put;
  input  EN_debug_request_put;
  output RDY_debug_request_put;

  // actionvalue method debug_response_get
  input  EN_debug_response_get;
  output [36 : 0] debug_response_get;
  output RDY_debug_response_get;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [3 : 0] dma_server_awid;
  input  [31 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [31 : 0] dma_server_wdata;
  input  [3 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [3 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [3 : 0] dma_server_arid;
  input  [31 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [3 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [31 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // value method reset_done
  output reset_done;

  // action method cpu_halt
  input  cpu_halt_x;

  // signals for module outputs
  reg [36 : 0] debug_response_get;
  wire [31 : 0] dma_server_rdata, master1_HADDR, master1_HWDATA;
  wire [3 : 0] dma_server_bid, dma_server_rid, master1_HPROT;
  wire [2 : 0] master1_HBURST, master1_HSIZE;
  wire [1 : 0] dma_server_bresp, dma_server_rresp, master1_HTRANS;
  wire RDY_debug_request_put,
       RDY_debug_response_get,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       master1_HMASTLOCK,
       master1_HWRITE,
       reset_done;

  // register coreInReset_isInReset
  reg coreInReset_isInReset;
  wire coreInReset_isInReset$D_IN, coreInReset_isInReset$EN;

  // register deburstr_rg_ar_beat_count
  reg [7 : 0] deburstr_rg_ar_beat_count;
  wire [7 : 0] deburstr_rg_ar_beat_count$D_IN;
  wire deburstr_rg_ar_beat_count$EN;

  // register deburstr_rg_b_beat_count
  reg [7 : 0] deburstr_rg_b_beat_count;
  wire [7 : 0] deburstr_rg_b_beat_count$D_IN;
  wire deburstr_rg_b_beat_count$EN;

  // register deburstr_rg_b_resp
  reg [1 : 0] deburstr_rg_b_resp;
  wire [1 : 0] deburstr_rg_b_resp$D_IN;
  wire deburstr_rg_b_resp$EN;

  // register deburstr_rg_last_beat_raddr
  reg [31 : 0] deburstr_rg_last_beat_raddr;
  wire [31 : 0] deburstr_rg_last_beat_raddr$D_IN;
  wire deburstr_rg_last_beat_raddr$EN;

  // register deburstr_rg_last_beat_waddr
  reg [31 : 0] deburstr_rg_last_beat_waddr;
  wire [31 : 0] deburstr_rg_last_beat_waddr$D_IN;
  wire deburstr_rg_last_beat_waddr$EN;

  // register deburstr_rg_r_beat_count
  reg [7 : 0] deburstr_rg_r_beat_count;
  wire [7 : 0] deburstr_rg_r_beat_count$D_IN;
  wire deburstr_rg_r_beat_count$EN;

  // register deburstr_rg_reset
  reg deburstr_rg_reset;
  wire deburstr_rg_reset$D_IN, deburstr_rg_reset$EN;

  // register deburstr_rg_w_beat_count
  reg [7 : 0] deburstr_rg_w_beat_count;
  wire [7 : 0] deburstr_rg_w_beat_count$D_IN;
  wire deburstr_rg_w_beat_count$EN;

  // register rg_last_cpuh
  reg rg_last_cpuh;
  wire rg_last_cpuh$D_IN, rg_last_cpuh$EN;

  // register rg_ldr_reset
  reg [1 : 0] rg_ldr_reset;
  wire [1 : 0] rg_ldr_reset$D_IN;
  wire rg_ldr_reset$EN;

  // register rg_ndm_count
  reg [5 : 0] rg_ndm_count;
  wire [5 : 0] rg_ndm_count$D_IN;
  wire rg_ndm_count$EN;

  // register rg_once
  reg rg_once;
  wire rg_once$D_IN, rg_once$EN;

  // register rg_reset_done
  reg rg_reset_done;
  wire rg_reset_done$D_IN, rg_reset_done$EN;

  // ports of submodule core
  wire [70 : 0] core$debug_request_put;
  wire [67 : 0] core$dma_server_request_put;
  wire [36 : 0] core$debug_response_get;
  wire [31 : 0] core$m0_HADDR, core$m0_HRDATA, core$m0_HWDATA;
  wire [3 : 0] core$m0_HPROT;
  wire [2 : 0] core$m0_HBURST, core$m0_HSIZE;
  wire [1 : 0] core$m0_HTRANS, core$set_verbosity_verbosity;
  wire core$EN_cpu_reset_server_request_put,
       core$EN_cpu_reset_server_response_get,
       core$EN_debug_request_put,
       core$EN_debug_response_get,
       core$EN_dma_server_request_put,
       core$EN_dma_server_response_get,
       core$EN_set_verbosity,
       core$RDY_cpu_reset_server_request_put,
       core$RDY_cpu_reset_server_response_get,
       core$RDY_debug_request_put,
       core$RDY_debug_response_get,
       core$RDY_dma_server_request_put,
       core$RDY_dma_server_response_get,
       core$cpu_reset_server_request_put,
       core$dma_server_response_get,
       core$ext_interrupt,
       core$m0_HMASTLOCK,
       core$m0_HREADY,
       core$m0_HRESP,
       core$m0_HWRITE,
       core$sw_interrupt,
       core$timer_interrupt;

  // ports of submodule deburstr_f_r_arlen
  wire [7 : 0] deburstr_f_r_arlen$D_IN, deburstr_f_r_arlen$D_OUT;
  wire deburstr_f_r_arlen$CLR,
       deburstr_f_r_arlen$DEQ,
       deburstr_f_r_arlen$EMPTY_N,
       deburstr_f_r_arlen$ENQ,
       deburstr_f_r_arlen$FULL_N;

  // ports of submodule deburstr_f_w_awlen
  wire [7 : 0] deburstr_f_w_awlen$D_IN, deburstr_f_w_awlen$D_OUT;
  wire deburstr_f_w_awlen$CLR,
       deburstr_f_w_awlen$DEQ,
       deburstr_f_w_awlen$EMPTY_N,
       deburstr_f_w_awlen$ENQ,
       deburstr_f_w_awlen$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_rd_addr
  wire [64 : 0] deburstr_xactor_from_master_f_rd_addr$D_IN,
		deburstr_xactor_from_master_f_rd_addr$D_OUT;
  wire deburstr_xactor_from_master_f_rd_addr$CLR,
       deburstr_xactor_from_master_f_rd_addr$DEQ,
       deburstr_xactor_from_master_f_rd_addr$EMPTY_N,
       deburstr_xactor_from_master_f_rd_addr$ENQ,
       deburstr_xactor_from_master_f_rd_addr$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_rd_data
  wire [38 : 0] deburstr_xactor_from_master_f_rd_data$D_IN,
		deburstr_xactor_from_master_f_rd_data$D_OUT;
  wire deburstr_xactor_from_master_f_rd_data$CLR,
       deburstr_xactor_from_master_f_rd_data$DEQ,
       deburstr_xactor_from_master_f_rd_data$EMPTY_N,
       deburstr_xactor_from_master_f_rd_data$ENQ,
       deburstr_xactor_from_master_f_rd_data$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_wr_addr
  wire [64 : 0] deburstr_xactor_from_master_f_wr_addr$D_IN,
		deburstr_xactor_from_master_f_wr_addr$D_OUT;
  wire deburstr_xactor_from_master_f_wr_addr$CLR,
       deburstr_xactor_from_master_f_wr_addr$DEQ,
       deburstr_xactor_from_master_f_wr_addr$EMPTY_N,
       deburstr_xactor_from_master_f_wr_addr$ENQ,
       deburstr_xactor_from_master_f_wr_addr$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_wr_data
  wire [36 : 0] deburstr_xactor_from_master_f_wr_data$D_IN,
		deburstr_xactor_from_master_f_wr_data$D_OUT;
  wire deburstr_xactor_from_master_f_wr_data$CLR,
       deburstr_xactor_from_master_f_wr_data$DEQ,
       deburstr_xactor_from_master_f_wr_data$EMPTY_N,
       deburstr_xactor_from_master_f_wr_data$ENQ,
       deburstr_xactor_from_master_f_wr_data$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_wr_resp
  wire [5 : 0] deburstr_xactor_from_master_f_wr_resp$D_IN,
	       deburstr_xactor_from_master_f_wr_resp$D_OUT;
  wire deburstr_xactor_from_master_f_wr_resp$CLR,
       deburstr_xactor_from_master_f_wr_resp$DEQ,
       deburstr_xactor_from_master_f_wr_resp$EMPTY_N,
       deburstr_xactor_from_master_f_wr_resp$ENQ,
       deburstr_xactor_from_master_f_wr_resp$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_rd_addr
  wire [64 : 0] deburstr_xactor_to_slave_f_rd_addr$D_IN;
  wire deburstr_xactor_to_slave_f_rd_addr$CLR,
       deburstr_xactor_to_slave_f_rd_addr$DEQ,
       deburstr_xactor_to_slave_f_rd_addr$ENQ,
       deburstr_xactor_to_slave_f_rd_addr$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_rd_data
  wire [38 : 0] deburstr_xactor_to_slave_f_rd_data$D_IN,
		deburstr_xactor_to_slave_f_rd_data$D_OUT;
  wire deburstr_xactor_to_slave_f_rd_data$CLR,
       deburstr_xactor_to_slave_f_rd_data$DEQ,
       deburstr_xactor_to_slave_f_rd_data$EMPTY_N,
       deburstr_xactor_to_slave_f_rd_data$ENQ;

  // ports of submodule deburstr_xactor_to_slave_f_wr_addr
  wire [64 : 0] deburstr_xactor_to_slave_f_wr_addr$D_IN,
		deburstr_xactor_to_slave_f_wr_addr$D_OUT;
  wire deburstr_xactor_to_slave_f_wr_addr$CLR,
       deburstr_xactor_to_slave_f_wr_addr$DEQ,
       deburstr_xactor_to_slave_f_wr_addr$EMPTY_N,
       deburstr_xactor_to_slave_f_wr_addr$ENQ,
       deburstr_xactor_to_slave_f_wr_addr$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_wr_data
  wire [36 : 0] deburstr_xactor_to_slave_f_wr_data$D_IN,
		deburstr_xactor_to_slave_f_wr_data$D_OUT;
  wire deburstr_xactor_to_slave_f_wr_data$CLR,
       deburstr_xactor_to_slave_f_wr_data$DEQ,
       deburstr_xactor_to_slave_f_wr_data$EMPTY_N,
       deburstr_xactor_to_slave_f_wr_data$ENQ,
       deburstr_xactor_to_slave_f_wr_data$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_wr_resp
  wire [5 : 0] deburstr_xactor_to_slave_f_wr_resp$D_IN,
	       deburstr_xactor_to_slave_f_wr_resp$D_OUT;
  wire deburstr_xactor_to_slave_f_wr_resp$CLR,
       deburstr_xactor_to_slave_f_wr_resp$DEQ,
       deburstr_xactor_to_slave_f_wr_resp$EMPTY_N,
       deburstr_xactor_to_slave_f_wr_resp$ENQ,
       deburstr_xactor_to_slave_f_wr_resp$FULL_N;

  // ports of submodule loader_adapter_core_map
  wire [31 : 0] loader_adapter_core_map$m_is_dtcm_addr_addr,
		loader_adapter_core_map$m_is_itcm_addr_addr;

  // ports of submodule loader_adapter_f_awid
  wire [3 : 0] loader_adapter_f_awid$D_IN, loader_adapter_f_awid$D_OUT;
  wire loader_adapter_f_awid$CLR,
       loader_adapter_f_awid$DEQ,
       loader_adapter_f_awid$EMPTY_N,
       loader_adapter_f_awid$ENQ,
       loader_adapter_f_awid$FULL_N;

  // ports of submodule loader_adapter_f_awuser
  wire loader_adapter_f_awuser$CLR,
       loader_adapter_f_awuser$DEQ,
       loader_adapter_f_awuser$EMPTY_N,
       loader_adapter_f_awuser$ENQ,
       loader_adapter_f_awuser$FULL_N;

  // ports of submodule loader_adapter_slave_xactor_f_wr_addr
  wire [64 : 0] loader_adapter_slave_xactor_f_wr_addr$D_IN,
		loader_adapter_slave_xactor_f_wr_addr$D_OUT;
  wire loader_adapter_slave_xactor_f_wr_addr$CLR,
       loader_adapter_slave_xactor_f_wr_addr$DEQ,
       loader_adapter_slave_xactor_f_wr_addr$EMPTY_N,
       loader_adapter_slave_xactor_f_wr_addr$ENQ,
       loader_adapter_slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule loader_adapter_slave_xactor_f_wr_data
  wire [36 : 0] loader_adapter_slave_xactor_f_wr_data$D_IN,
		loader_adapter_slave_xactor_f_wr_data$D_OUT;
  wire loader_adapter_slave_xactor_f_wr_data$CLR,
       loader_adapter_slave_xactor_f_wr_data$DEQ,
       loader_adapter_slave_xactor_f_wr_data$EMPTY_N,
       loader_adapter_slave_xactor_f_wr_data$ENQ,
       loader_adapter_slave_xactor_f_wr_data$FULL_N;

  // ports of submodule loader_adapter_slave_xactor_f_wr_resp
  wire [5 : 0] loader_adapter_slave_xactor_f_wr_resp$D_IN,
	       loader_adapter_slave_xactor_f_wr_resp$D_OUT;
  wire loader_adapter_slave_xactor_f_wr_resp$CLR,
       loader_adapter_slave_xactor_f_wr_resp$DEQ,
       loader_adapter_slave_xactor_f_wr_resp$EMPTY_N,
       loader_adapter_slave_xactor_f_wr_resp$ENQ,
       loader_adapter_slave_xactor_f_wr_resp$FULL_N;

  // ports of submodule ndmIfc
  wire ndmIfc$ASSERT_IN, ndmIfc$OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_coreInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master,
       CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave,
       CAN_FIRE_RL_deburstr_rl_reset,
       CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master,
       CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave,
       CAN_FIRE_RL_decNdmCountRl,
       CAN_FIRE_RL_loader_adapter_rl_wr_req,
       CAN_FIRE_RL_loader_adapter_wr_rsp,
       CAN_FIRE_RL_rl_once,
       CAN_FIRE_RL_rl_reset_response,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_cpu_halt,
       CAN_FIRE_debug_request_put,
       CAN_FIRE_debug_response_get,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_master1_hrdata,
       CAN_FIRE_master1_hready,
       CAN_FIRE_master1_hresp,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_coreInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master,
       WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave,
       WILL_FIRE_RL_deburstr_rl_reset,
       WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master,
       WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave,
       WILL_FIRE_RL_decNdmCountRl,
       WILL_FIRE_RL_loader_adapter_rl_wr_req,
       WILL_FIRE_RL_loader_adapter_wr_rsp,
       WILL_FIRE_RL_rl_once,
       WILL_FIRE_RL_rl_reset_response,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_cpu_halt,
       WILL_FIRE_debug_request_put,
       WILL_FIRE_debug_response_get,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_master1_hrdata,
       WILL_FIRE_master1_hready,
       WILL_FIRE_master1_hresp,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  wire [7 : 0] MUX_deburstr_rg_ar_beat_count$write_1__VAL_2,
	       MUX_deburstr_rg_b_beat_count$write_1__VAL_2,
	       MUX_deburstr_rg_r_beat_count$write_1__VAL_2,
	       MUX_deburstr_rg_w_beat_count$write_1__VAL_2;
  wire [1 : 0] MUX_deburstr_rg_b_resp$write_1__VAL_2,
	       MUX_rg_ldr_reset$write_1__VAL_1;
  wire MUX_deburstr_rg_b_resp$write_1__SEL_2, MUX_rg_ldr_reset$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h789;
  reg [31 : 0] v__h1759;
  reg [31 : 0] v__h2027;
  reg [31 : 0] v__h4516;
  reg [31 : 0] v__h783;
  reg [31 : 0] v__h1753;
  reg [31 : 0] v__h2021;
  reg [31 : 0] v__h4510;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] a_out_araddr__h5077,
		a_out_awaddr__h3993,
		addr___1__h4087,
		addr___1__h5171,
		addr__h4075,
		addr__h5159,
		burst_len__h4076,
		burst_len__h5160,
		wrap_mask__h4077,
		wrap_mask__h5161,
		x__h4099,
		x__h5183,
		y__h4100,
		y__h4101,
		y__h5184,
		y__h5185;
  wire [7 : 0] x__h4374, x__h4881, x__h5368, x__h5587;
  wire [1 : 0] wrr_bresp__h1990;
  wire deburstr_rg_ar_beat_count_44_ULT_deburstr_xact_ETC___d175,
       deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122,
       deburstr_rg_r_beat_count_84_ULT_deburstr_f_r_a_ETC___d186,
       deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107;

  // value method master1_haddr
  assign master1_HADDR = core$m0_HADDR ;

  // value method master1_hburst
  assign master1_HBURST = core$m0_HBURST ;

  // value method master1_hmastlock
  assign master1_HMASTLOCK = core$m0_HMASTLOCK ;

  // value method master1_hprot
  assign master1_HPROT = core$m0_HPROT ;

  // value method master1_hsize
  assign master1_HSIZE = core$m0_HSIZE ;

  // value method master1_htrans
  assign master1_HTRANS = core$m0_HTRANS ;

  // value method master1_hwdata
  assign master1_HWDATA = core$m0_HWDATA ;

  // value method master1_hwrite
  assign master1_HWRITE = core$m0_HWRITE ;

  // action method master1_hrdata
  assign CAN_FIRE_master1_hrdata = 1'd1 ;
  assign WILL_FIRE_master1_hrdata = 1'd1 ;

  // action method master1_hready
  assign CAN_FIRE_master1_hready = 1'd1 ;
  assign WILL_FIRE_master1_hready = 1'd1 ;

  // action method master1_hresp
  assign CAN_FIRE_master1_hresp = 1'd1 ;
  assign WILL_FIRE_master1_hresp = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method debug_request_put
  assign RDY_debug_request_put = core$RDY_debug_request_put ;
  assign CAN_FIRE_debug_request_put = core$RDY_debug_request_put ;
  assign WILL_FIRE_debug_request_put = EN_debug_request_put ;

  // actionvalue method debug_response_get
  always@(core$debug_response_get)
  begin
    case (core$debug_response_get[36:34])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  debug_response_get = core$debug_response_get;
      default: debug_response_get = 37'h0AAAAAAAAA;
    endcase
  end
  assign RDY_debug_response_get = core$RDY_debug_response_get ;
  assign CAN_FIRE_debug_response_get = core$RDY_debug_response_get ;
  assign WILL_FIRE_debug_response_get = EN_debug_response_get ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = deburstr_xactor_from_master_f_wr_addr$FULL_N ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = deburstr_xactor_from_master_f_wr_data$FULL_N ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = deburstr_xactor_from_master_f_wr_resp$EMPTY_N ;

  // value method dma_server_m_bid
  assign dma_server_bid = deburstr_xactor_from_master_f_wr_resp$D_OUT[5:2] ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = deburstr_xactor_from_master_f_wr_resp$D_OUT[1:0] ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = deburstr_xactor_from_master_f_rd_addr$FULL_N ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = deburstr_xactor_from_master_f_rd_data$EMPTY_N ;

  // value method dma_server_m_rid
  assign dma_server_rid = deburstr_xactor_from_master_f_rd_data$D_OUT[38:35] ;

  // value method dma_server_m_rdata
  assign dma_server_rdata =
	     deburstr_xactor_from_master_f_rd_data$D_OUT[34:3] ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = deburstr_xactor_from_master_f_rd_data$D_OUT[2:1] ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = deburstr_xactor_from_master_f_rd_data$D_OUT[0] ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // value method reset_done
  assign reset_done = rg_reset_done ;

  // action method cpu_halt
  assign CAN_FIRE_cpu_halt = 1'd1 ;
  assign WILL_FIRE_cpu_halt = 1'd1 ;

  // submodule core
  mkCore core(.CLK(CLK),
	      .RST_N(ndmIfc$OUT_RST),
	      .cpu_reset_server_request_put(core$cpu_reset_server_request_put),
	      .debug_request_put(core$debug_request_put),
	      .dma_server_request_put(core$dma_server_request_put),
	      .ext_interrupt(core$ext_interrupt),
	      .m0_HRDATA(core$m0_HRDATA),
	      .m0_HREADY(core$m0_HREADY),
	      .m0_HRESP(core$m0_HRESP),
	      .set_verbosity_verbosity(core$set_verbosity_verbosity),
	      .sw_interrupt(core$sw_interrupt),
	      .timer_interrupt(core$timer_interrupt),
	      .EN_cpu_reset_server_request_put(core$EN_cpu_reset_server_request_put),
	      .EN_cpu_reset_server_response_get(core$EN_cpu_reset_server_response_get),
	      .EN_dma_server_request_put(core$EN_dma_server_request_put),
	      .EN_dma_server_response_get(core$EN_dma_server_response_get),
	      .EN_debug_request_put(core$EN_debug_request_put),
	      .EN_debug_response_get(core$EN_debug_response_get),
	      .EN_set_verbosity(core$EN_set_verbosity),
	      .RDY_cpu_reset_server_request_put(core$RDY_cpu_reset_server_request_put),
	      .cpu_reset_server_response_get(),
	      .RDY_cpu_reset_server_response_get(core$RDY_cpu_reset_server_response_get),
	      .m0_HADDR(core$m0_HADDR),
	      .m0_HBURST(core$m0_HBURST),
	      .m0_HMASTLOCK(core$m0_HMASTLOCK),
	      .m0_HPROT(core$m0_HPROT),
	      .m0_HSIZE(core$m0_HSIZE),
	      .m0_HTRANS(core$m0_HTRANS),
	      .m0_HWDATA(core$m0_HWDATA),
	      .m0_HWRITE(core$m0_HWRITE),
	      .RDY_dma_server_request_put(core$RDY_dma_server_request_put),
	      .dma_server_response_get(core$dma_server_response_get),
	      .RDY_dma_server_response_get(core$RDY_dma_server_response_get),
	      .RDY_debug_request_put(core$RDY_debug_request_put),
	      .debug_response_get(core$debug_response_get),
	      .RDY_debug_response_get(core$RDY_debug_response_get),
	      .RDY_set_verbosity());

  // submodule deburstr_f_r_arlen
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) deburstr_f_r_arlen(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(deburstr_f_r_arlen$D_IN),
						 .ENQ(deburstr_f_r_arlen$ENQ),
						 .DEQ(deburstr_f_r_arlen$DEQ),
						 .CLR(deburstr_f_r_arlen$CLR),
						 .D_OUT(deburstr_f_r_arlen$D_OUT),
						 .FULL_N(deburstr_f_r_arlen$FULL_N),
						 .EMPTY_N(deburstr_f_r_arlen$EMPTY_N));

  // submodule deburstr_f_w_awlen
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) deburstr_f_w_awlen(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(deburstr_f_w_awlen$D_IN),
						 .ENQ(deburstr_f_w_awlen$ENQ),
						 .DEQ(deburstr_f_w_awlen$DEQ),
						 .CLR(deburstr_f_w_awlen$CLR),
						 .D_OUT(deburstr_f_w_awlen$D_OUT),
						 .FULL_N(deburstr_f_w_awlen$FULL_N),
						 .EMPTY_N(deburstr_f_w_awlen$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_rd_addr$D_IN),
								.ENQ(deburstr_xactor_from_master_f_rd_addr$ENQ),
								.DEQ(deburstr_xactor_from_master_f_rd_addr$DEQ),
								.CLR(deburstr_xactor_from_master_f_rd_addr$CLR),
								.D_OUT(deburstr_xactor_from_master_f_rd_addr$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_rd_addr$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_rd_addr$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_rd_data$D_IN),
								.ENQ(deburstr_xactor_from_master_f_rd_data$ENQ),
								.DEQ(deburstr_xactor_from_master_f_rd_data$DEQ),
								.CLR(deburstr_xactor_from_master_f_rd_data$CLR),
								.D_OUT(deburstr_xactor_from_master_f_rd_data$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_rd_data$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_rd_data$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_wr_addr$D_IN),
								.ENQ(deburstr_xactor_from_master_f_wr_addr$ENQ),
								.DEQ(deburstr_xactor_from_master_f_wr_addr$DEQ),
								.CLR(deburstr_xactor_from_master_f_wr_addr$CLR),
								.D_OUT(deburstr_xactor_from_master_f_wr_addr$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_wr_addr$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_wr_addr$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_wr_data$D_IN),
								.ENQ(deburstr_xactor_from_master_f_wr_data$ENQ),
								.DEQ(deburstr_xactor_from_master_f_wr_data$DEQ),
								.CLR(deburstr_xactor_from_master_f_wr_data$CLR),
								.D_OUT(deburstr_xactor_from_master_f_wr_data$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_wr_data$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_wr_data$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_wr_resp$D_IN),
								.ENQ(deburstr_xactor_from_master_f_wr_resp$ENQ),
								.DEQ(deburstr_xactor_from_master_f_wr_resp$DEQ),
								.CLR(deburstr_xactor_from_master_f_wr_resp$CLR),
								.D_OUT(deburstr_xactor_from_master_f_wr_resp$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_wr_resp$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_wr_resp$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_rd_addr$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_rd_addr$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_rd_addr$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_rd_addr$CLR),
							     .D_OUT(),
							     .FULL_N(deburstr_xactor_to_slave_f_rd_addr$FULL_N),
							     .EMPTY_N());

  // submodule deburstr_xactor_to_slave_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_rd_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_rd_data$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_rd_data$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_rd_data$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_rd_data$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_rd_data$D_OUT),
							     .FULL_N(),
							     .EMPTY_N(deburstr_xactor_to_slave_f_rd_data$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_wr_addr$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_wr_addr$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_wr_addr$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_wr_addr$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_wr_addr$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_wr_addr$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_wr_addr$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_wr_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_wr_data$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_wr_data$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_wr_data$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_wr_data$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_wr_data$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_wr_data$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_wr_data$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_wr_resp(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_wr_resp$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_wr_resp$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_wr_resp$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_wr_resp$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_wr_resp$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_wr_resp$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_wr_resp$EMPTY_N));

  // submodule loader_adapter_core_map
  mkCore_Map loader_adapter_core_map(.CLK(CLK),
				     .RST_N(RST_N),
				     .m_is_dtcm_addr_addr(loader_adapter_core_map$m_is_dtcm_addr_addr),
				     .m_is_itcm_addr_addr(loader_adapter_core_map$m_is_itcm_addr_addr),
				     .m_itcm_addr_base(),
				     .m_itcm_addr_size(),
				     .m_itcm_addr_lim(),
				     .m_is_itcm_addr(),
				     .m_dtcm_addr_base(),
				     .m_dtcm_addr_size(),
				     .m_dtcm_addr_lim(),
				     .m_is_dtcm_addr(),
				     .m_pc_reset_value(),
				     .m_mtvec_reset_value());

  // submodule loader_adapter_f_awid
  FIFO2 #(.width(32'd4), .guarded(1'd1)) loader_adapter_f_awid(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(loader_adapter_f_awid$D_IN),
							       .ENQ(loader_adapter_f_awid$ENQ),
							       .DEQ(loader_adapter_f_awid$DEQ),
							       .CLR(loader_adapter_f_awid$CLR),
							       .D_OUT(loader_adapter_f_awid$D_OUT),
							       .FULL_N(loader_adapter_f_awid$FULL_N),
							       .EMPTY_N(loader_adapter_f_awid$EMPTY_N));

  // submodule loader_adapter_f_awuser
  FIFO20 #(.guarded(1'd1)) loader_adapter_f_awuser(.RST(RST_N),
						   .CLK(CLK),
						   .ENQ(loader_adapter_f_awuser$ENQ),
						   .DEQ(loader_adapter_f_awuser$DEQ),
						   .CLR(loader_adapter_f_awuser$CLR),
						   .FULL_N(loader_adapter_f_awuser$FULL_N),
						   .EMPTY_N(loader_adapter_f_awuser$EMPTY_N));

  // submodule loader_adapter_slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) loader_adapter_slave_xactor_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(loader_adapter_slave_xactor_f_wr_addr$D_IN),
								.ENQ(loader_adapter_slave_xactor_f_wr_addr$ENQ),
								.DEQ(loader_adapter_slave_xactor_f_wr_addr$DEQ),
								.CLR(loader_adapter_slave_xactor_f_wr_addr$CLR),
								.D_OUT(loader_adapter_slave_xactor_f_wr_addr$D_OUT),
								.FULL_N(loader_adapter_slave_xactor_f_wr_addr$FULL_N),
								.EMPTY_N(loader_adapter_slave_xactor_f_wr_addr$EMPTY_N));

  // submodule loader_adapter_slave_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) loader_adapter_slave_xactor_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(loader_adapter_slave_xactor_f_wr_data$D_IN),
								.ENQ(loader_adapter_slave_xactor_f_wr_data$ENQ),
								.DEQ(loader_adapter_slave_xactor_f_wr_data$DEQ),
								.CLR(loader_adapter_slave_xactor_f_wr_data$CLR),
								.D_OUT(loader_adapter_slave_xactor_f_wr_data$D_OUT),
								.FULL_N(loader_adapter_slave_xactor_f_wr_data$FULL_N),
								.EMPTY_N(loader_adapter_slave_xactor_f_wr_data$EMPTY_N));

  // submodule loader_adapter_slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) loader_adapter_slave_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(loader_adapter_slave_xactor_f_wr_resp$D_IN),
								.ENQ(loader_adapter_slave_xactor_f_wr_resp$ENQ),
								.DEQ(loader_adapter_slave_xactor_f_wr_resp$DEQ),
								.CLR(loader_adapter_slave_xactor_f_wr_resp$CLR),
								.D_OUT(loader_adapter_slave_xactor_f_wr_resp$D_OUT),
								.FULL_N(loader_adapter_slave_xactor_f_wr_resp$FULL_N),
								.EMPTY_N(loader_adapter_slave_xactor_f_wr_resp$EMPTY_N));

  // submodule ndmIfc
  MakeResetA #(.RSTDELAY(32'd2), .init(1'd0)) ndmIfc(.CLK(CLK),
						     .RST(RST_N),
						     .DST_CLK(CLK),
						     .ASSERT_IN(ndmIfc$ASSERT_IN),
						     .ASSERT_OUT(),
						     .OUT_RST(ndmIfc$OUT_RST));

  // rule RL_decNdmCountRl
  assign CAN_FIRE_RL_decNdmCountRl = rg_ndm_count != 6'd0 ;
  assign WILL_FIRE_RL_decNdmCountRl = CAN_FIRE_RL_decNdmCountRl ;

  // rule RL_rl_once
  assign CAN_FIRE_RL_rl_once =
	     core$RDY_cpu_reset_server_request_put && !rg_once &&
	     !coreInReset_isInReset ;
  assign WILL_FIRE_RL_rl_once = CAN_FIRE_RL_rl_once ;

  // rule RL_rl_reset_response
  assign CAN_FIRE_RL_rl_reset_response =
	     rg_ndm_count == 6'd0 && core$RDY_cpu_reset_server_response_get ;
  assign WILL_FIRE_RL_rl_reset_response = CAN_FIRE_RL_rl_reset_response ;

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_coreInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_coreInReset_isResetAssertedUpdate =
	     coreInReset_isInReset ;
  assign WILL_FIRE_RL_coreInReset_isResetAssertedUpdate =
	     coreInReset_isInReset ;

  // rule RL_loader_adapter_rl_wr_req
  assign CAN_FIRE_RL_loader_adapter_rl_wr_req =
	     core$RDY_dma_server_request_put &&
	     loader_adapter_slave_xactor_f_wr_addr$EMPTY_N &&
	     loader_adapter_slave_xactor_f_wr_data$EMPTY_N &&
	     loader_adapter_f_awid$FULL_N &&
	     loader_adapter_f_awuser$FULL_N ;
  assign WILL_FIRE_RL_loader_adapter_rl_wr_req =
	     CAN_FIRE_RL_loader_adapter_rl_wr_req ;

  // rule RL_loader_adapter_wr_rsp
  assign CAN_FIRE_RL_loader_adapter_wr_rsp =
	     core$RDY_dma_server_response_get &&
	     loader_adapter_f_awid$EMPTY_N &&
	     loader_adapter_f_awuser$EMPTY_N &&
	     loader_adapter_slave_xactor_f_wr_resp$FULL_N ;
  assign WILL_FIRE_RL_loader_adapter_wr_rsp =
	     CAN_FIRE_RL_loader_adapter_wr_rsp ;

  // rule RL_deburstr_rl_wr_xaction_master_to_slave
  assign CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave =
	     deburstr_xactor_to_slave_f_wr_addr$FULL_N &&
	     deburstr_xactor_from_master_f_wr_addr$EMPTY_N &&
	     deburstr_xactor_to_slave_f_wr_data$FULL_N &&
	     deburstr_xactor_from_master_f_wr_data$EMPTY_N &&
	     (deburstr_rg_w_beat_count != 8'd0 || deburstr_f_w_awlen$FULL_N) ;
  assign WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;

  // rule RL_deburstr_rl_wr_resp_slave_to_master
  assign CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master =
	     deburstr_xactor_to_slave_f_wr_resp$EMPTY_N &&
	     deburstr_f_w_awlen$EMPTY_N &&
	     (deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122 ||
	      deburstr_xactor_from_master_f_wr_resp$FULL_N) ;
  assign WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master =
	     CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master ;

  // rule RL_deburstr_rl_rd_xaction_master_to_slave
  assign CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave =
	     deburstr_xactor_to_slave_f_rd_addr$FULL_N &&
	     deburstr_xactor_from_master_f_rd_addr$EMPTY_N &&
	     (deburstr_rg_ar_beat_count != 8'd0 ||
	      deburstr_f_r_arlen$FULL_N) ;
  assign WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave =
	     CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ;

  // rule RL_deburstr_rl_rd_resp_slave_to_master
  assign CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master =
	     deburstr_xactor_to_slave_f_rd_data$EMPTY_N &&
	     deburstr_f_r_arlen$EMPTY_N &&
	     deburstr_xactor_from_master_f_rd_data$FULL_N ;
  assign WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master =
	     CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ;

  // rule RL_deburstr_rl_reset
  assign CAN_FIRE_RL_deburstr_rl_reset = deburstr_rg_reset ;
  assign WILL_FIRE_RL_deburstr_rl_reset = deburstr_rg_reset ;

  // inputs to muxes for submodule ports
  assign MUX_deburstr_rg_b_resp$write_1__SEL_2 =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master &&
	     (deburstr_rg_b_resp == 2'b0 &&
	      deburstr_xactor_to_slave_f_wr_resp$D_OUT[1:0] != 2'b0 ||
	      !deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122) ;
  assign MUX_rg_ldr_reset$write_1__SEL_1 =
	     cpu_halt_x != rg_last_cpuh && !rg_ldr_reset[1] ;
  assign MUX_deburstr_rg_ar_beat_count$write_1__VAL_2 =
	     deburstr_rg_ar_beat_count_44_ULT_deburstr_xact_ETC___d175 ?
	       x__h5368 :
	       8'd0 ;
  assign MUX_deburstr_rg_b_beat_count$write_1__VAL_2 =
	     deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122 ?
	       x__h4881 :
	       8'd0 ;
  assign MUX_deburstr_rg_b_resp$write_1__VAL_2 =
	     deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122 ?
	       deburstr_xactor_to_slave_f_wr_resp$D_OUT[1:0] :
	       2'b0 ;
  assign MUX_deburstr_rg_r_beat_count$write_1__VAL_2 =
	     deburstr_rg_r_beat_count_84_ULT_deburstr_f_r_a_ETC___d186 ?
	       x__h5587 :
	       8'd0 ;
  assign MUX_deburstr_rg_w_beat_count$write_1__VAL_2 =
	     deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 ?
	       x__h4374 :
	       8'd0 ;
  assign MUX_rg_ldr_reset$write_1__VAL_1 = { 1'd1, !cpu_halt_x } ;

  // register coreInReset_isInReset
  assign coreInReset_isInReset$D_IN = 1'd0 ;
  assign coreInReset_isInReset$EN = coreInReset_isInReset ;

  // register deburstr_rg_ar_beat_count
  assign deburstr_rg_ar_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_ar_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_ar_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ||
	     deburstr_rg_reset ;

  // register deburstr_rg_b_beat_count
  assign deburstr_rg_b_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_b_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_b_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master ||
	     deburstr_rg_reset ;

  // register deburstr_rg_b_resp
  assign deburstr_rg_b_resp$D_IN =
	     deburstr_rg_reset ?
	       2'b0 :
	       MUX_deburstr_rg_b_resp$write_1__VAL_2 ;
  assign deburstr_rg_b_resp$EN =
	     MUX_deburstr_rg_b_resp$write_1__SEL_2 || deburstr_rg_reset ;

  // register deburstr_rg_last_beat_raddr
  assign deburstr_rg_last_beat_raddr$D_IN = a_out_araddr__h5077 ;
  assign deburstr_rg_last_beat_raddr$EN =
	     CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ;

  // register deburstr_rg_last_beat_waddr
  assign deburstr_rg_last_beat_waddr$D_IN = a_out_awaddr__h3993 ;
  assign deburstr_rg_last_beat_waddr$EN =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;

  // register deburstr_rg_r_beat_count
  assign deburstr_rg_r_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_r_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_r_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ||
	     deburstr_rg_reset ;

  // register deburstr_rg_reset
  assign deburstr_rg_reset$D_IN = 1'd0 ;
  assign deburstr_rg_reset$EN = deburstr_rg_reset ;

  // register deburstr_rg_w_beat_count
  assign deburstr_rg_w_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_w_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_w_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ||
	     deburstr_rg_reset ;

  // register rg_last_cpuh
  assign rg_last_cpuh$D_IN = cpu_halt_x ;
  assign rg_last_cpuh$EN = MUX_rg_ldr_reset$write_1__SEL_1 ;

  // register rg_ldr_reset
  assign rg_ldr_reset$D_IN =
	     MUX_rg_ldr_reset$write_1__SEL_1 ?
	       MUX_rg_ldr_reset$write_1__VAL_1 :
	       2'd0 ;
  assign rg_ldr_reset$EN =
	     cpu_halt_x != rg_last_cpuh && !rg_ldr_reset[1] ||
	     WILL_FIRE_RL_rl_once ;

  // register rg_ndm_count
  assign rg_ndm_count$D_IN = rg_ndm_count - 6'd1 ;
  assign rg_ndm_count$EN = CAN_FIRE_RL_decNdmCountRl ;

  // register rg_once
  assign rg_once$D_IN = !MUX_rg_ldr_reset$write_1__SEL_1 ;
  assign rg_once$EN =
	     cpu_halt_x != rg_last_cpuh && !rg_ldr_reset[1] ||
	     WILL_FIRE_RL_rl_once ;

  // register rg_reset_done
  assign rg_reset_done$D_IN = WILL_FIRE_RL_rl_reset_response ;
  assign rg_reset_done$EN =
	     cpu_halt_x != rg_last_cpuh && !rg_ldr_reset[1] ||
	     WILL_FIRE_RL_rl_reset_response ;

  // submodule core
  assign core$cpu_reset_server_request_put =
	     !rg_ldr_reset[1] || rg_ldr_reset[0] ;
  assign core$debug_request_put = debug_request_put ;
  assign core$dma_server_request_put =
	     { 1'd0,
	       loader_adapter_slave_xactor_f_wr_data$D_OUT[36:5],
	       loader_adapter_slave_xactor_f_wr_addr$D_OUT[20:18],
	       loader_adapter_slave_xactor_f_wr_addr$D_OUT[60:29] } ;
  assign core$ext_interrupt = ext_interrupt ;
  assign core$m0_HRDATA = master1_HRDATA ;
  assign core$m0_HREADY = master1_HREADY ;
  assign core$m0_HRESP = master1_HRESP ;
  assign core$set_verbosity_verbosity = 2'h0 ;
  assign core$sw_interrupt = sw_interrupt ;
  assign core$timer_interrupt = timer_interrupt ;
  assign core$EN_cpu_reset_server_request_put = CAN_FIRE_RL_rl_once ;
  assign core$EN_cpu_reset_server_response_get =
	     CAN_FIRE_RL_rl_reset_response ;
  assign core$EN_dma_server_request_put =
	     CAN_FIRE_RL_loader_adapter_rl_wr_req ;
  assign core$EN_dma_server_response_get = CAN_FIRE_RL_loader_adapter_wr_rsp ;
  assign core$EN_debug_request_put = EN_debug_request_put ;
  assign core$EN_debug_response_get = EN_debug_response_get ;
  assign core$EN_set_verbosity = 1'b0 ;

  // submodule deburstr_f_r_arlen
  assign deburstr_f_r_arlen$D_IN =
	     deburstr_xactor_from_master_f_rd_addr$D_OUT[28:21] ;
  assign deburstr_f_r_arlen$ENQ =
	     WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave &&
	     deburstr_rg_ar_beat_count == 8'd0 ;
  assign deburstr_f_r_arlen$DEQ =
	     WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master &&
	     !deburstr_rg_r_beat_count_84_ULT_deburstr_f_r_a_ETC___d186 ;
  assign deburstr_f_r_arlen$CLR = deburstr_rg_reset ;

  // submodule deburstr_f_w_awlen
  assign deburstr_f_w_awlen$D_IN =
	     deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21] ;
  assign deburstr_f_w_awlen$ENQ =
	     WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	     deburstr_rg_w_beat_count == 8'd0 ;
  assign deburstr_f_w_awlen$DEQ =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master &&
	     !deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122 ;
  assign deburstr_f_w_awlen$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_rd_addr
  assign deburstr_xactor_from_master_f_rd_addr$D_IN =
	     { dma_server_arid,
	       dma_server_araddr,
	       dma_server_arlen,
	       dma_server_arsize,
	       dma_server_arburst,
	       dma_server_arlock,
	       dma_server_arcache,
	       dma_server_arprot,
	       dma_server_arqos,
	       dma_server_arregion } ;
  assign deburstr_xactor_from_master_f_rd_addr$ENQ =
	     dma_server_arvalid &&
	     deburstr_xactor_from_master_f_rd_addr$FULL_N ;
  assign deburstr_xactor_from_master_f_rd_addr$DEQ =
	     WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave &&
	     !deburstr_rg_ar_beat_count_44_ULT_deburstr_xact_ETC___d175 ;
  assign deburstr_xactor_from_master_f_rd_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_rd_data
  assign deburstr_xactor_from_master_f_rd_data$D_IN =
	     { deburstr_xactor_to_slave_f_rd_data$D_OUT[38:1],
	       !deburstr_rg_r_beat_count_84_ULT_deburstr_f_r_a_ETC___d186 } ;
  assign deburstr_xactor_from_master_f_rd_data$ENQ =
	     CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ;
  assign deburstr_xactor_from_master_f_rd_data$DEQ =
	     dma_server_rready &&
	     deburstr_xactor_from_master_f_rd_data$EMPTY_N ;
  assign deburstr_xactor_from_master_f_rd_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_wr_addr
  assign deburstr_xactor_from_master_f_wr_addr$D_IN =
	     { dma_server_awid,
	       dma_server_awaddr,
	       dma_server_awlen,
	       dma_server_awsize,
	       dma_server_awburst,
	       dma_server_awlock,
	       dma_server_awcache,
	       dma_server_awprot,
	       dma_server_awqos,
	       dma_server_awregion } ;
  assign deburstr_xactor_from_master_f_wr_addr$ENQ =
	     dma_server_awvalid &&
	     deburstr_xactor_from_master_f_wr_addr$FULL_N ;
  assign deburstr_xactor_from_master_f_wr_addr$DEQ =
	     WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	     !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 ;
  assign deburstr_xactor_from_master_f_wr_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_wr_data
  assign deburstr_xactor_from_master_f_wr_data$D_IN =
	     { dma_server_wdata, dma_server_wstrb, dma_server_wlast } ;
  assign deburstr_xactor_from_master_f_wr_data$ENQ =
	     dma_server_wvalid &&
	     deburstr_xactor_from_master_f_wr_data$FULL_N ;
  assign deburstr_xactor_from_master_f_wr_data$DEQ =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;
  assign deburstr_xactor_from_master_f_wr_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_wr_resp
  assign deburstr_xactor_from_master_f_wr_resp$D_IN =
	     { deburstr_xactor_to_slave_f_wr_resp$D_OUT[5:2],
	       (deburstr_rg_b_resp == 2'b0) ?
		 deburstr_xactor_to_slave_f_wr_resp$D_OUT[1:0] :
		 deburstr_rg_b_resp } ;
  assign deburstr_xactor_from_master_f_wr_resp$ENQ =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master &&
	     !deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122 ;
  assign deburstr_xactor_from_master_f_wr_resp$DEQ =
	     dma_server_bready &&
	     deburstr_xactor_from_master_f_wr_resp$EMPTY_N ;
  assign deburstr_xactor_from_master_f_wr_resp$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_rd_addr
  assign deburstr_xactor_to_slave_f_rd_addr$D_IN =
	     { deburstr_xactor_from_master_f_rd_addr$D_OUT[64:61],
	       a_out_araddr__h5077,
	       8'd0,
	       deburstr_xactor_from_master_f_rd_addr$D_OUT[20:18],
	       2'b0,
	       deburstr_xactor_from_master_f_rd_addr$D_OUT[15:0] } ;
  assign deburstr_xactor_to_slave_f_rd_addr$ENQ =
	     CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ;
  assign deburstr_xactor_to_slave_f_rd_addr$DEQ = 1'b0 ;
  assign deburstr_xactor_to_slave_f_rd_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_rd_data
  assign deburstr_xactor_to_slave_f_rd_data$D_IN = 39'h0 ;
  assign deburstr_xactor_to_slave_f_rd_data$ENQ = 1'b0 ;
  assign deburstr_xactor_to_slave_f_rd_data$DEQ =
	     CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ;
  assign deburstr_xactor_to_slave_f_rd_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_wr_addr
  assign deburstr_xactor_to_slave_f_wr_addr$D_IN =
	     { deburstr_xactor_from_master_f_wr_addr$D_OUT[64:61],
	       a_out_awaddr__h3993,
	       8'd0,
	       deburstr_xactor_from_master_f_wr_addr$D_OUT[20:18],
	       2'b0,
	       deburstr_xactor_from_master_f_wr_addr$D_OUT[15:0] } ;
  assign deburstr_xactor_to_slave_f_wr_addr$ENQ =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;
  assign deburstr_xactor_to_slave_f_wr_addr$DEQ =
	     deburstr_xactor_to_slave_f_wr_addr$EMPTY_N &&
	     loader_adapter_slave_xactor_f_wr_addr$FULL_N ;
  assign deburstr_xactor_to_slave_f_wr_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_wr_data
  assign deburstr_xactor_to_slave_f_wr_data$D_IN =
	     { deburstr_xactor_from_master_f_wr_data$D_OUT[36:1], 1'd1 } ;
  assign deburstr_xactor_to_slave_f_wr_data$ENQ =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;
  assign deburstr_xactor_to_slave_f_wr_data$DEQ =
	     deburstr_xactor_to_slave_f_wr_data$EMPTY_N &&
	     loader_adapter_slave_xactor_f_wr_data$FULL_N ;
  assign deburstr_xactor_to_slave_f_wr_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_wr_resp
  assign deburstr_xactor_to_slave_f_wr_resp$D_IN =
	     loader_adapter_slave_xactor_f_wr_resp$D_OUT ;
  assign deburstr_xactor_to_slave_f_wr_resp$ENQ =
	     loader_adapter_slave_xactor_f_wr_resp$EMPTY_N &&
	     deburstr_xactor_to_slave_f_wr_resp$FULL_N ;
  assign deburstr_xactor_to_slave_f_wr_resp$DEQ =
	     CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master ;
  assign deburstr_xactor_to_slave_f_wr_resp$CLR = deburstr_rg_reset ;

  // submodule loader_adapter_core_map
  assign loader_adapter_core_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign loader_adapter_core_map$m_is_itcm_addr_addr = 32'h0 ;

  // submodule loader_adapter_f_awid
  assign loader_adapter_f_awid$D_IN =
	     loader_adapter_slave_xactor_f_wr_addr$D_OUT[64:61] ;
  assign loader_adapter_f_awid$ENQ = CAN_FIRE_RL_loader_adapter_rl_wr_req ;
  assign loader_adapter_f_awid$DEQ = CAN_FIRE_RL_loader_adapter_wr_rsp ;
  assign loader_adapter_f_awid$CLR = 1'b0 ;

  // submodule loader_adapter_f_awuser
  assign loader_adapter_f_awuser$ENQ = CAN_FIRE_RL_loader_adapter_rl_wr_req ;
  assign loader_adapter_f_awuser$DEQ = CAN_FIRE_RL_loader_adapter_wr_rsp ;
  assign loader_adapter_f_awuser$CLR = 1'b0 ;

  // submodule loader_adapter_slave_xactor_f_wr_addr
  assign loader_adapter_slave_xactor_f_wr_addr$D_IN =
	     deburstr_xactor_to_slave_f_wr_addr$D_OUT ;
  assign loader_adapter_slave_xactor_f_wr_addr$ENQ =
	     deburstr_xactor_to_slave_f_wr_addr$EMPTY_N &&
	     loader_adapter_slave_xactor_f_wr_addr$FULL_N ;
  assign loader_adapter_slave_xactor_f_wr_addr$DEQ =
	     CAN_FIRE_RL_loader_adapter_rl_wr_req ;
  assign loader_adapter_slave_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule loader_adapter_slave_xactor_f_wr_data
  assign loader_adapter_slave_xactor_f_wr_data$D_IN =
	     deburstr_xactor_to_slave_f_wr_data$D_OUT ;
  assign loader_adapter_slave_xactor_f_wr_data$ENQ =
	     deburstr_xactor_to_slave_f_wr_data$EMPTY_N &&
	     loader_adapter_slave_xactor_f_wr_data$FULL_N ;
  assign loader_adapter_slave_xactor_f_wr_data$DEQ =
	     CAN_FIRE_RL_loader_adapter_rl_wr_req ;
  assign loader_adapter_slave_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule loader_adapter_slave_xactor_f_wr_resp
  assign loader_adapter_slave_xactor_f_wr_resp$D_IN =
	     { loader_adapter_f_awid$D_OUT, wrr_bresp__h1990 } ;
  assign loader_adapter_slave_xactor_f_wr_resp$ENQ =
	     CAN_FIRE_RL_loader_adapter_wr_rsp ;
  assign loader_adapter_slave_xactor_f_wr_resp$DEQ =
	     deburstr_xactor_to_slave_f_wr_resp$FULL_N &&
	     loader_adapter_slave_xactor_f_wr_resp$EMPTY_N ;
  assign loader_adapter_slave_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule ndmIfc
  assign ndmIfc$ASSERT_IN = CAN_FIRE_RL_decNdmCountRl ;

  // remaining internal signals
  assign a_out_araddr__h5077 =
	     (deburstr_rg_ar_beat_count == 8'd0) ?
	       deburstr_xactor_from_master_f_rd_addr$D_OUT[60:29] :
	       ((deburstr_xactor_from_master_f_rd_addr$D_OUT[17:16] ==
		 2'b10) ?
		  addr___1__h5171 :
		  addr__h5159) ;
  assign a_out_awaddr__h3993 =
	     (deburstr_rg_w_beat_count == 8'd0) ?
	       deburstr_xactor_from_master_f_wr_addr$D_OUT[60:29] :
	       ((deburstr_xactor_from_master_f_wr_addr$D_OUT[17:16] ==
		 2'b10) ?
		  addr___1__h4087 :
		  addr__h4075) ;
  assign addr___1__h4087 = x__h4099 | y__h4100 ;
  assign addr___1__h5171 = x__h5183 | y__h5184 ;
  assign addr__h4075 =
	     deburstr_rg_last_beat_waddr +
	     (32'd1 << deburstr_xactor_from_master_f_wr_addr$D_OUT[20:18]) ;
  assign addr__h5159 =
	     deburstr_rg_last_beat_raddr +
	     (32'd1 << deburstr_xactor_from_master_f_rd_addr$D_OUT[20:18]) ;
  assign burst_len__h4076 =
	     { 24'd0, deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21] } +
	     32'd1 ;
  assign burst_len__h5160 =
	     { 24'd0, deburstr_xactor_from_master_f_rd_addr$D_OUT[28:21] } +
	     32'd1 ;
  assign deburstr_rg_ar_beat_count_44_ULT_deburstr_xact_ETC___d175 =
	     deburstr_rg_ar_beat_count <
	     deburstr_xactor_from_master_f_rd_addr$D_OUT[28:21] ;
  assign deburstr_rg_b_beat_count_20_ULT_deburstr_f_w_a_ETC___d122 =
	     deburstr_rg_b_beat_count < deburstr_f_w_awlen$D_OUT ;
  assign deburstr_rg_r_beat_count_84_ULT_deburstr_f_r_a_ETC___d186 =
	     deburstr_rg_r_beat_count < deburstr_f_r_arlen$D_OUT ;
  assign deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 =
	     deburstr_rg_w_beat_count <
	     deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21] ;
  assign wrap_mask__h4077 =
	     (burst_len__h4076 <<
	      deburstr_xactor_from_master_f_wr_addr$D_OUT[20:18]) -
	     32'd1 ;
  assign wrap_mask__h5161 =
	     (burst_len__h5160 <<
	      deburstr_xactor_from_master_f_rd_addr$D_OUT[20:18]) -
	     32'd1 ;
  assign wrr_bresp__h1990 = core$dma_server_response_get ? 2'b10 : 2'b0 ;
  assign x__h4099 = deburstr_rg_last_beat_waddr & y__h4101 ;
  assign x__h4374 = deburstr_rg_w_beat_count + 8'd1 ;
  assign x__h4881 = deburstr_rg_b_beat_count + 8'd1 ;
  assign x__h5183 = deburstr_rg_last_beat_raddr & y__h5185 ;
  assign x__h5368 = deburstr_rg_ar_beat_count + 8'd1 ;
  assign x__h5587 = deburstr_rg_r_beat_count + 8'd1 ;
  assign y__h4100 = addr__h4075 & wrap_mask__h4077 ;
  assign y__h4101 = ~wrap_mask__h4077 ;
  assign y__h5184 = addr__h5159 & wrap_mask__h5161 ;
  assign y__h5185 = ~wrap_mask__h5161 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        deburstr_rg_ar_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburstr_rg_b_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburstr_rg_b_resp <= `BSV_ASSIGNMENT_DELAY 2'b0;
	deburstr_rg_r_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburstr_rg_reset <= `BSV_ASSIGNMENT_DELAY 1'd1;
	deburstr_rg_w_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_last_cpuh <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ldr_reset <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_ndm_count <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_once <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_reset_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (deburstr_rg_ar_beat_count$EN)
	  deburstr_rg_ar_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_ar_beat_count$D_IN;
	if (deburstr_rg_b_beat_count$EN)
	  deburstr_rg_b_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_b_beat_count$D_IN;
	if (deburstr_rg_b_resp$EN)
	  deburstr_rg_b_resp <= `BSV_ASSIGNMENT_DELAY deburstr_rg_b_resp$D_IN;
	if (deburstr_rg_r_beat_count$EN)
	  deburstr_rg_r_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_r_beat_count$D_IN;
	if (deburstr_rg_reset$EN)
	  deburstr_rg_reset <= `BSV_ASSIGNMENT_DELAY deburstr_rg_reset$D_IN;
	if (deburstr_rg_w_beat_count$EN)
	  deburstr_rg_w_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_w_beat_count$D_IN;
	if (rg_last_cpuh$EN)
	  rg_last_cpuh <= `BSV_ASSIGNMENT_DELAY rg_last_cpuh$D_IN;
	if (rg_ldr_reset$EN)
	  rg_ldr_reset <= `BSV_ASSIGNMENT_DELAY rg_ldr_reset$D_IN;
	if (rg_ndm_count$EN)
	  rg_ndm_count <= `BSV_ASSIGNMENT_DELAY rg_ndm_count$D_IN;
	if (rg_once$EN) rg_once <= `BSV_ASSIGNMENT_DELAY rg_once$D_IN;
	if (rg_reset_done$EN)
	  rg_reset_done <= `BSV_ASSIGNMENT_DELAY rg_reset_done$D_IN;
      end
    if (deburstr_rg_last_beat_raddr$EN)
      deburstr_rg_last_beat_raddr <= `BSV_ASSIGNMENT_DELAY
	  deburstr_rg_last_beat_raddr$D_IN;
    if (deburstr_rg_last_beat_waddr$EN)
      deburstr_rg_last_beat_waddr <= `BSV_ASSIGNMENT_DELAY
	  deburstr_rg_last_beat_waddr$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE ndmIfc$OUT_RST)
  if (ndmIfc$OUT_RST == `BSV_RESET_VALUE)
    begin
      coreInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (coreInReset_isInReset$EN)
	coreInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    coreInReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coreInReset_isInReset = 1'h0;
    deburstr_rg_ar_beat_count = 8'hAA;
    deburstr_rg_b_beat_count = 8'hAA;
    deburstr_rg_b_resp = 2'h2;
    deburstr_rg_last_beat_raddr = 32'hAAAAAAAA;
    deburstr_rg_last_beat_waddr = 32'hAAAAAAAA;
    deburstr_rg_r_beat_count = 8'hAA;
    deburstr_rg_reset = 1'h0;
    deburstr_rg_w_beat_count = 8'hAA;
    rg_last_cpuh = 1'h0;
    rg_ldr_reset = 2'h2;
    rg_ndm_count = 6'h2A;
    rg_once = 1'h0;
    rg_reset_done = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (cpu_halt_x != rg_last_cpuh && !rg_ldr_reset[1] && !cpu_halt_x)
	$display("Trace starting");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_rl_once)
	  begin
	    v__h789 = $stime;
	    #0;
	  end
    v__h783 = v__h789 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_rl_once)
	  $write("%0d: %m.rl_once: PoR to Core: (running ", v__h783);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_rl_once && rg_ldr_reset[1] && !rg_ldr_reset[0])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_rl_once && (!rg_ldr_reset[1] || rg_ldr_reset[0]))
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_rl_once) $write(")", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  begin
	    v__h1759 = $stime;
	    #0;
	  end
    v__h1753 = v__h1759 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $display("%06d:[D]:%m.rl_wr_req", v__h1753);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req)
	  $write("'h%h", loader_adapter_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req &&
	    loader_adapter_slave_xactor_f_wr_data$D_OUT[0])
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req &&
	    !loader_adapter_slave_xactor_f_wr_data$D_OUT[0])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_rl_wr_req) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp)
	  begin
	    v__h2027 = $stime;
	    #0;
	  end
    v__h2021 = v__h2027 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp)
	  $display("%06d:[D]:%m.rl_wr_rsp", v__h2021);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp)
	  $write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp)
	  $write("'h%h", loader_adapter_f_awid$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp) $write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp)
	  $write("'h%h", wrr_bresp__h1990);
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp) $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp) $write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (ndmIfc$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_loader_adapter_wr_rsp) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	begin
	  v__h4516 = $stime;
	  #0;
	end
    v__h4510 = v__h4516 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$display("%0d: ERROR: %m::AXI4_Deburster.rl_wr_xaction_master_to_slave: m -> s",
		 v__h4510);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$display("    WLAST not set on last data beat (awlen = %0d)",
		 deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", deburstr_xactor_from_master_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", deburstr_xactor_from_master_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_1_ULT_deburstr_xactor_ETC___d107 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkBSCore

