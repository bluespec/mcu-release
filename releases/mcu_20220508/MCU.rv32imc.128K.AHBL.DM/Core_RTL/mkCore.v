//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
//
// Ports:
// Name                         I/O  size props
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// m0_HADDR                       O    32 reg
// m0_HBURST                      O     3 const
// m0_HMASTLOCK                   O     1 const
// m0_HPROT                       O     4 const
// m0_HSIZE                       O     3 reg
// m0_HTRANS                      O     2 reg
// m0_HWDATA                      O    32 reg
// m0_HWRITE                      O     1 reg
// RDY_dma_server_request_put     O     1
// dma_server_response_get        O     1 reg
// RDY_dma_server_response_get    O     1 reg
// RDY_debug_request_put          O     1 reg
// debug_response_get             O    37 reg
// RDY_debug_response_get         O     1 reg
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// cpu_reset_server_request_put   I     1 reg
// m0_HRDATA                      I    32 reg
// m0_HREADY                      I     1
// m0_HRESP                       I     1
// dma_server_request_put         I    68
// ext_interrupt                  I     1 reg
// sw_interrupt                   I     1 reg
// timer_interrupt                I     1 reg
// debug_request_put              I    71 reg
// set_verbosity_verbosity        I     2
// EN_cpu_reset_server_request_put  I     1
// EN_dma_server_request_put      I     1
// EN_debug_request_put           I     1
// EN_set_verbosity               I     1
// EN_cpu_reset_server_response_get  I     1
// EN_dma_server_response_get     I     1
// EN_debug_response_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      m0_HADDR,

	      m0_HBURST,

	      m0_HMASTLOCK,

	      m0_HPROT,

	      m0_HSIZE,

	      m0_HTRANS,

	      m0_HWDATA,

	      m0_HWRITE,

	      m0_HRDATA,

	      m0_HREADY,

	      m0_HRESP,

	      dma_server_request_put,
	      EN_dma_server_request_put,
	      RDY_dma_server_request_put,

	      EN_dma_server_response_get,
	      dma_server_response_get,
	      RDY_dma_server_response_get,

	      ext_interrupt,

	      sw_interrupt,

	      timer_interrupt,

	      debug_request_put,
	      EN_debug_request_put,
	      RDY_debug_request_put,

	      EN_debug_response_get,
	      debug_response_get,
	      RDY_debug_response_get,

	      set_verbosity_verbosity,
	      EN_set_verbosity,
	      RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method m0_haddr
  output [31 : 0] m0_HADDR;

  // value method m0_hburst
  output [2 : 0] m0_HBURST;

  // value method m0_hmastlock
  output m0_HMASTLOCK;

  // value method m0_hprot
  output [3 : 0] m0_HPROT;

  // value method m0_hsize
  output [2 : 0] m0_HSIZE;

  // value method m0_htrans
  output [1 : 0] m0_HTRANS;

  // value method m0_hwdata
  output [31 : 0] m0_HWDATA;

  // value method m0_hwrite
  output m0_HWRITE;

  // action method m0_hrdata
  input  [31 : 0] m0_HRDATA;

  // action method m0_hready
  input  m0_HREADY;

  // action method m0_hresp
  input  m0_HRESP;

  // action method dma_server_request_put
  input  [67 : 0] dma_server_request_put;
  input  EN_dma_server_request_put;
  output RDY_dma_server_request_put;

  // actionvalue method dma_server_response_get
  input  EN_dma_server_response_get;
  output dma_server_response_get;
  output RDY_dma_server_response_get;

  // action method m_external_interrupt_req
  input  ext_interrupt;

  // action method software_interrupt_req
  input  sw_interrupt;

  // action method timer_interrupt_req
  input  timer_interrupt;

  // action method debug_request_put
  input  [70 : 0] debug_request_put;
  input  EN_debug_request_put;
  output RDY_debug_request_put;

  // actionvalue method debug_response_get
  input  EN_debug_response_get;
  output [36 : 0] debug_response_get;
  output RDY_debug_response_get;

  // action method set_verbosity
  input  [1 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [36 : 0] debug_response_get;
  wire [31 : 0] m0_HADDR, m0_HWDATA;
  wire [3 : 0] m0_HPROT;
  wire [2 : 0] m0_HBURST, m0_HSIZE;
  wire [1 : 0] m0_HTRANS;
  wire RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_debug_request_put,
       RDY_debug_response_get,
       RDY_dma_server_request_put,
       RDY_dma_server_response_get,
       RDY_set_verbosity,
       cpu_reset_server_response_get,
       dma_server_response_get,
       m0_HMASTLOCK,
       m0_HWRITE;

  // ports of submodule cpu
  wire [67 : 0] cpu$dbg_server_request_put, cpu$dma_server_request_put;
  wire [44 : 0] cpu$debug_hart_csr_mem_server_request_put;
  wire [37 : 0] cpu$debug_hart_gpr_mem_server_request_put;
  wire [33 : 0] cpu$dbg_server_response_get;
  wire [32 : 0] cpu$debug_hart_csr_mem_server_response_get,
		cpu$debug_hart_gpr_mem_server_response_get;
  wire [31 : 0] cpu$dmem_master_HADDR,
		cpu$dmem_master_HRDATA,
		cpu$dmem_master_HWDATA;
  wire [3 : 0] cpu$debug_hart_put_other_req_put, cpu$dmem_master_HPROT;
  wire [2 : 0] cpu$dmem_master_HBURST, cpu$dmem_master_HSIZE;
  wire [1 : 0] cpu$dmem_master_HTRANS, cpu$set_verbosity_verbosity;
  wire cpu$EN_dbg_server_request_put,
       cpu$EN_dbg_server_response_get,
       cpu$EN_debug_hart_csr_mem_server_request_put,
       cpu$EN_debug_hart_csr_mem_server_response_get,
       cpu$EN_debug_hart_gpr_mem_server_request_put,
       cpu$EN_debug_hart_gpr_mem_server_response_get,
       cpu$EN_debug_hart_put_other_req_put,
       cpu$EN_debug_hart_reset_server_request_put,
       cpu$EN_debug_hart_reset_server_response_get,
       cpu$EN_debug_hart_server_run_halt_request_put,
       cpu$EN_debug_hart_server_run_halt_response_get,
       cpu$EN_dma_server_request_put,
       cpu$EN_dma_server_response_get,
       cpu$EN_set_verbosity,
       cpu$RDY_dbg_server_request_put,
       cpu$RDY_dbg_server_response_get,
       cpu$RDY_debug_hart_csr_mem_server_request_put,
       cpu$RDY_debug_hart_csr_mem_server_response_get,
       cpu$RDY_debug_hart_gpr_mem_server_request_put,
       cpu$RDY_debug_hart_gpr_mem_server_response_get,
       cpu$RDY_debug_hart_reset_server_request_put,
       cpu$RDY_debug_hart_reset_server_response_get,
       cpu$RDY_debug_hart_server_run_halt_request_put,
       cpu$RDY_debug_hart_server_run_halt_response_get,
       cpu$RDY_dma_server_request_put,
       cpu$RDY_dma_server_response_get,
       cpu$debug_hart_reset_server_request_put,
       cpu$debug_hart_reset_server_response_get,
       cpu$debug_hart_server_run_halt_request_put,
       cpu$debug_hart_server_run_halt_response_get,
       cpu$dma_server_response_get,
       cpu$dmem_master_HMASTLOCK,
       cpu$dmem_master_HREADY,
       cpu$dmem_master_HRESP,
       cpu$dmem_master_HWRITE,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule dm_stub_ff_dm_sys_req
  wire [70 : 0] dm_stub_ff_dm_sys_req$D_IN, dm_stub_ff_dm_sys_req$D_OUT;
  wire dm_stub_ff_dm_sys_req$CLR,
       dm_stub_ff_dm_sys_req$DEQ,
       dm_stub_ff_dm_sys_req$EMPTY_N,
       dm_stub_ff_dm_sys_req$ENQ,
       dm_stub_ff_dm_sys_req$FULL_N;

  // ports of submodule dm_stub_ff_dm_sys_rsp
  reg [36 : 0] dm_stub_ff_dm_sys_rsp$D_IN;
  wire [36 : 0] dm_stub_ff_dm_sys_rsp$D_OUT;
  wire dm_stub_ff_dm_sys_rsp$CLR,
       dm_stub_ff_dm_sys_rsp$DEQ,
       dm_stub_ff_dm_sys_rsp$EMPTY_N,
       dm_stub_ff_dm_sys_rsp$ENQ,
       dm_stub_ff_dm_sys_rsp$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_requestor
  wire f_reset_requestor$CLR,
       f_reset_requestor$DEQ,
       f_reset_requestor$D_IN,
       f_reset_requestor$D_OUT,
       f_reset_requestor$EMPTY_N,
       f_reset_requestor$ENQ,
       f_reset_requestor$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_dm_stub_rl_csr_req,
       CAN_FIRE_RL_dm_stub_rl_csr_rsp,
       CAN_FIRE_RL_dm_stub_rl_gpr_req,
       CAN_FIRE_RL_dm_stub_rl_gpr_rsp,
       CAN_FIRE_RL_dm_stub_rl_rst_req,
       CAN_FIRE_RL_dm_stub_rl_rst_rsp,
       CAN_FIRE_RL_dm_stub_rl_runhalt_req,
       CAN_FIRE_RL_dm_stub_rl_runhalt_rsp,
       CAN_FIRE_RL_dm_stub_rl_sb_req,
       CAN_FIRE_RL_dm_stub_rl_sbus_rsp,
       CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_debug_request_put,
       CAN_FIRE_debug_response_get,
       CAN_FIRE_dma_server_request_put,
       CAN_FIRE_dma_server_response_get,
       CAN_FIRE_m0_hrdata,
       CAN_FIRE_m0_hready,
       CAN_FIRE_m0_hresp,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_dm_stub_rl_csr_req,
       WILL_FIRE_RL_dm_stub_rl_csr_rsp,
       WILL_FIRE_RL_dm_stub_rl_gpr_req,
       WILL_FIRE_RL_dm_stub_rl_gpr_rsp,
       WILL_FIRE_RL_dm_stub_rl_rst_req,
       WILL_FIRE_RL_dm_stub_rl_rst_rsp,
       WILL_FIRE_RL_dm_stub_rl_runhalt_req,
       WILL_FIRE_RL_dm_stub_rl_runhalt_rsp,
       WILL_FIRE_RL_dm_stub_rl_sb_req,
       WILL_FIRE_RL_dm_stub_rl_sbus_rsp,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_debug_request_put,
       WILL_FIRE_debug_response_get,
       WILL_FIRE_dma_server_request_put,
       WILL_FIRE_dma_server_response_get,
       WILL_FIRE_m0_hrdata,
       WILL_FIRE_m0_hready,
       WILL_FIRE_m0_hresp,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  wire [36 : 0] MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_1,
		MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_2,
		MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_3,
		MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_4,
		MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_5;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h790;
  reg [31 : 0] v__h677;
  reg [31 : 0] v__h1168;
  reg [31 : 0] v__h2036;
  reg [31 : 0] v__h671;
  reg [31 : 0] v__h784;
  reg [31 : 0] v__h1162;
  reg [31 : 0] v__h2030;
  // synopsys translate_on

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method m0_haddr
  assign m0_HADDR = cpu$dmem_master_HADDR ;

  // value method m0_hburst
  assign m0_HBURST = cpu$dmem_master_HBURST ;

  // value method m0_hmastlock
  assign m0_HMASTLOCK = cpu$dmem_master_HMASTLOCK ;

  // value method m0_hprot
  assign m0_HPROT = cpu$dmem_master_HPROT ;

  // value method m0_hsize
  assign m0_HSIZE = cpu$dmem_master_HSIZE ;

  // value method m0_htrans
  assign m0_HTRANS = cpu$dmem_master_HTRANS ;

  // value method m0_hwdata
  assign m0_HWDATA = cpu$dmem_master_HWDATA ;

  // value method m0_hwrite
  assign m0_HWRITE = cpu$dmem_master_HWRITE ;

  // action method m0_hrdata
  assign CAN_FIRE_m0_hrdata = 1'd1 ;
  assign WILL_FIRE_m0_hrdata = 1'd1 ;

  // action method m0_hready
  assign CAN_FIRE_m0_hready = 1'd1 ;
  assign WILL_FIRE_m0_hready = 1'd1 ;

  // action method m0_hresp
  assign CAN_FIRE_m0_hresp = 1'd1 ;
  assign WILL_FIRE_m0_hresp = 1'd1 ;

  // action method dma_server_request_put
  assign RDY_dma_server_request_put = cpu$RDY_dma_server_request_put ;
  assign CAN_FIRE_dma_server_request_put = cpu$RDY_dma_server_request_put ;
  assign WILL_FIRE_dma_server_request_put = EN_dma_server_request_put ;

  // actionvalue method dma_server_response_get
  assign dma_server_response_get = cpu$dma_server_response_get ;
  assign RDY_dma_server_response_get = cpu$RDY_dma_server_response_get ;
  assign CAN_FIRE_dma_server_response_get = cpu$RDY_dma_server_response_get ;
  assign WILL_FIRE_dma_server_response_get = EN_dma_server_response_get ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method debug_request_put
  assign RDY_debug_request_put = dm_stub_ff_dm_sys_req$FULL_N ;
  assign CAN_FIRE_debug_request_put = dm_stub_ff_dm_sys_req$FULL_N ;
  assign WILL_FIRE_debug_request_put = EN_debug_request_put ;

  // actionvalue method debug_response_get
  assign debug_response_get = dm_stub_ff_dm_sys_rsp$D_OUT ;
  assign RDY_debug_response_get = dm_stub_ff_dm_sys_rsp$EMPTY_N ;
  assign CAN_FIRE_debug_response_get = dm_stub_ff_dm_sys_rsp$EMPTY_N ;
  assign WILL_FIRE_debug_response_get = EN_debug_response_get ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dbg_server_request_put(cpu$dbg_server_request_put),
	    .debug_hart_csr_mem_server_request_put(cpu$debug_hart_csr_mem_server_request_put),
	    .debug_hart_gpr_mem_server_request_put(cpu$debug_hart_gpr_mem_server_request_put),
	    .debug_hart_put_other_req_put(cpu$debug_hart_put_other_req_put),
	    .debug_hart_reset_server_request_put(cpu$debug_hart_reset_server_request_put),
	    .debug_hart_server_run_halt_request_put(cpu$debug_hart_server_run_halt_request_put),
	    .dma_server_request_put(cpu$dma_server_request_put),
	    .dmem_master_HRDATA(cpu$dmem_master_HRDATA),
	    .dmem_master_HREADY(cpu$dmem_master_HREADY),
	    .dmem_master_HRESP(cpu$dmem_master_HRESP),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_dbg_server_request_put(cpu$EN_dbg_server_request_put),
	    .EN_dbg_server_response_get(cpu$EN_dbg_server_response_get),
	    .EN_dma_server_request_put(cpu$EN_dma_server_request_put),
	    .EN_dma_server_response_get(cpu$EN_dma_server_response_get),
	    .EN_debug_hart_reset_server_request_put(cpu$EN_debug_hart_reset_server_request_put),
	    .EN_debug_hart_reset_server_response_get(cpu$EN_debug_hart_reset_server_response_get),
	    .EN_debug_hart_server_run_halt_request_put(cpu$EN_debug_hart_server_run_halt_request_put),
	    .EN_debug_hart_server_run_halt_response_get(cpu$EN_debug_hart_server_run_halt_response_get),
	    .EN_debug_hart_put_other_req_put(cpu$EN_debug_hart_put_other_req_put),
	    .EN_debug_hart_gpr_mem_server_request_put(cpu$EN_debug_hart_gpr_mem_server_request_put),
	    .EN_debug_hart_gpr_mem_server_response_get(cpu$EN_debug_hart_gpr_mem_server_response_get),
	    .EN_debug_hart_csr_mem_server_request_put(cpu$EN_debug_hart_csr_mem_server_request_put),
	    .EN_debug_hart_csr_mem_server_response_get(cpu$EN_debug_hart_csr_mem_server_response_get),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .dmem_master_HADDR(cpu$dmem_master_HADDR),
	    .dmem_master_HBURST(cpu$dmem_master_HBURST),
	    .dmem_master_HMASTLOCK(cpu$dmem_master_HMASTLOCK),
	    .dmem_master_HPROT(cpu$dmem_master_HPROT),
	    .dmem_master_HSIZE(cpu$dmem_master_HSIZE),
	    .dmem_master_HTRANS(cpu$dmem_master_HTRANS),
	    .dmem_master_HWDATA(cpu$dmem_master_HWDATA),
	    .dmem_master_HWRITE(cpu$dmem_master_HWRITE),
	    .RDY_dbg_server_request_put(cpu$RDY_dbg_server_request_put),
	    .dbg_server_response_get(cpu$dbg_server_response_get),
	    .RDY_dbg_server_response_get(cpu$RDY_dbg_server_response_get),
	    .RDY_dma_server_request_put(cpu$RDY_dma_server_request_put),
	    .dma_server_response_get(cpu$dma_server_response_get),
	    .RDY_dma_server_response_get(cpu$RDY_dma_server_response_get),
	    .RDY_debug_hart_reset_server_request_put(cpu$RDY_debug_hart_reset_server_request_put),
	    .debug_hart_reset_server_response_get(cpu$debug_hart_reset_server_response_get),
	    .RDY_debug_hart_reset_server_response_get(cpu$RDY_debug_hart_reset_server_response_get),
	    .RDY_debug_hart_server_run_halt_request_put(cpu$RDY_debug_hart_server_run_halt_request_put),
	    .debug_hart_server_run_halt_response_get(cpu$debug_hart_server_run_halt_response_get),
	    .RDY_debug_hart_server_run_halt_response_get(cpu$RDY_debug_hart_server_run_halt_response_get),
	    .RDY_debug_hart_put_other_req_put(),
	    .RDY_debug_hart_gpr_mem_server_request_put(cpu$RDY_debug_hart_gpr_mem_server_request_put),
	    .debug_hart_gpr_mem_server_response_get(cpu$debug_hart_gpr_mem_server_response_get),
	    .RDY_debug_hart_gpr_mem_server_response_get(cpu$RDY_debug_hart_gpr_mem_server_response_get),
	    .RDY_debug_hart_csr_mem_server_request_put(cpu$RDY_debug_hart_csr_mem_server_request_put),
	    .debug_hart_csr_mem_server_response_get(cpu$debug_hart_csr_mem_server_response_get),
	    .RDY_debug_hart_csr_mem_server_response_get(cpu$RDY_debug_hart_csr_mem_server_response_get));

  // submodule dm_stub_ff_dm_sys_req
  FIFO2 #(.width(32'd71), .guarded(1'd1)) dm_stub_ff_dm_sys_req(.RST(RST_N),
								.CLK(CLK),
								.D_IN(dm_stub_ff_dm_sys_req$D_IN),
								.ENQ(dm_stub_ff_dm_sys_req$ENQ),
								.DEQ(dm_stub_ff_dm_sys_req$DEQ),
								.CLR(dm_stub_ff_dm_sys_req$CLR),
								.D_OUT(dm_stub_ff_dm_sys_req$D_OUT),
								.FULL_N(dm_stub_ff_dm_sys_req$FULL_N),
								.EMPTY_N(dm_stub_ff_dm_sys_req$EMPTY_N));

  // submodule dm_stub_ff_dm_sys_rsp
  FIFO2 #(.width(32'd37), .guarded(1'd1)) dm_stub_ff_dm_sys_rsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(dm_stub_ff_dm_sys_rsp$D_IN),
								.ENQ(dm_stub_ff_dm_sys_rsp$ENQ),
								.DEQ(dm_stub_ff_dm_sys_rsp$DEQ),
								.CLR(dm_stub_ff_dm_sys_rsp$CLR),
								.D_OUT(dm_stub_ff_dm_sys_rsp$D_OUT),
								.FULL_N(dm_stub_ff_dm_sys_rsp$FULL_N),
								.EMPTY_N(dm_stub_ff_dm_sys_rsp$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_requestor
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_requestor(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_reset_requestor$D_IN),
							   .ENQ(f_reset_requestor$ENQ),
							   .DEQ(f_reset_requestor$DEQ),
							   .CLR(f_reset_requestor$CLR),
							   .D_OUT(f_reset_requestor$D_OUT),
							   .FULL_N(f_reset_requestor$FULL_N),
							   .EMPTY_N(f_reset_requestor$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     cpu$RDY_debug_hart_reset_server_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     f_reset_requestor$D_OUT ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // rule RL_dm_stub_rl_runhalt_req
  assign CAN_FIRE_RL_dm_stub_rl_runhalt_req =
	     cpu$RDY_debug_hart_server_run_halt_request_put &&
	     dm_stub_ff_dm_sys_req$EMPTY_N &&
	     dm_stub_ff_dm_sys_req$D_OUT[70:68] == 3'd1 ;
  assign WILL_FIRE_RL_dm_stub_rl_runhalt_req =
	     CAN_FIRE_RL_dm_stub_rl_runhalt_req ;

  // rule RL_dm_stub_rl_sb_req
  assign CAN_FIRE_RL_dm_stub_rl_sb_req =
	     cpu$RDY_dbg_server_request_put &&
	     dm_stub_ff_dm_sys_req$EMPTY_N &&
	     dm_stub_ff_dm_sys_req$D_OUT[70:68] == 3'd4 ;
  assign WILL_FIRE_RL_dm_stub_rl_sb_req =
	     CAN_FIRE_RL_dm_stub_rl_sb_req && !EN_dma_server_request_put ;

  // rule RL_dm_stub_rl_gpr_req
  assign CAN_FIRE_RL_dm_stub_rl_gpr_req =
	     cpu$RDY_debug_hart_gpr_mem_server_request_put &&
	     dm_stub_ff_dm_sys_req$EMPTY_N &&
	     dm_stub_ff_dm_sys_req$D_OUT[70:68] == 3'd2 ;
  assign WILL_FIRE_RL_dm_stub_rl_gpr_req = CAN_FIRE_RL_dm_stub_rl_gpr_req ;

  // rule RL_dm_stub_rl_csr_req
  assign CAN_FIRE_RL_dm_stub_rl_csr_req =
	     cpu$RDY_debug_hart_csr_mem_server_request_put &&
	     dm_stub_ff_dm_sys_req$EMPTY_N &&
	     dm_stub_ff_dm_sys_req$D_OUT[70:68] == 3'd3 ;
  assign WILL_FIRE_RL_dm_stub_rl_csr_req = CAN_FIRE_RL_dm_stub_rl_csr_req ;

  // rule RL_dm_stub_rl_sbus_rsp
  assign CAN_FIRE_RL_dm_stub_rl_sbus_rsp =
	     cpu$RDY_dbg_server_response_get && dm_stub_ff_dm_sys_rsp$FULL_N ;
  assign WILL_FIRE_RL_dm_stub_rl_sbus_rsp = CAN_FIRE_RL_dm_stub_rl_sbus_rsp ;

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     cpu$RDY_debug_hart_reset_server_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_dm_stub_rl_rst_req
  assign CAN_FIRE_RL_dm_stub_rl_rst_req =
	     cpu$RDY_debug_hart_reset_server_request_put &&
	     f_reset_requestor$FULL_N &&
	     dm_stub_ff_dm_sys_req$EMPTY_N &&
	     dm_stub_ff_dm_sys_req$D_OUT[70:68] == 3'd0 ;
  assign WILL_FIRE_RL_dm_stub_rl_rst_req =
	     CAN_FIRE_RL_dm_stub_rl_rst_req &&
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_dm_stub_rl_gpr_rsp
  assign CAN_FIRE_RL_dm_stub_rl_gpr_rsp =
	     cpu$RDY_debug_hart_gpr_mem_server_response_get &&
	     dm_stub_ff_dm_sys_rsp$FULL_N ;
  assign WILL_FIRE_RL_dm_stub_rl_gpr_rsp =
	     CAN_FIRE_RL_dm_stub_rl_gpr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_sbus_rsp ;

  // rule RL_dm_stub_rl_csr_rsp
  assign CAN_FIRE_RL_dm_stub_rl_csr_rsp =
	     cpu$RDY_debug_hart_csr_mem_server_response_get &&
	     dm_stub_ff_dm_sys_rsp$FULL_N ;
  assign WILL_FIRE_RL_dm_stub_rl_csr_rsp =
	     CAN_FIRE_RL_dm_stub_rl_csr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_gpr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_sbus_rsp ;

  // rule RL_dm_stub_rl_rst_rsp
  assign CAN_FIRE_RL_dm_stub_rl_rst_rsp =
	     !f_reset_requestor$D_OUT &&
	     cpu$RDY_debug_hart_reset_server_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     dm_stub_ff_dm_sys_rsp$FULL_N ;
  assign WILL_FIRE_RL_dm_stub_rl_rst_rsp =
	     CAN_FIRE_RL_dm_stub_rl_rst_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_csr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_gpr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_sbus_rsp ;

  // rule RL_dm_stub_rl_runhalt_rsp
  assign CAN_FIRE_RL_dm_stub_rl_runhalt_rsp =
	     cpu$RDY_debug_hart_server_run_halt_response_get &&
	     dm_stub_ff_dm_sys_rsp$FULL_N ;
  assign WILL_FIRE_RL_dm_stub_rl_runhalt_rsp =
	     CAN_FIRE_RL_dm_stub_rl_runhalt_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_rst_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_csr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_gpr_rsp &&
	     !WILL_FIRE_RL_dm_stub_rl_sbus_rsp ;

  // inputs to muxes for submodule ports
  assign MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_1 =
	     { 3'd4, cpu$dbg_server_response_get } ;
  assign MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_2 =
	     { 4'd4, cpu$debug_hart_gpr_mem_server_response_get } ;
  assign MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_3 =
	     { 4'd6, cpu$debug_hart_csr_mem_server_response_get } ;
  assign MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_4 =
	     { 36'h0AAAAAAAA, cpu$debug_hart_reset_server_response_get } ;
  assign MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_5 =
	     { 36'h2AAAAAAAA, cpu$debug_hart_server_run_halt_response_get } ;

  // submodule cpu
  assign cpu$dbg_server_request_put = dm_stub_ff_dm_sys_req$D_OUT[67:0] ;
  assign cpu$debug_hart_csr_mem_server_request_put =
	     dm_stub_ff_dm_sys_req$D_OUT[44:0] ;
  assign cpu$debug_hart_gpr_mem_server_request_put =
	     dm_stub_ff_dm_sys_req$D_OUT[37:0] ;
  assign cpu$debug_hart_put_other_req_put = 4'h0 ;
  assign cpu$debug_hart_reset_server_request_put =
	     WILL_FIRE_RL_dm_stub_rl_rst_req ?
	       dm_stub_ff_dm_sys_req$D_OUT[0] :
	       f_reset_reqs$D_OUT ;
  assign cpu$debug_hart_server_run_halt_request_put =
	     dm_stub_ff_dm_sys_req$D_OUT[0] ;
  assign cpu$dma_server_request_put = dma_server_request_put ;
  assign cpu$dmem_master_HRDATA = m0_HRDATA ;
  assign cpu$dmem_master_HREADY = m0_HREADY ;
  assign cpu$dmem_master_HRESP = m0_HRESP ;
  assign cpu$m_external_interrupt_req_set_not_clear = ext_interrupt ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$software_interrupt_req_set_not_clear = sw_interrupt ;
  assign cpu$timer_interrupt_req_set_not_clear = timer_interrupt ;
  assign cpu$EN_dbg_server_request_put = WILL_FIRE_RL_dm_stub_rl_sb_req ;
  assign cpu$EN_dbg_server_response_get = CAN_FIRE_RL_dm_stub_rl_sbus_rsp ;
  assign cpu$EN_dma_server_request_put = EN_dma_server_request_put ;
  assign cpu$EN_dma_server_response_get = EN_dma_server_response_get ;
  assign cpu$EN_debug_hart_reset_server_request_put =
	     WILL_FIRE_RL_dm_stub_rl_rst_req ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign cpu$EN_debug_hart_reset_server_response_get =
	     WILL_FIRE_RL_dm_stub_rl_rst_rsp ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$EN_debug_hart_server_run_halt_request_put =
	     CAN_FIRE_RL_dm_stub_rl_runhalt_req ;
  assign cpu$EN_debug_hart_server_run_halt_response_get =
	     WILL_FIRE_RL_dm_stub_rl_runhalt_rsp ;
  assign cpu$EN_debug_hart_put_other_req_put = 1'b0 ;
  assign cpu$EN_debug_hart_gpr_mem_server_request_put =
	     CAN_FIRE_RL_dm_stub_rl_gpr_req ;
  assign cpu$EN_debug_hart_gpr_mem_server_response_get =
	     WILL_FIRE_RL_dm_stub_rl_gpr_rsp ;
  assign cpu$EN_debug_hart_csr_mem_server_request_put =
	     CAN_FIRE_RL_dm_stub_rl_csr_req ;
  assign cpu$EN_debug_hart_csr_mem_server_response_get =
	     WILL_FIRE_RL_dm_stub_rl_csr_rsp ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;

  // submodule dm_stub_ff_dm_sys_req
  assign dm_stub_ff_dm_sys_req$D_IN = debug_request_put ;
  assign dm_stub_ff_dm_sys_req$ENQ = EN_debug_request_put ;
  assign dm_stub_ff_dm_sys_req$DEQ =
	     WILL_FIRE_RL_dm_stub_rl_csr_req ||
	     WILL_FIRE_RL_dm_stub_rl_gpr_req ||
	     WILL_FIRE_RL_dm_stub_rl_sb_req ||
	     WILL_FIRE_RL_dm_stub_rl_runhalt_req ||
	     WILL_FIRE_RL_dm_stub_rl_rst_req ;
  assign dm_stub_ff_dm_sys_req$CLR = 1'b0 ;

  // submodule dm_stub_ff_dm_sys_rsp
  always@(WILL_FIRE_RL_dm_stub_rl_sbus_rsp or
	  MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_1 or
	  WILL_FIRE_RL_dm_stub_rl_gpr_rsp or
	  MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_2 or
	  WILL_FIRE_RL_dm_stub_rl_csr_rsp or
	  MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_3 or
	  WILL_FIRE_RL_dm_stub_rl_rst_rsp or
	  MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_4 or
	  WILL_FIRE_RL_dm_stub_rl_runhalt_rsp or
	  MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dm_stub_rl_sbus_rsp:
	  dm_stub_ff_dm_sys_rsp$D_IN = MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_1;
      WILL_FIRE_RL_dm_stub_rl_gpr_rsp:
	  dm_stub_ff_dm_sys_rsp$D_IN = MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_2;
      WILL_FIRE_RL_dm_stub_rl_csr_rsp:
	  dm_stub_ff_dm_sys_rsp$D_IN = MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_3;
      WILL_FIRE_RL_dm_stub_rl_rst_rsp:
	  dm_stub_ff_dm_sys_rsp$D_IN = MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_4;
      WILL_FIRE_RL_dm_stub_rl_runhalt_rsp:
	  dm_stub_ff_dm_sys_rsp$D_IN = MUX_dm_stub_ff_dm_sys_rsp$enq_1__VAL_5;
      default: dm_stub_ff_dm_sys_rsp$D_IN =
		   37'h0AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dm_stub_ff_dm_sys_rsp$ENQ =
	     WILL_FIRE_RL_dm_stub_rl_sbus_rsp ||
	     WILL_FIRE_RL_dm_stub_rl_gpr_rsp ||
	     WILL_FIRE_RL_dm_stub_rl_csr_rsp ||
	     WILL_FIRE_RL_dm_stub_rl_rst_rsp ||
	     WILL_FIRE_RL_dm_stub_rl_runhalt_rsp ;
  assign dm_stub_ff_dm_sys_rsp$DEQ = EN_debug_response_get ;
  assign dm_stub_ff_dm_sys_rsp$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     cpu$RDY_debug_hart_reset_server_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_requestor
  assign f_reset_requestor$D_IN = !WILL_FIRE_RL_dm_stub_rl_rst_req ;
  assign f_reset_requestor$ENQ =
	     WILL_FIRE_RL_dm_stub_rl_rst_req ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign f_reset_requestor$DEQ =
	     WILL_FIRE_RL_dm_stub_rl_rst_rsp ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign f_reset_requestor$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$debug_hart_reset_server_response_get ;
  assign f_reset_rsps$ENQ =
	     cpu$RDY_debug_hart_reset_server_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     f_reset_requestor$D_OUT ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h790 = $stime;
	  #0;
	end
    v__h784 = v__h790 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%06d:[D]:%m.rl_cpu_hart0_reset_complete", v__h784);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h677 = $stime;
	  #0;
	end
    v__h671 = v__h677 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%06d:[D]:%m.rl_cpu_hart0_reset_from_soc_start", v__h671);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dm_stub_rl_rst_req)
	begin
	  v__h1168 = $stime;
	  #0;
	end
    v__h1162 = v__h1168 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dm_stub_rl_rst_req)
	$display("%06d:[D]:%m.rl_cpu_hart0_reset_from_dm_start", v__h1162);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dm_stub_rl_rst_rsp)
	begin
	  v__h2036 = $stime;
	  #0;
	end
    v__h2030 = v__h2036 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dm_stub_rl_rst_rsp)
	$display("%06d:[D]:%m.rl_cpu_hart0_reset_complete", v__h2030);
  end
  // synopsys translate_on
endmodule  // mkCore

